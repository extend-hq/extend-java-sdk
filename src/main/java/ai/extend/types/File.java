/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = File.Builder.class)
public final class File {
    private final String object;

    private final String id;

    private final String name;

    private final Optional<FileType> type;

    private final Optional<String> presignedUrl;

    private final Optional<String> parentFileId;

    private final Optional<FileContents> contents;

    private final FileMetadata metadata;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private File(
            String object,
            String id,
            String name,
            Optional<FileType> type,
            Optional<String> presignedUrl,
            Optional<String> parentFileId,
            Optional<FileContents> contents,
            FileMetadata metadata,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.object = object;
        this.id = id;
        this.name = name;
        this.type = type;
        this.presignedUrl = presignedUrl;
        this.parentFileId = parentFileId;
        this.contents = contents;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of response. In this case, it will always be &quot;file&quot;.
     */
    @JsonProperty("object")
    public String getObject() {
        return object;
    }

    /**
     * @return Extend's internal ID for the file. It will always start with <code>&quot;file_&quot;</code>.
     * <p>Example: <code>&quot;file_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The name of the file
     * <p>Example: <code>&quot;Invoices.pdf&quot;</code></p>
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The type of the file
     */
    @JsonProperty("type")
    public Optional<FileType> getType() {
        return type;
    }

    /**
     * @return A presigned URL to download the file. Expires after 15 minutes.
     */
    @JsonProperty("presignedUrl")
    public Optional<String> getPresignedUrl() {
        return presignedUrl;
    }

    /**
     * @return The ID of the parent file. Only included if this file is a derivative of another file, for instance if it was created via a Splitter in a workflow.
     */
    @JsonProperty("parentFileId")
    public Optional<String> getParentFileId() {
        return parentFileId;
    }

    @JsonProperty("contents")
    public Optional<FileContents> getContents() {
        return contents;
    }

    @JsonProperty("metadata")
    public FileMetadata getMetadata() {
        return metadata;
    }

    /**
     * @return The time (in UTC) at which the file was created. Will follow the RFC 3339 format.
     * <p>Example: <code>&quot;2024-03-21T15:30:00Z&quot;</code></p>
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The time (in UTC) at which the file was last updated. Will follow the RFC 3339 format.
     * <p>Example: <code>&quot;2024-03-21T16:45:00Z&quot;</code></p>
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof File && equalTo((File) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(File other) {
        return object.equals(other.object)
                && id.equals(other.id)
                && name.equals(other.name)
                && type.equals(other.type)
                && presignedUrl.equals(other.presignedUrl)
                && parentFileId.equals(other.parentFileId)
                && contents.equals(other.contents)
                && metadata.equals(other.metadata)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.object,
                this.id,
                this.name,
                this.type,
                this.presignedUrl,
                this.parentFileId,
                this.contents,
                this.metadata,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ObjectStage builder() {
        return new Builder();
    }

    public interface ObjectStage {
        /**
         * <p>The type of response. In this case, it will always be &quot;file&quot;.</p>
         */
        IdStage object(@NotNull String object);

        Builder from(File other);
    }

    public interface IdStage {
        /**
         * <p>Extend's internal ID for the file. It will always start with <code>&quot;file_&quot;</code>.</p>
         * <p>Example: <code>&quot;file_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
         */
        NameStage id(@NotNull String id);
    }

    public interface NameStage {
        /**
         * <p>The name of the file</p>
         * <p>Example: <code>&quot;Invoices.pdf&quot;</code></p>
         */
        MetadataStage name(@NotNull String name);
    }

    public interface MetadataStage {
        CreatedAtStage metadata(@NotNull FileMetadata metadata);
    }

    public interface CreatedAtStage {
        /**
         * <p>The time (in UTC) at which the file was created. Will follow the RFC 3339 format.</p>
         * <p>Example: <code>&quot;2024-03-21T15:30:00Z&quot;</code></p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>The time (in UTC) at which the file was last updated. Will follow the RFC 3339 format.</p>
         * <p>Example: <code>&quot;2024-03-21T16:45:00Z&quot;</code></p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        File build();

        /**
         * <p>The type of the file</p>
         */
        _FinalStage type(Optional<FileType> type);

        _FinalStage type(FileType type);

        /**
         * <p>A presigned URL to download the file. Expires after 15 minutes.</p>
         */
        _FinalStage presignedUrl(Optional<String> presignedUrl);

        _FinalStage presignedUrl(String presignedUrl);

        /**
         * <p>The ID of the parent file. Only included if this file is a derivative of another file, for instance if it was created via a Splitter in a workflow.</p>
         */
        _FinalStage parentFileId(Optional<String> parentFileId);

        _FinalStage parentFileId(String parentFileId);

        _FinalStage contents(Optional<FileContents> contents);

        _FinalStage contents(FileContents contents);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ObjectStage, IdStage, NameStage, MetadataStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
        private String object;

        private String id;

        private String name;

        private FileMetadata metadata;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<FileContents> contents = Optional.empty();

        private Optional<String> parentFileId = Optional.empty();

        private Optional<String> presignedUrl = Optional.empty();

        private Optional<FileType> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(File other) {
            object(other.getObject());
            id(other.getId());
            name(other.getName());
            type(other.getType());
            presignedUrl(other.getPresignedUrl());
            parentFileId(other.getParentFileId());
            contents(other.getContents());
            metadata(other.getMetadata());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        /**
         * <p>The type of response. In this case, it will always be &quot;file&quot;.</p>
         * <p>The type of response. In this case, it will always be &quot;file&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("object")
        public IdStage object(@NotNull String object) {
            this.object = Objects.requireNonNull(object, "object must not be null");
            return this;
        }

        /**
         * <p>Extend's internal ID for the file. It will always start with <code>&quot;file_&quot;</code>.</p>
         * <p>Example: <code>&quot;file_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
         * <p>Extend's internal ID for the file. It will always start with <code>&quot;file_&quot;</code>.</p>
         * <p>Example: <code>&quot;file_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The name of the file</p>
         * <p>Example: <code>&quot;Invoices.pdf&quot;</code></p>
         * <p>The name of the file</p>
         * <p>Example: <code>&quot;Invoices.pdf&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public MetadataStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("metadata")
        public CreatedAtStage metadata(@NotNull FileMetadata metadata) {
            this.metadata = Objects.requireNonNull(metadata, "metadata must not be null");
            return this;
        }

        /**
         * <p>The time (in UTC) at which the file was created. Will follow the RFC 3339 format.</p>
         * <p>Example: <code>&quot;2024-03-21T15:30:00Z&quot;</code></p>
         * <p>The time (in UTC) at which the file was created. Will follow the RFC 3339 format.</p>
         * <p>Example: <code>&quot;2024-03-21T15:30:00Z&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>The time (in UTC) at which the file was last updated. Will follow the RFC 3339 format.</p>
         * <p>Example: <code>&quot;2024-03-21T16:45:00Z&quot;</code></p>
         * <p>The time (in UTC) at which the file was last updated. Will follow the RFC 3339 format.</p>
         * <p>Example: <code>&quot;2024-03-21T16:45:00Z&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage contents(FileContents contents) {
            this.contents = Optional.ofNullable(contents);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "contents", nulls = Nulls.SKIP)
        public _FinalStage contents(Optional<FileContents> contents) {
            this.contents = contents;
            return this;
        }

        /**
         * <p>The ID of the parent file. Only included if this file is a derivative of another file, for instance if it was created via a Splitter in a workflow.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parentFileId(String parentFileId) {
            this.parentFileId = Optional.ofNullable(parentFileId);
            return this;
        }

        /**
         * <p>The ID of the parent file. Only included if this file is a derivative of another file, for instance if it was created via a Splitter in a workflow.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "parentFileId", nulls = Nulls.SKIP)
        public _FinalStage parentFileId(Optional<String> parentFileId) {
            this.parentFileId = parentFileId;
            return this;
        }

        /**
         * <p>A presigned URL to download the file. Expires after 15 minutes.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage presignedUrl(String presignedUrl) {
            this.presignedUrl = Optional.ofNullable(presignedUrl);
            return this;
        }

        /**
         * <p>A presigned URL to download the file. Expires after 15 minutes.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "presignedUrl", nulls = Nulls.SKIP)
        public _FinalStage presignedUrl(Optional<String> presignedUrl) {
            this.presignedUrl = presignedUrl;
            return this;
        }

        /**
         * <p>The type of the file</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage type(FileType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The type of the file</p>
         */
        @java.lang.Override
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public _FinalStage type(Optional<FileType> type) {
            this.type = type;
            return this;
        }

        @java.lang.Override
        public File build() {
            return new File(
                    object,
                    id,
                    name,
                    type,
                    presignedUrl,
                    parentFileId,
                    contents,
                    metadata,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}

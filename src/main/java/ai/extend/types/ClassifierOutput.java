/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClassifierOutput.Builder.class)
public final class ClassifierOutput {
    private final String id;

    private final String type;

    private final double confidence;

    private final List<Insight> insights;

    private final Map<String, Object> additionalProperties;

    private ClassifierOutput(
            String id,
            String type,
            double confidence,
            List<Insight> insights,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.type = type;
        this.confidence = confidence;
        this.insights = insights;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique identifier for this classification
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The type of classification
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return A value between 0 and 1 indicating the model's confidence in the classification, where 1 represents maximum confidence
     */
    @JsonProperty("confidence")
    public double getConfidence() {
        return confidence;
    }

    /**
     * @return Additional insights about the classification decision
     */
    @JsonProperty("insights")
    public List<Insight> getInsights() {
        return insights;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClassifierOutput && equalTo((ClassifierOutput) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClassifierOutput other) {
        return id.equals(other.id)
                && type.equals(other.type)
                && confidence == other.confidence
                && insights.equals(other.insights);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.type, this.confidence, this.insights);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The unique identifier for this classification</p>
         */
        TypeStage id(@NotNull String id);

        Builder from(ClassifierOutput other);
    }

    public interface TypeStage {
        /**
         * <p>The type of classification</p>
         */
        ConfidenceStage type(@NotNull String type);
    }

    public interface ConfidenceStage {
        /**
         * <p>A value between 0 and 1 indicating the model's confidence in the classification, where 1 represents maximum confidence</p>
         */
        _FinalStage confidence(double confidence);
    }

    public interface _FinalStage {
        ClassifierOutput build();

        /**
         * <p>Additional insights about the classification decision</p>
         */
        _FinalStage insights(List<Insight> insights);

        _FinalStage addInsights(Insight insights);

        _FinalStage addAllInsights(List<Insight> insights);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, TypeStage, ConfidenceStage, _FinalStage {
        private String id;

        private String type;

        private double confidence;

        private List<Insight> insights = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClassifierOutput other) {
            id(other.getId());
            type(other.getType());
            confidence(other.getConfidence());
            insights(other.getInsights());
            return this;
        }

        /**
         * <p>The unique identifier for this classification</p>
         * <p>The unique identifier for this classification</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public TypeStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The type of classification</p>
         * <p>The type of classification</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public ConfidenceStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>A value between 0 and 1 indicating the model's confidence in the classification, where 1 represents maximum confidence</p>
         * <p>A value between 0 and 1 indicating the model's confidence in the classification, where 1 represents maximum confidence</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("confidence")
        public _FinalStage confidence(double confidence) {
            this.confidence = confidence;
            return this;
        }

        /**
         * <p>Additional insights about the classification decision</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllInsights(List<Insight> insights) {
            this.insights.addAll(insights);
            return this;
        }

        /**
         * <p>Additional insights about the classification decision</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addInsights(Insight insights) {
            this.insights.add(insights);
            return this;
        }

        /**
         * <p>Additional insights about the classification decision</p>
         */
        @java.lang.Override
        @JsonSetter(value = "insights", nulls = Nulls.SKIP)
        public _FinalStage insights(List<Insight> insights) {
            this.insights.clear();
            this.insights.addAll(insights);
            return this;
        }

        @java.lang.Override
        public ClassifierOutput build() {
            return new ClassifierOutput(id, type, confidence, insights, additionalProperties);
        }
    }
}

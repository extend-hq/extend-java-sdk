/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParseConfigBlockOptionsText.Builder.class)
public final class ParseConfigBlockOptionsText {
    private final Optional<Boolean> signatureDetectionEnabled;

    private final Map<String, Object> additionalProperties;

    private ParseConfigBlockOptionsText(
            Optional<Boolean> signatureDetectionEnabled, Map<String, Object> additionalProperties) {
        this.signatureDetectionEnabled = signatureDetectionEnabled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether an additional vision model will be utilized for advanced signature detection. Recommended for most use cases, but should be disabled if signature detection is not necessary and latency is a concern.
     */
    @JsonProperty("signatureDetectionEnabled")
    public Optional<Boolean> getSignatureDetectionEnabled() {
        return signatureDetectionEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParseConfigBlockOptionsText && equalTo((ParseConfigBlockOptionsText) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParseConfigBlockOptionsText other) {
        return signatureDetectionEnabled.equals(other.signatureDetectionEnabled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.signatureDetectionEnabled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> signatureDetectionEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ParseConfigBlockOptionsText other) {
            signatureDetectionEnabled(other.getSignatureDetectionEnabled());
            return this;
        }

        /**
         * <p>Whether an additional vision model will be utilized for advanced signature detection. Recommended for most use cases, but should be disabled if signature detection is not necessary and latency is a concern.</p>
         */
        @JsonSetter(value = "signatureDetectionEnabled", nulls = Nulls.SKIP)
        public Builder signatureDetectionEnabled(Optional<Boolean> signatureDetectionEnabled) {
            this.signatureDetectionEnabled = signatureDetectionEnabled;
            return this;
        }

        public Builder signatureDetectionEnabled(Boolean signatureDetectionEnabled) {
            this.signatureDetectionEnabled = Optional.ofNullable(signatureDetectionEnabled);
            return this;
        }

        public ParseConfigBlockOptionsText build() {
            return new ParseConfigBlockOptionsText(signatureDetectionEnabled, additionalProperties);
        }
    }
}

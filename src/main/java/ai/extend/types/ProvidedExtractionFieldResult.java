/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProvidedExtractionFieldResult.Builder.class)
public final class ProvidedExtractionFieldResult {
    private final String id;

    private final Object value;

    private final Optional<ProvidedExtractionFieldResultType> type;

    private final Optional<Double> confidence;

    private final Optional<Double> page;

    private final Map<String, Object> additionalProperties;

    private ProvidedExtractionFieldResult(
            String id,
            Object value,
            Optional<ProvidedExtractionFieldResultType> type,
            Optional<Double> confidence,
            Optional<Double> page,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.value = value;
        this.type = type;
        this.confidence = confidence;
        this.page = page;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique identifier for this field
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("value")
    public Object getValue() {
        return value;
    }

    /**
     * @return The type of the extraction field result
     */
    @JsonProperty("type")
    public Optional<ProvidedExtractionFieldResultType> getType() {
        return type;
    }

    /**
     * @return A value between 0 and 1 indicating confidence in the extraction. Will be set to 1 if not provided.
     */
    @JsonProperty("confidence")
    public Optional<Double> getConfidence() {
        return confidence;
    }

    /**
     * @return The page number where this field was extracted from
     */
    @JsonProperty("page")
    public Optional<Double> getPage() {
        return page;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProvidedExtractionFieldResult && equalTo((ProvidedExtractionFieldResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProvidedExtractionFieldResult other) {
        return id.equals(other.id)
                && value.equals(other.value)
                && type.equals(other.type)
                && confidence.equals(other.confidence)
                && page.equals(other.page);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.value, this.type, this.confidence, this.page);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The unique identifier for this field</p>
         */
        ValueStage id(@NotNull String id);

        Builder from(ProvidedExtractionFieldResult other);
    }

    public interface ValueStage {
        _FinalStage value(Object value);
    }

    public interface _FinalStage {
        ProvidedExtractionFieldResult build();

        /**
         * <p>The type of the extraction field result</p>
         */
        _FinalStage type(Optional<ProvidedExtractionFieldResultType> type);

        _FinalStage type(ProvidedExtractionFieldResultType type);

        /**
         * <p>A value between 0 and 1 indicating confidence in the extraction. Will be set to 1 if not provided.</p>
         */
        _FinalStage confidence(Optional<Double> confidence);

        _FinalStage confidence(Double confidence);

        /**
         * <p>The page number where this field was extracted from</p>
         */
        _FinalStage page(Optional<Double> page);

        _FinalStage page(Double page);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, ValueStage, _FinalStage {
        private String id;

        private Object value;

        private Optional<Double> page = Optional.empty();

        private Optional<Double> confidence = Optional.empty();

        private Optional<ProvidedExtractionFieldResultType> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProvidedExtractionFieldResult other) {
            id(other.getId());
            value(other.getValue());
            type(other.getType());
            confidence(other.getConfidence());
            page(other.getPage());
            return this;
        }

        /**
         * <p>The unique identifier for this field</p>
         * <p>The unique identifier for this field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public ValueStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("value")
        public _FinalStage value(Object value) {
            this.value = value;
            return this;
        }

        /**
         * <p>The page number where this field was extracted from</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage page(Double page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>The page number where this field was extracted from</p>
         */
        @java.lang.Override
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public _FinalStage page(Optional<Double> page) {
            this.page = page;
            return this;
        }

        /**
         * <p>A value between 0 and 1 indicating confidence in the extraction. Will be set to 1 if not provided.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage confidence(Double confidence) {
            this.confidence = Optional.ofNullable(confidence);
            return this;
        }

        /**
         * <p>A value between 0 and 1 indicating confidence in the extraction. Will be set to 1 if not provided.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "confidence", nulls = Nulls.SKIP)
        public _FinalStage confidence(Optional<Double> confidence) {
            this.confidence = confidence;
            return this;
        }

        /**
         * <p>The type of the extraction field result</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage type(ProvidedExtractionFieldResultType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The type of the extraction field result</p>
         */
        @java.lang.Override
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public _FinalStage type(Optional<ProvidedExtractionFieldResultType> type) {
            this.type = type;
            return this;
        }

        @java.lang.Override
        public ProvidedExtractionFieldResult build() {
            return new ProvidedExtractionFieldResult(id, value, type, confidence, page, additionalProperties);
        }
    }
}

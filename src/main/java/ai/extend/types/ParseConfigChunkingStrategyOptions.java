/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParseConfigChunkingStrategyOptions.Builder.class)
public final class ParseConfigChunkingStrategyOptions {
    private final Optional<Integer> minCharacters;

    private final Optional<Integer> maxCharacters;

    private final Map<String, Object> additionalProperties;

    private ParseConfigChunkingStrategyOptions(
            Optional<Integer> minCharacters,
            Optional<Integer> maxCharacters,
            Map<String, Object> additionalProperties) {
        this.minCharacters = minCharacters;
        this.maxCharacters = maxCharacters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Specify a minimum number of characters per chunk.
     */
    @JsonProperty("minCharacters")
    public Optional<Integer> getMinCharacters() {
        return minCharacters;
    }

    /**
     * @return Specify a maximum number of characters per chunk.
     */
    @JsonProperty("maxCharacters")
    public Optional<Integer> getMaxCharacters() {
        return maxCharacters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParseConfigChunkingStrategyOptions
                && equalTo((ParseConfigChunkingStrategyOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParseConfigChunkingStrategyOptions other) {
        return minCharacters.equals(other.minCharacters) && maxCharacters.equals(other.maxCharacters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.minCharacters, this.maxCharacters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> minCharacters = Optional.empty();

        private Optional<Integer> maxCharacters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ParseConfigChunkingStrategyOptions other) {
            minCharacters(other.getMinCharacters());
            maxCharacters(other.getMaxCharacters());
            return this;
        }

        /**
         * <p>Specify a minimum number of characters per chunk.</p>
         */
        @JsonSetter(value = "minCharacters", nulls = Nulls.SKIP)
        public Builder minCharacters(Optional<Integer> minCharacters) {
            this.minCharacters = minCharacters;
            return this;
        }

        public Builder minCharacters(Integer minCharacters) {
            this.minCharacters = Optional.ofNullable(minCharacters);
            return this;
        }

        /**
         * <p>Specify a maximum number of characters per chunk.</p>
         */
        @JsonSetter(value = "maxCharacters", nulls = Nulls.SKIP)
        public Builder maxCharacters(Optional<Integer> maxCharacters) {
            this.maxCharacters = maxCharacters;
            return this;
        }

        public Builder maxCharacters(Integer maxCharacters) {
            this.maxCharacters = Optional.ofNullable(maxCharacters);
            return this;
        }

        public ParseConfigChunkingStrategyOptions build() {
            return new ParseConfigChunkingStrategyOptions(minCharacters, maxCharacters, additionalProperties);
        }
    }
}

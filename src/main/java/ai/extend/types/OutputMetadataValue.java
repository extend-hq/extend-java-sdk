/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OutputMetadataValue.Builder.class)
public final class OutputMetadataValue {
    private final Optional<Double> ocrConfidence;

    private final Optional<Double> logprobsConfidence;

    private final Optional<List<Citation>> citations;

    private final Optional<List<Insight>> insights;

    private final Map<String, Object> additionalProperties;

    private OutputMetadataValue(
            Optional<Double> ocrConfidence,
            Optional<Double> logprobsConfidence,
            Optional<List<Citation>> citations,
            Optional<List<Insight>> insights,
            Map<String, Object> additionalProperties) {
        this.ocrConfidence = ocrConfidence;
        this.logprobsConfidence = logprobsConfidence;
        this.citations = citations;
        this.insights = insights;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Confidence score from OCR processing, if applicable
     */
    @JsonProperty("ocrConfidence")
    public Optional<Double> getOcrConfidence() {
        return ocrConfidence;
    }

    /**
     * @return Confidence score based on model logprobs
     */
    @JsonProperty("logprobsConfidence")
    public Optional<Double> getLogprobsConfidence() {
        return logprobsConfidence;
    }

    @JsonProperty("citations")
    public Optional<List<Citation>> getCitations() {
        return citations;
    }

    @JsonProperty("insights")
    public Optional<List<Insight>> getInsights() {
        return insights;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OutputMetadataValue && equalTo((OutputMetadataValue) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OutputMetadataValue other) {
        return ocrConfidence.equals(other.ocrConfidence)
                && logprobsConfidence.equals(other.logprobsConfidence)
                && citations.equals(other.citations)
                && insights.equals(other.insights);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ocrConfidence, this.logprobsConfidence, this.citations, this.insights);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> ocrConfidence = Optional.empty();

        private Optional<Double> logprobsConfidence = Optional.empty();

        private Optional<List<Citation>> citations = Optional.empty();

        private Optional<List<Insight>> insights = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OutputMetadataValue other) {
            ocrConfidence(other.getOcrConfidence());
            logprobsConfidence(other.getLogprobsConfidence());
            citations(other.getCitations());
            insights(other.getInsights());
            return this;
        }

        /**
         * <p>Confidence score from OCR processing, if applicable</p>
         */
        @JsonSetter(value = "ocrConfidence", nulls = Nulls.SKIP)
        public Builder ocrConfidence(Optional<Double> ocrConfidence) {
            this.ocrConfidence = ocrConfidence;
            return this;
        }

        public Builder ocrConfidence(Double ocrConfidence) {
            this.ocrConfidence = Optional.ofNullable(ocrConfidence);
            return this;
        }

        /**
         * <p>Confidence score based on model logprobs</p>
         */
        @JsonSetter(value = "logprobsConfidence", nulls = Nulls.SKIP)
        public Builder logprobsConfidence(Optional<Double> logprobsConfidence) {
            this.logprobsConfidence = logprobsConfidence;
            return this;
        }

        public Builder logprobsConfidence(Double logprobsConfidence) {
            this.logprobsConfidence = Optional.ofNullable(logprobsConfidence);
            return this;
        }

        @JsonSetter(value = "citations", nulls = Nulls.SKIP)
        public Builder citations(Optional<List<Citation>> citations) {
            this.citations = citations;
            return this;
        }

        public Builder citations(List<Citation> citations) {
            this.citations = Optional.ofNullable(citations);
            return this;
        }

        @JsonSetter(value = "insights", nulls = Nulls.SKIP)
        public Builder insights(Optional<List<Insight>> insights) {
            this.insights = insights;
            return this;
        }

        public Builder insights(List<Insight> insights) {
            this.insights = Optional.ofNullable(insights);
            return this;
        }

        public OutputMetadataValue build() {
            return new OutputMetadataValue(
                    ocrConfidence, logprobsConfidence, citations, insights, additionalProperties);
        }
    }
}

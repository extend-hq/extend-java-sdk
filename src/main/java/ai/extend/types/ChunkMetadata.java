/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChunkMetadata.Builder.class)
public final class ChunkMetadata {
    private final ChunkMetadataPageRange pageRange;

    private final Map<String, Object> additionalProperties;

    private ChunkMetadata(ChunkMetadataPageRange pageRange, Map<String, Object> additionalProperties) {
        this.pageRange = pageRange;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The page range this chunk covers. Often will just be a partial page, in which cases <code>start</code> and <code>end</code> will be the same.
     */
    @JsonProperty("pageRange")
    public ChunkMetadataPageRange getPageRange() {
        return pageRange;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChunkMetadata && equalTo((ChunkMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChunkMetadata other) {
        return pageRange.equals(other.pageRange);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pageRange);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PageRangeStage builder() {
        return new Builder();
    }

    public interface PageRangeStage {
        /**
         * <p>The page range this chunk covers. Often will just be a partial page, in which cases <code>start</code> and <code>end</code> will be the same.</p>
         */
        _FinalStage pageRange(@NotNull ChunkMetadataPageRange pageRange);

        Builder from(ChunkMetadata other);
    }

    public interface _FinalStage {
        ChunkMetadata build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PageRangeStage, _FinalStage {
        private ChunkMetadataPageRange pageRange;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ChunkMetadata other) {
            pageRange(other.getPageRange());
            return this;
        }

        /**
         * <p>The page range this chunk covers. Often will just be a partial page, in which cases <code>start</code> and <code>end</code> will be the same.</p>
         * <p>The page range this chunk covers. Often will just be a partial page, in which cases <code>start</code> and <code>end</code> will be the same.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("pageRange")
        public _FinalStage pageRange(@NotNull ChunkMetadataPageRange pageRange) {
            this.pageRange = Objects.requireNonNull(pageRange, "pageRange must not be null");
            return this;
        }

        @java.lang.Override
        public ChunkMetadata build() {
            return new ChunkMetadata(pageRange, additionalProperties);
        }
    }
}

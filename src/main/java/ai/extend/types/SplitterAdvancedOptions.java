/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SplitterAdvancedOptions.Builder.class)
public final class SplitterAdvancedOptions {
    private final Optional<String> splitIdentifierRules;

    private final Optional<SplitterAdvancedOptionsSplitMethod> splitMethod;

    private final Optional<Boolean> splitExcelDocumentsBySheetEnabled;

    private final Optional<Integer> fixedPageLimit;

    private final Optional<List<PageRangesItem>> pageRanges;

    private final Map<String, Object> additionalProperties;

    private SplitterAdvancedOptions(
            Optional<String> splitIdentifierRules,
            Optional<SplitterAdvancedOptionsSplitMethod> splitMethod,
            Optional<Boolean> splitExcelDocumentsBySheetEnabled,
            Optional<Integer> fixedPageLimit,
            Optional<List<PageRangesItem>> pageRanges,
            Map<String, Object> additionalProperties) {
        this.splitIdentifierRules = splitIdentifierRules;
        this.splitMethod = splitMethod;
        this.splitExcelDocumentsBySheetEnabled = splitExcelDocumentsBySheetEnabled;
        this.fixedPageLimit = fixedPageLimit;
        this.pageRanges = pageRanges;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Custom rules for identifying split points.
     */
    @JsonProperty("splitIdentifierRules")
    public Optional<String> getSplitIdentifierRules() {
        return splitIdentifierRules;
    }

    /**
     * @return The method to use for splitting documents. <code>high_precision</code> is more accurate but slower, while <code>low_latency</code> is faster but less precise.
     */
    @JsonProperty("splitMethod")
    public Optional<SplitterAdvancedOptionsSplitMethod> getSplitMethod() {
        return splitMethod;
    }

    /**
     * @return For Excel documents, split by worksheet.
     */
    @JsonProperty("splitExcelDocumentsBySheetEnabled")
    public Optional<Boolean> getSplitExcelDocumentsBySheetEnabled() {
        return splitExcelDocumentsBySheetEnabled;
    }

    /**
     * @return Limit processing to a specific number of pages from the beginning of the document. See <a href="/product/page-ranges">Page Ranges</a>.
     */
    @JsonProperty("fixedPageLimit")
    public Optional<Integer> getFixedPageLimit() {
        return fixedPageLimit;
    }

    @JsonProperty("pageRanges")
    public Optional<List<PageRangesItem>> getPageRanges() {
        return pageRanges;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SplitterAdvancedOptions && equalTo((SplitterAdvancedOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SplitterAdvancedOptions other) {
        return splitIdentifierRules.equals(other.splitIdentifierRules)
                && splitMethod.equals(other.splitMethod)
                && splitExcelDocumentsBySheetEnabled.equals(other.splitExcelDocumentsBySheetEnabled)
                && fixedPageLimit.equals(other.fixedPageLimit)
                && pageRanges.equals(other.pageRanges);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.splitIdentifierRules,
                this.splitMethod,
                this.splitExcelDocumentsBySheetEnabled,
                this.fixedPageLimit,
                this.pageRanges);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> splitIdentifierRules = Optional.empty();

        private Optional<SplitterAdvancedOptionsSplitMethod> splitMethod = Optional.empty();

        private Optional<Boolean> splitExcelDocumentsBySheetEnabled = Optional.empty();

        private Optional<Integer> fixedPageLimit = Optional.empty();

        private Optional<List<PageRangesItem>> pageRanges = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SplitterAdvancedOptions other) {
            splitIdentifierRules(other.getSplitIdentifierRules());
            splitMethod(other.getSplitMethod());
            splitExcelDocumentsBySheetEnabled(other.getSplitExcelDocumentsBySheetEnabled());
            fixedPageLimit(other.getFixedPageLimit());
            pageRanges(other.getPageRanges());
            return this;
        }

        /**
         * <p>Custom rules for identifying split points.</p>
         */
        @JsonSetter(value = "splitIdentifierRules", nulls = Nulls.SKIP)
        public Builder splitIdentifierRules(Optional<String> splitIdentifierRules) {
            this.splitIdentifierRules = splitIdentifierRules;
            return this;
        }

        public Builder splitIdentifierRules(String splitIdentifierRules) {
            this.splitIdentifierRules = Optional.ofNullable(splitIdentifierRules);
            return this;
        }

        /**
         * <p>The method to use for splitting documents. <code>high_precision</code> is more accurate but slower, while <code>low_latency</code> is faster but less precise.</p>
         */
        @JsonSetter(value = "splitMethod", nulls = Nulls.SKIP)
        public Builder splitMethod(Optional<SplitterAdvancedOptionsSplitMethod> splitMethod) {
            this.splitMethod = splitMethod;
            return this;
        }

        public Builder splitMethod(SplitterAdvancedOptionsSplitMethod splitMethod) {
            this.splitMethod = Optional.ofNullable(splitMethod);
            return this;
        }

        /**
         * <p>For Excel documents, split by worksheet.</p>
         */
        @JsonSetter(value = "splitExcelDocumentsBySheetEnabled", nulls = Nulls.SKIP)
        public Builder splitExcelDocumentsBySheetEnabled(Optional<Boolean> splitExcelDocumentsBySheetEnabled) {
            this.splitExcelDocumentsBySheetEnabled = splitExcelDocumentsBySheetEnabled;
            return this;
        }

        public Builder splitExcelDocumentsBySheetEnabled(Boolean splitExcelDocumentsBySheetEnabled) {
            this.splitExcelDocumentsBySheetEnabled = Optional.ofNullable(splitExcelDocumentsBySheetEnabled);
            return this;
        }

        /**
         * <p>Limit processing to a specific number of pages from the beginning of the document. See <a href="/product/page-ranges">Page Ranges</a>.</p>
         */
        @JsonSetter(value = "fixedPageLimit", nulls = Nulls.SKIP)
        public Builder fixedPageLimit(Optional<Integer> fixedPageLimit) {
            this.fixedPageLimit = fixedPageLimit;
            return this;
        }

        public Builder fixedPageLimit(Integer fixedPageLimit) {
            this.fixedPageLimit = Optional.ofNullable(fixedPageLimit);
            return this;
        }

        @JsonSetter(value = "pageRanges", nulls = Nulls.SKIP)
        public Builder pageRanges(Optional<List<PageRangesItem>> pageRanges) {
            this.pageRanges = pageRanges;
            return this;
        }

        public Builder pageRanges(List<PageRangesItem> pageRanges) {
            this.pageRanges = Optional.ofNullable(pageRanges);
            return this;
        }

        public SplitterAdvancedOptions build() {
            return new SplitterAdvancedOptions(
                    splitIdentifierRules,
                    splitMethod,
                    splitExcelDocumentsBySheetEnabled,
                    fixedPageLimit,
                    pageRanges,
                    additionalProperties);
        }
    }
}

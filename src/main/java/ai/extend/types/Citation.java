/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Citation.Builder.class)
public final class Citation {
    private final Optional<Double> page;

    private final Optional<String> referenceText;

    private final Optional<List<Polygon>> polygon;

    private final Map<String, Object> additionalProperties;

    private Citation(
            Optional<Double> page,
            Optional<String> referenceText,
            Optional<List<Polygon>> polygon,
            Map<String, Object> additionalProperties) {
        this.page = page;
        this.referenceText = referenceText;
        this.polygon = polygon;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Page number where the citation was found
     */
    @JsonProperty("page")
    public Optional<Double> getPage() {
        return page;
    }

    /**
     * @return The text that was referenced
     */
    @JsonProperty("referenceText")
    public Optional<String> getReferenceText() {
        return referenceText;
    }

    /**
     * @return Array of points defining the polygon
     */
    @JsonProperty("polygon")
    public Optional<List<Polygon>> getPolygon() {
        return polygon;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Citation && equalTo((Citation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Citation other) {
        return page.equals(other.page) && referenceText.equals(other.referenceText) && polygon.equals(other.polygon);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.page, this.referenceText, this.polygon);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> page = Optional.empty();

        private Optional<String> referenceText = Optional.empty();

        private Optional<List<Polygon>> polygon = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Citation other) {
            page(other.getPage());
            referenceText(other.getReferenceText());
            polygon(other.getPolygon());
            return this;
        }

        /**
         * <p>Page number where the citation was found</p>
         */
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Double> page) {
            this.page = page;
            return this;
        }

        public Builder page(Double page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>The text that was referenced</p>
         */
        @JsonSetter(value = "referenceText", nulls = Nulls.SKIP)
        public Builder referenceText(Optional<String> referenceText) {
            this.referenceText = referenceText;
            return this;
        }

        public Builder referenceText(String referenceText) {
            this.referenceText = Optional.ofNullable(referenceText);
            return this;
        }

        /**
         * <p>Array of points defining the polygon</p>
         */
        @JsonSetter(value = "polygon", nulls = Nulls.SKIP)
        public Builder polygon(Optional<List<Polygon>> polygon) {
            this.polygon = polygon;
            return this;
        }

        public Builder polygon(List<Polygon> polygon) {
            this.polygon = Optional.ofNullable(polygon);
            return this;
        }

        public Citation build() {
            return new Citation(page, referenceText, polygon, additionalProperties);
        }
    }
}

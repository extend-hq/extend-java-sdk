/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WebhookEventWorkflowRun.Builder.class)
public final class WebhookEventWorkflowRun {
    private final Optional<WebhookEventWorkflowRunEventType> eventType;

    private final Optional<WorkflowRun> payload;

    private final String eventId;

    private final Map<String, Object> additionalProperties;

    private WebhookEventWorkflowRun(
            Optional<WebhookEventWorkflowRunEventType> eventType,
            Optional<WorkflowRun> payload,
            String eventId,
            Map<String, Object> additionalProperties) {
        this.eventType = eventType;
        this.payload = payload;
        this.eventId = eventId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("eventType")
    public Optional<WebhookEventWorkflowRunEventType> getEventType() {
        return eventType;
    }

    @JsonProperty("payload")
    public Optional<WorkflowRun> getPayload() {
        return payload;
    }

    /**
     * @return Unique identifier for the event
     */
    @JsonProperty("eventId")
    public String getEventId() {
        return eventId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WebhookEventWorkflowRun && equalTo((WebhookEventWorkflowRun) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WebhookEventWorkflowRun other) {
        return eventType.equals(other.eventType) && payload.equals(other.payload) && eventId.equals(other.eventId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventType, this.payload, this.eventId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventIdStage builder() {
        return new Builder();
    }

    public interface EventIdStage {
        /**
         * <p>Unique identifier for the event</p>
         */
        _FinalStage eventId(@NotNull String eventId);

        Builder from(WebhookEventWorkflowRun other);
    }

    public interface _FinalStage {
        WebhookEventWorkflowRun build();

        _FinalStage eventType(Optional<WebhookEventWorkflowRunEventType> eventType);

        _FinalStage eventType(WebhookEventWorkflowRunEventType eventType);

        _FinalStage payload(Optional<WorkflowRun> payload);

        _FinalStage payload(WorkflowRun payload);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EventIdStage, _FinalStage {
        private String eventId;

        private Optional<WorkflowRun> payload = Optional.empty();

        private Optional<WebhookEventWorkflowRunEventType> eventType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WebhookEventWorkflowRun other) {
            eventType(other.getEventType());
            payload(other.getPayload());
            eventId(other.getEventId());
            return this;
        }

        /**
         * <p>Unique identifier for the event</p>
         * <p>Unique identifier for the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("eventId")
        public _FinalStage eventId(@NotNull String eventId) {
            this.eventId = Objects.requireNonNull(eventId, "eventId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage payload(WorkflowRun payload) {
            this.payload = Optional.ofNullable(payload);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payload", nulls = Nulls.SKIP)
        public _FinalStage payload(Optional<WorkflowRun> payload) {
            this.payload = payload;
            return this;
        }

        @java.lang.Override
        public _FinalStage eventType(WebhookEventWorkflowRunEventType eventType) {
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "eventType", nulls = Nulls.SKIP)
        public _FinalStage eventType(Optional<WebhookEventWorkflowRunEventType> eventType) {
            this.eventType = eventType;
            return this;
        }

        @java.lang.Override
        public WebhookEventWorkflowRun build() {
            return new WebhookEventWorkflowRun(eventType, payload, eventId, additionalProperties);
        }
    }
}

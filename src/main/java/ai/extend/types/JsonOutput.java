/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = JsonOutput.Builder.class)
public final class JsonOutput {
    private final Map<String, Object> value;

    private final Map<String, JsonOutputMetadataValue> metadata;

    private final Map<String, Object> additionalProperties;

    private JsonOutput(
            Map<String, Object> value,
            Map<String, JsonOutputMetadataValue> metadata,
            Map<String, Object> additionalProperties) {
        this.value = value;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The extracted values conforming to the schema defined in the processor config
     */
    @JsonProperty("value")
    public Map<String, Object> getValue() {
        return value;
    }

    /**
     * @return Metadata about the extracted fields
     */
    @JsonProperty("metadata")
    public Map<String, JsonOutputMetadataValue> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JsonOutput && equalTo((JsonOutput) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JsonOutput other) {
        return value.equals(other.value) && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.value, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, Object> value = new LinkedHashMap<>();

        private Map<String, JsonOutputMetadataValue> metadata = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(JsonOutput other) {
            value(other.getValue());
            metadata(other.getMetadata());
            return this;
        }

        /**
         * <p>The extracted values conforming to the schema defined in the processor config</p>
         */
        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Map<String, Object> value) {
            this.value.clear();
            this.value.putAll(value);
            return this;
        }

        public Builder putAllValue(Map<String, Object> value) {
            this.value.putAll(value);
            return this;
        }

        public Builder value(String key, Object value) {
            this.value.put(key, value);
            return this;
        }

        /**
         * <p>Metadata about the extracted fields</p>
         */
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Map<String, JsonOutputMetadataValue> metadata) {
            this.metadata.clear();
            this.metadata.putAll(metadata);
            return this;
        }

        public Builder putAllMetadata(Map<String, JsonOutputMetadataValue> metadata) {
            this.metadata.putAll(metadata);
            return this;
        }

        public Builder metadata(String key, JsonOutputMetadataValue value) {
            this.metadata.put(key, value);
            return this;
        }

        public JsonOutput build() {
            return new JsonOutput(value, metadata, additionalProperties);
        }
    }
}

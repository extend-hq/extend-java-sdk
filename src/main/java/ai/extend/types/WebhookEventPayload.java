/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import java.io.IOException;
import java.util.Objects;

@JsonDeserialize(using = WebhookEventPayload.Deserializer.class)
public final class WebhookEventPayload {
    private final Object value;

    private final int type;

    private WebhookEventPayload(Object value, int type) {
        this.value = value;
        this.type = type;
    }

    @JsonValue
    public Object get() {
        return this.value;
    }

    @SuppressWarnings("unchecked")
    public <T> T visit(Visitor<T> visitor) {
        if (this.type == 0) {
            return visitor.visit((WorkflowRun) this.value);
        } else if (this.type == 1) {
            return visitor.visit((ProcessorRun) this.value);
        } else if (this.type == 2) {
            return visitor.visit((Workflow) this.value);
        } else if (this.type == 3) {
            return visitor.visit((Processor) this.value);
        } else if (this.type == 4) {
            return visitor.visit((ProcessorVersion) this.value);
        } else if (this.type == 5) {
            return visitor.visit((ParserRunStatus) this.value);
        }
        throw new IllegalStateException("Failed to visit value. This should never happen.");
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WebhookEventPayload && equalTo((WebhookEventPayload) other);
    }

    private boolean equalTo(WebhookEventPayload other) {
        return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
        return this.value.toString();
    }

    public static WebhookEventPayload of(WorkflowRun value) {
        return new WebhookEventPayload(value, 0);
    }

    public static WebhookEventPayload of(ProcessorRun value) {
        return new WebhookEventPayload(value, 1);
    }

    public static WebhookEventPayload of(Workflow value) {
        return new WebhookEventPayload(value, 2);
    }

    public static WebhookEventPayload of(Processor value) {
        return new WebhookEventPayload(value, 3);
    }

    public static WebhookEventPayload of(ProcessorVersion value) {
        return new WebhookEventPayload(value, 4);
    }

    public static WebhookEventPayload of(ParserRunStatus value) {
        return new WebhookEventPayload(value, 5);
    }

    public interface Visitor<T> {
        T visit(WorkflowRun value);

        T visit(ProcessorRun value);

        T visit(Workflow value);

        T visit(Processor value);

        T visit(ProcessorVersion value);

        T visit(ParserRunStatus value);
    }

    static final class Deserializer extends StdDeserializer<WebhookEventPayload> {
        Deserializer() {
            super(WebhookEventPayload.class);
        }

        @java.lang.Override
        public WebhookEventPayload deserialize(JsonParser p, DeserializationContext context) throws IOException {
            Object value = p.readValueAs(Object.class);
            try {
                return of(ObjectMappers.JSON_MAPPER.convertValue(value, WorkflowRun.class));
            } catch (RuntimeException e) {
            }
            try {
                return of(ObjectMappers.JSON_MAPPER.convertValue(value, ProcessorRun.class));
            } catch (RuntimeException e) {
            }
            try {
                return of(ObjectMappers.JSON_MAPPER.convertValue(value, Workflow.class));
            } catch (RuntimeException e) {
            }
            try {
                return of(ObjectMappers.JSON_MAPPER.convertValue(value, Processor.class));
            } catch (RuntimeException e) {
            }
            try {
                return of(ObjectMappers.JSON_MAPPER.convertValue(value, ProcessorVersion.class));
            } catch (RuntimeException e) {
            }
            try {
                return of(ObjectMappers.JSON_MAPPER.convertValue(value, ParserRunStatus.class));
            } catch (RuntimeException e) {
            }
            throw new JsonParseException(p, "Failed to deserialize");
        }
    }
}

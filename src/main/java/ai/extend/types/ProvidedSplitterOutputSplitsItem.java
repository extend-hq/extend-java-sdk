/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProvidedSplitterOutputSplitsItem.Builder.class)
public final class ProvidedSplitterOutputSplitsItem {
    private final String id;

    private final String classificationId;

    private final String type;

    private final Optional<String> observation;

    private final Optional<String> identifier;

    private final int startPage;

    private final int endPage;

    private final Map<String, Object> additionalProperties;

    private ProvidedSplitterOutputSplitsItem(
            String id,
            String classificationId,
            String type,
            Optional<String> observation,
            Optional<String> identifier,
            int startPage,
            int endPage,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.classificationId = classificationId;
        this.type = type;
        this.observation = observation;
        this.identifier = identifier;
        this.startPage = startPage;
        this.endPage = endPage;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique ID for this split
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return ID of the classification type (set in the processor config)
     */
    @JsonProperty("classificationId")
    public String getClassificationId() {
        return classificationId;
    }

    /**
     * @return The type of the split document (set in the processor config), corresponds to the classificationId
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return Explanation of the results
     */
    @JsonProperty("observation")
    public Optional<String> getObservation() {
        return observation;
    }

    /**
     * @return Identifier for the split document (e.g. invoice number)
     */
    @JsonProperty("identifier")
    public Optional<String> getIdentifier() {
        return identifier;
    }

    /**
     * @return The start page of the split document
     */
    @JsonProperty("startPage")
    public int getStartPage() {
        return startPage;
    }

    /**
     * @return The end page of the split document
     */
    @JsonProperty("endPage")
    public int getEndPage() {
        return endPage;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProvidedSplitterOutputSplitsItem && equalTo((ProvidedSplitterOutputSplitsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProvidedSplitterOutputSplitsItem other) {
        return id.equals(other.id)
                && classificationId.equals(other.classificationId)
                && type.equals(other.type)
                && observation.equals(other.observation)
                && identifier.equals(other.identifier)
                && startPage == other.startPage
                && endPage == other.endPage;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.classificationId,
                this.type,
                this.observation,
                this.identifier,
                this.startPage,
                this.endPage);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>Unique ID for this split</p>
         */
        ClassificationIdStage id(@NotNull String id);

        Builder from(ProvidedSplitterOutputSplitsItem other);
    }

    public interface ClassificationIdStage {
        /**
         * <p>ID of the classification type (set in the processor config)</p>
         */
        TypeStage classificationId(@NotNull String classificationId);
    }

    public interface TypeStage {
        /**
         * <p>The type of the split document (set in the processor config), corresponds to the classificationId</p>
         */
        StartPageStage type(@NotNull String type);
    }

    public interface StartPageStage {
        /**
         * <p>The start page of the split document</p>
         */
        EndPageStage startPage(int startPage);
    }

    public interface EndPageStage {
        /**
         * <p>The end page of the split document</p>
         */
        _FinalStage endPage(int endPage);
    }

    public interface _FinalStage {
        ProvidedSplitterOutputSplitsItem build();

        /**
         * <p>Explanation of the results</p>
         */
        _FinalStage observation(Optional<String> observation);

        _FinalStage observation(String observation);

        /**
         * <p>Identifier for the split document (e.g. invoice number)</p>
         */
        _FinalStage identifier(Optional<String> identifier);

        _FinalStage identifier(String identifier);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, ClassificationIdStage, TypeStage, StartPageStage, EndPageStage, _FinalStage {
        private String id;

        private String classificationId;

        private String type;

        private int startPage;

        private int endPage;

        private Optional<String> identifier = Optional.empty();

        private Optional<String> observation = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProvidedSplitterOutputSplitsItem other) {
            id(other.getId());
            classificationId(other.getClassificationId());
            type(other.getType());
            observation(other.getObservation());
            identifier(other.getIdentifier());
            startPage(other.getStartPage());
            endPage(other.getEndPage());
            return this;
        }

        /**
         * <p>Unique ID for this split</p>
         * <p>Unique ID for this split</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public ClassificationIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>ID of the classification type (set in the processor config)</p>
         * <p>ID of the classification type (set in the processor config)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("classificationId")
        public TypeStage classificationId(@NotNull String classificationId) {
            this.classificationId = Objects.requireNonNull(classificationId, "classificationId must not be null");
            return this;
        }

        /**
         * <p>The type of the split document (set in the processor config), corresponds to the classificationId</p>
         * <p>The type of the split document (set in the processor config), corresponds to the classificationId</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public StartPageStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The start page of the split document</p>
         * <p>The start page of the split document</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("startPage")
        public EndPageStage startPage(int startPage) {
            this.startPage = startPage;
            return this;
        }

        /**
         * <p>The end page of the split document</p>
         * <p>The end page of the split document</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("endPage")
        public _FinalStage endPage(int endPage) {
            this.endPage = endPage;
            return this;
        }

        /**
         * <p>Identifier for the split document (e.g. invoice number)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage identifier(String identifier) {
            this.identifier = Optional.ofNullable(identifier);
            return this;
        }

        /**
         * <p>Identifier for the split document (e.g. invoice number)</p>
         */
        @java.lang.Override
        @JsonSetter(value = "identifier", nulls = Nulls.SKIP)
        public _FinalStage identifier(Optional<String> identifier) {
            this.identifier = identifier;
            return this;
        }

        /**
         * <p>Explanation of the results</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage observation(String observation) {
            this.observation = Optional.ofNullable(observation);
            return this;
        }

        /**
         * <p>Explanation of the results</p>
         */
        @java.lang.Override
        @JsonSetter(value = "observation", nulls = Nulls.SKIP)
        public _FinalStage observation(Optional<String> observation) {
            this.observation = observation;
            return this;
        }

        @java.lang.Override
        public ProvidedSplitterOutputSplitsItem build() {
            return new ProvidedSplitterOutputSplitsItem(
                    id, classificationId, type, observation, identifier, startPage, endPage, additionalProperties);
        }
    }
}

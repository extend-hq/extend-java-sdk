/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClassificationFieldMetrics.Builder.class)
public final class ClassificationFieldMetrics {
    private final String name;

    private final double accuracy;

    private final Map<String, Object> additionalProperties;

    private ClassificationFieldMetrics(String name, double accuracy, Map<String, Object> additionalProperties) {
        this.name = name;
        this.accuracy = accuracy;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Name of the classification category
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return Accuracy for this specific classification
     */
    @JsonProperty("accuracy")
    public double getAccuracy() {
        return accuracy;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClassificationFieldMetrics && equalTo((ClassificationFieldMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClassificationFieldMetrics other) {
        return name.equals(other.name) && accuracy == other.accuracy;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.accuracy);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>Name of the classification category</p>
         */
        AccuracyStage name(@NotNull String name);

        Builder from(ClassificationFieldMetrics other);
    }

    public interface AccuracyStage {
        /**
         * <p>Accuracy for this specific classification</p>
         */
        _FinalStage accuracy(double accuracy);
    }

    public interface _FinalStage {
        ClassificationFieldMetrics build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, AccuracyStage, _FinalStage {
        private String name;

        private double accuracy;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClassificationFieldMetrics other) {
            name(other.getName());
            accuracy(other.getAccuracy());
            return this;
        }

        /**
         * <p>Name of the classification category</p>
         * <p>Name of the classification category</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public AccuracyStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>Accuracy for this specific classification</p>
         * <p>Accuracy for this specific classification</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("accuracy")
        public _FinalStage accuracy(double accuracy) {
            this.accuracy = accuracy;
            return this;
        }

        @java.lang.Override
        public ClassificationFieldMetrics build() {
            return new ClassificationFieldMetrics(name, accuracy, additionalProperties);
        }
    }
}

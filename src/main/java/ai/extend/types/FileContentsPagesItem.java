/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FileContentsPagesItem.Builder.class)
public final class FileContentsPagesItem {
    private final int pageNumber;

    private final Optional<Double> pageHeight;

    private final Optional<Double> pageWidth;

    private final Optional<String> rawText;

    private final Optional<String> markdown;

    private final Optional<String> html;

    private final Map<String, Object> additionalProperties;

    private FileContentsPagesItem(
            int pageNumber,
            Optional<Double> pageHeight,
            Optional<Double> pageWidth,
            Optional<String> rawText,
            Optional<String> markdown,
            Optional<String> html,
            Map<String, Object> additionalProperties) {
        this.pageNumber = pageNumber;
        this.pageHeight = pageHeight;
        this.pageWidth = pageWidth;
        this.rawText = rawText;
        this.markdown = markdown;
        this.html = html;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The page number of this page in the document.
     */
    @JsonProperty("pageNumber")
    public int getPageNumber() {
        return pageNumber;
    }

    @JsonProperty("pageHeight")
    public Optional<Double> getPageHeight() {
        return pageHeight;
    }

    @JsonProperty("pageWidth")
    public Optional<Double> getPageWidth() {
        return pageWidth;
    }

    /**
     * @return The raw text content extracted from this page.
     */
    @JsonProperty("rawText")
    public Optional<String> getRawText() {
        return rawText;
    }

    /**
     * @return Cleaned and structured markdown content of this page.
     */
    @JsonProperty("markdown")
    public Optional<String> getMarkdown() {
        return markdown;
    }

    /**
     * @return Cleaned and structured html content of the page. Available for DOCX file types (that were not auto-converted to PDFs). Only included if the <code>html</code> query parameter is set to true in the endpoint request.
     */
    @JsonProperty("html")
    public Optional<String> getHtml() {
        return html;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FileContentsPagesItem && equalTo((FileContentsPagesItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FileContentsPagesItem other) {
        return pageNumber == other.pageNumber
                && pageHeight.equals(other.pageHeight)
                && pageWidth.equals(other.pageWidth)
                && rawText.equals(other.rawText)
                && markdown.equals(other.markdown)
                && html.equals(other.html);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pageNumber, this.pageHeight, this.pageWidth, this.rawText, this.markdown, this.html);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PageNumberStage builder() {
        return new Builder();
    }

    public interface PageNumberStage {
        /**
         * <p>The page number of this page in the document.</p>
         */
        _FinalStage pageNumber(int pageNumber);

        Builder from(FileContentsPagesItem other);
    }

    public interface _FinalStage {
        FileContentsPagesItem build();

        _FinalStage pageHeight(Optional<Double> pageHeight);

        _FinalStage pageHeight(Double pageHeight);

        _FinalStage pageWidth(Optional<Double> pageWidth);

        _FinalStage pageWidth(Double pageWidth);

        /**
         * <p>The raw text content extracted from this page.</p>
         */
        _FinalStage rawText(Optional<String> rawText);

        _FinalStage rawText(String rawText);

        /**
         * <p>Cleaned and structured markdown content of this page.</p>
         */
        _FinalStage markdown(Optional<String> markdown);

        _FinalStage markdown(String markdown);

        /**
         * <p>Cleaned and structured html content of the page. Available for DOCX file types (that were not auto-converted to PDFs). Only included if the <code>html</code> query parameter is set to true in the endpoint request.</p>
         */
        _FinalStage html(Optional<String> html);

        _FinalStage html(String html);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PageNumberStage, _FinalStage {
        private int pageNumber;

        private Optional<String> html = Optional.empty();

        private Optional<String> markdown = Optional.empty();

        private Optional<String> rawText = Optional.empty();

        private Optional<Double> pageWidth = Optional.empty();

        private Optional<Double> pageHeight = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FileContentsPagesItem other) {
            pageNumber(other.getPageNumber());
            pageHeight(other.getPageHeight());
            pageWidth(other.getPageWidth());
            rawText(other.getRawText());
            markdown(other.getMarkdown());
            html(other.getHtml());
            return this;
        }

        /**
         * <p>The page number of this page in the document.</p>
         * <p>The page number of this page in the document.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("pageNumber")
        public _FinalStage pageNumber(int pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * <p>Cleaned and structured html content of the page. Available for DOCX file types (that were not auto-converted to PDFs). Only included if the <code>html</code> query parameter is set to true in the endpoint request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage html(String html) {
            this.html = Optional.ofNullable(html);
            return this;
        }

        /**
         * <p>Cleaned and structured html content of the page. Available for DOCX file types (that were not auto-converted to PDFs). Only included if the <code>html</code> query parameter is set to true in the endpoint request.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "html", nulls = Nulls.SKIP)
        public _FinalStage html(Optional<String> html) {
            this.html = html;
            return this;
        }

        /**
         * <p>Cleaned and structured markdown content of this page.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage markdown(String markdown) {
            this.markdown = Optional.ofNullable(markdown);
            return this;
        }

        /**
         * <p>Cleaned and structured markdown content of this page.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "markdown", nulls = Nulls.SKIP)
        public _FinalStage markdown(Optional<String> markdown) {
            this.markdown = markdown;
            return this;
        }

        /**
         * <p>The raw text content extracted from this page.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage rawText(String rawText) {
            this.rawText = Optional.ofNullable(rawText);
            return this;
        }

        /**
         * <p>The raw text content extracted from this page.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "rawText", nulls = Nulls.SKIP)
        public _FinalStage rawText(Optional<String> rawText) {
            this.rawText = rawText;
            return this;
        }

        @java.lang.Override
        public _FinalStage pageWidth(Double pageWidth) {
            this.pageWidth = Optional.ofNullable(pageWidth);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pageWidth", nulls = Nulls.SKIP)
        public _FinalStage pageWidth(Optional<Double> pageWidth) {
            this.pageWidth = pageWidth;
            return this;
        }

        @java.lang.Override
        public _FinalStage pageHeight(Double pageHeight) {
            this.pageHeight = Optional.ofNullable(pageHeight);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pageHeight", nulls = Nulls.SKIP)
        public _FinalStage pageHeight(Optional<Double> pageHeight) {
            this.pageHeight = pageHeight;
            return this;
        }

        @java.lang.Override
        public FileContentsPagesItem build() {
            return new FileContentsPagesItem(
                    pageNumber, pageHeight, pageWidth, rawText, markdown, html, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExtractionConfig.Builder.class)
public final class ExtractionConfig {
    private final Optional<ExtractionConfigBaseProcessor> baseProcessor;

    private final Optional<String> baseVersion;

    private final Optional<String> extractionRules;

    private final Optional<Map<String, Object>> schema;

    private final Optional<List<ExtractionField>> fields;

    private final Optional<ExtractionAdvancedOptions> advancedOptions;

    private final Optional<ParseConfig> parser;

    private final Map<String, Object> additionalProperties;

    private ExtractionConfig(
            Optional<ExtractionConfigBaseProcessor> baseProcessor,
            Optional<String> baseVersion,
            Optional<String> extractionRules,
            Optional<Map<String, Object>> schema,
            Optional<List<ExtractionField>> fields,
            Optional<ExtractionAdvancedOptions> advancedOptions,
            Optional<ParseConfig> parser,
            Map<String, Object> additionalProperties) {
        this.baseProcessor = baseProcessor;
        this.baseVersion = baseVersion;
        this.extractionRules = extractionRules;
        this.schema = schema;
        this.fields = fields;
        this.advancedOptions = advancedOptions;
        this.parser = parser;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The base processor to use. For extractors, this must be either <code>&quot;extraction_performance&quot;</code> or <code>&quot;extraction_light&quot;</code>. See <a href="/changelog/extraction/extraction-performance">Extraction Changelog</a> for more details.
     */
    @JsonProperty("baseProcessor")
    public Optional<ExtractionConfigBaseProcessor> getBaseProcessor() {
        return baseProcessor;
    }

    /**
     * @return The version of the <code>&quot;extraction_performance&quot;</code> or <code>&quot;extraction_light&quot;</code> processor to use. If this is provided, the <code>baseProcessor</code> must also be provided. See <a href="/changelog/extraction/extraction-performance">Extraction Changelog</a> for more details.
     */
    @JsonProperty("baseVersion")
    public Optional<String> getBaseVersion() {
        return baseVersion;
    }

    /**
     * @return Custom rules to guide the extraction process in natural language.
     */
    @JsonProperty("extractionRules")
    public Optional<String> getExtractionRules() {
        return extractionRules;
    }

    /**
     * @return JSON Schema definition of the data to extract. Either <code>fields</code> or <code>schema</code> must be provided.
     * <p>See the <a href="/product/extraction/schema/json-schema">JSON Schema guide</a> for details and examples of schema configuration.</p>
     */
    @JsonProperty("schema")
    public Optional<Map<String, Object>> getSchema() {
        return schema;
    }

    /**
     * @return Array of fields to extract from the document. Either <code>fields</code> or <code>schema</code> must be provided.
     * <p>We recommend using <code>schema</code> for new implementations.</p>
     */
    @JsonProperty("fields")
    public Optional<List<ExtractionField>> getFields() {
        return fields;
    }

    /**
     * @return Advanced configuration options.
     */
    @JsonProperty("advancedOptions")
    public Optional<ExtractionAdvancedOptions> getAdvancedOptions() {
        return advancedOptions;
    }

    /**
     * @return Configuration options for the parsing process.
     */
    @JsonProperty("parser")
    public Optional<ParseConfig> getParser() {
        return parser;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExtractionConfig && equalTo((ExtractionConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExtractionConfig other) {
        return baseProcessor.equals(other.baseProcessor)
                && baseVersion.equals(other.baseVersion)
                && extractionRules.equals(other.extractionRules)
                && schema.equals(other.schema)
                && fields.equals(other.fields)
                && advancedOptions.equals(other.advancedOptions)
                && parser.equals(other.parser);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.baseProcessor,
                this.baseVersion,
                this.extractionRules,
                this.schema,
                this.fields,
                this.advancedOptions,
                this.parser);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ExtractionConfigBaseProcessor> baseProcessor = Optional.empty();

        private Optional<String> baseVersion = Optional.empty();

        private Optional<String> extractionRules = Optional.empty();

        private Optional<Map<String, Object>> schema = Optional.empty();

        private Optional<List<ExtractionField>> fields = Optional.empty();

        private Optional<ExtractionAdvancedOptions> advancedOptions = Optional.empty();

        private Optional<ParseConfig> parser = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExtractionConfig other) {
            baseProcessor(other.getBaseProcessor());
            baseVersion(other.getBaseVersion());
            extractionRules(other.getExtractionRules());
            schema(other.getSchema());
            fields(other.getFields());
            advancedOptions(other.getAdvancedOptions());
            parser(other.getParser());
            return this;
        }

        /**
         * <p>The base processor to use. For extractors, this must be either <code>&quot;extraction_performance&quot;</code> or <code>&quot;extraction_light&quot;</code>. See <a href="/changelog/extraction/extraction-performance">Extraction Changelog</a> for more details.</p>
         */
        @JsonSetter(value = "baseProcessor", nulls = Nulls.SKIP)
        public Builder baseProcessor(Optional<ExtractionConfigBaseProcessor> baseProcessor) {
            this.baseProcessor = baseProcessor;
            return this;
        }

        public Builder baseProcessor(ExtractionConfigBaseProcessor baseProcessor) {
            this.baseProcessor = Optional.ofNullable(baseProcessor);
            return this;
        }

        /**
         * <p>The version of the <code>&quot;extraction_performance&quot;</code> or <code>&quot;extraction_light&quot;</code> processor to use. If this is provided, the <code>baseProcessor</code> must also be provided. See <a href="/changelog/extraction/extraction-performance">Extraction Changelog</a> for more details.</p>
         */
        @JsonSetter(value = "baseVersion", nulls = Nulls.SKIP)
        public Builder baseVersion(Optional<String> baseVersion) {
            this.baseVersion = baseVersion;
            return this;
        }

        public Builder baseVersion(String baseVersion) {
            this.baseVersion = Optional.ofNullable(baseVersion);
            return this;
        }

        /**
         * <p>Custom rules to guide the extraction process in natural language.</p>
         */
        @JsonSetter(value = "extractionRules", nulls = Nulls.SKIP)
        public Builder extractionRules(Optional<String> extractionRules) {
            this.extractionRules = extractionRules;
            return this;
        }

        public Builder extractionRules(String extractionRules) {
            this.extractionRules = Optional.ofNullable(extractionRules);
            return this;
        }

        /**
         * <p>JSON Schema definition of the data to extract. Either <code>fields</code> or <code>schema</code> must be provided.</p>
         * <p>See the <a href="/product/extraction/schema/json-schema">JSON Schema guide</a> for details and examples of schema configuration.</p>
         */
        @JsonSetter(value = "schema", nulls = Nulls.SKIP)
        public Builder schema(Optional<Map<String, Object>> schema) {
            this.schema = schema;
            return this;
        }

        public Builder schema(Map<String, Object> schema) {
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        /**
         * <p>Array of fields to extract from the document. Either <code>fields</code> or <code>schema</code> must be provided.</p>
         * <p>We recommend using <code>schema</code> for new implementations.</p>
         */
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public Builder fields(Optional<List<ExtractionField>> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(List<ExtractionField> fields) {
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * <p>Advanced configuration options.</p>
         */
        @JsonSetter(value = "advancedOptions", nulls = Nulls.SKIP)
        public Builder advancedOptions(Optional<ExtractionAdvancedOptions> advancedOptions) {
            this.advancedOptions = advancedOptions;
            return this;
        }

        public Builder advancedOptions(ExtractionAdvancedOptions advancedOptions) {
            this.advancedOptions = Optional.ofNullable(advancedOptions);
            return this;
        }

        /**
         * <p>Configuration options for the parsing process.</p>
         */
        @JsonSetter(value = "parser", nulls = Nulls.SKIP)
        public Builder parser(Optional<ParseConfig> parser) {
            this.parser = parser;
            return this;
        }

        public Builder parser(ParseConfig parser) {
            this.parser = Optional.ofNullable(parser);
            return this;
        }

        public ExtractionConfig build() {
            return new ExtractionConfig(
                    baseProcessor,
                    baseVersion,
                    extractionRules,
                    schema,
                    fields,
                    advancedOptions,
                    parser,
                    additionalProperties);
        }
    }
}

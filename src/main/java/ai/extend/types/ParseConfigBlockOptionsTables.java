/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParseConfigBlockOptionsTables.Builder.class)
public final class ParseConfigBlockOptionsTables {
    private final Optional<Boolean> enabled;

    private final Optional<ParseConfigBlockOptionsTablesTargetFormat> targetFormat;

    private final Map<String, Object> additionalProperties;

    private ParseConfigBlockOptionsTables(
            Optional<Boolean> enabled,
            Optional<ParseConfigBlockOptionsTablesTargetFormat> targetFormat,
            Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.targetFormat = targetFormat;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether to include tables in the output.
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return The target format for the table blocks. Supported values:
     * <ul>
     * <li><code>markdown</code>: Convert table to Markdown format</li>
     * <li><code>html</code>: Convert table to HTML format</li>
     * </ul>
     */
    @JsonProperty("targetFormat")
    public Optional<ParseConfigBlockOptionsTablesTargetFormat> getTargetFormat() {
        return targetFormat;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParseConfigBlockOptionsTables && equalTo((ParseConfigBlockOptionsTables) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParseConfigBlockOptionsTables other) {
        return enabled.equals(other.enabled) && targetFormat.equals(other.targetFormat);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.enabled, this.targetFormat);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enabled = Optional.empty();

        private Optional<ParseConfigBlockOptionsTablesTargetFormat> targetFormat = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ParseConfigBlockOptionsTables other) {
            enabled(other.getEnabled());
            targetFormat(other.getTargetFormat());
            return this;
        }

        /**
         * <p>Whether to include tables in the output.</p>
         */
        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>The target format for the table blocks. Supported values:</p>
         * <ul>
         * <li><code>markdown</code>: Convert table to Markdown format</li>
         * <li><code>html</code>: Convert table to HTML format</li>
         * </ul>
         */
        @JsonSetter(value = "targetFormat", nulls = Nulls.SKIP)
        public Builder targetFormat(Optional<ParseConfigBlockOptionsTablesTargetFormat> targetFormat) {
            this.targetFormat = targetFormat;
            return this;
        }

        public Builder targetFormat(ParseConfigBlockOptionsTablesTargetFormat targetFormat) {
            this.targetFormat = Optional.ofNullable(targetFormat);
            return this;
        }

        public ParseConfigBlockOptionsTables build() {
            return new ParseConfigBlockOptionsTables(enabled, targetFormat, additionalProperties);
        }
    }
}

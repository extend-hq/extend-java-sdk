/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessorRunFileInput.Builder.class)
public final class ProcessorRunFileInput {
    private final Optional<String> fileName;

    private final Optional<String> fileUrl;

    private final Optional<String> fileId;

    private final Map<String, Object> additionalProperties;

    private ProcessorRunFileInput(
            Optional<String> fileName,
            Optional<String> fileUrl,
            Optional<String> fileId,
            Map<String, Object> additionalProperties) {
        this.fileName = fileName;
        this.fileUrl = fileUrl;
        this.fileId = fileId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the file to be processed. If not provided, the file name will be inferred from the URL. It is highly recommended to include this parameter for legibility.
     */
    @JsonProperty("fileName")
    public Optional<String> getFileName() {
        return fileName;
    }

    /**
     * @return A URL where the file can be downloaded from. If you use presigned URLs, we recommend an expiration time of 5-15 minutes. One of a <code>fileUrl</code> or <code>fileId</code> must be provided.
     */
    @JsonProperty("fileUrl")
    public Optional<String> getFileUrl() {
        return fileUrl;
    }

    /**
     * @return Extend's internal ID for the file. It will always start with <code>file_</code>. One of a <code>fileUrl</code> or <code>fileId</code> must be provided. You can view a file ID from the Extend UI, for instance from running a parser or from a previous file creation. If you provide a <code>fileId</code>, any parsed data will be reused.
     */
    @JsonProperty("fileId")
    public Optional<String> getFileId() {
        return fileId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessorRunFileInput && equalTo((ProcessorRunFileInput) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessorRunFileInput other) {
        return fileName.equals(other.fileName) && fileUrl.equals(other.fileUrl) && fileId.equals(other.fileId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fileName, this.fileUrl, this.fileId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> fileName = Optional.empty();

        private Optional<String> fileUrl = Optional.empty();

        private Optional<String> fileId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProcessorRunFileInput other) {
            fileName(other.getFileName());
            fileUrl(other.getFileUrl());
            fileId(other.getFileId());
            return this;
        }

        /**
         * <p>The name of the file to be processed. If not provided, the file name will be inferred from the URL. It is highly recommended to include this parameter for legibility.</p>
         */
        @JsonSetter(value = "fileName", nulls = Nulls.SKIP)
        public Builder fileName(Optional<String> fileName) {
            this.fileName = fileName;
            return this;
        }

        public Builder fileName(String fileName) {
            this.fileName = Optional.ofNullable(fileName);
            return this;
        }

        /**
         * <p>A URL where the file can be downloaded from. If you use presigned URLs, we recommend an expiration time of 5-15 minutes. One of a <code>fileUrl</code> or <code>fileId</code> must be provided.</p>
         */
        @JsonSetter(value = "fileUrl", nulls = Nulls.SKIP)
        public Builder fileUrl(Optional<String> fileUrl) {
            this.fileUrl = fileUrl;
            return this;
        }

        public Builder fileUrl(String fileUrl) {
            this.fileUrl = Optional.ofNullable(fileUrl);
            return this;
        }

        /**
         * <p>Extend's internal ID for the file. It will always start with <code>file_</code>. One of a <code>fileUrl</code> or <code>fileId</code> must be provided. You can view a file ID from the Extend UI, for instance from running a parser or from a previous file creation. If you provide a <code>fileId</code>, any parsed data will be reused.</p>
         */
        @JsonSetter(value = "fileId", nulls = Nulls.SKIP)
        public Builder fileId(Optional<String> fileId) {
            this.fileId = fileId;
            return this;
        }

        public Builder fileId(String fileId) {
            this.fileId = Optional.ofNullable(fileId);
            return this;
        }

        public ProcessorRunFileInput build() {
            return new ProcessorRunFileInput(fileName, fileUrl, fileId, additionalProperties);
        }
    }
}

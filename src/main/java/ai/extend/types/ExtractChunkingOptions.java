/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExtractChunkingOptions.Builder.class)
public final class ExtractChunkingOptions {
    private final Optional<ExtractChunkingOptionsChunkingStrategy> chunkingStrategy;

    private final Optional<Integer> pageChunkSize;

    private final Optional<ExtractChunkingOptionsChunkSelectionStrategy> chunkSelectionStrategy;

    private final Optional<String> customSemanticChunkingRules;

    private final Map<String, Object> additionalProperties;

    private ExtractChunkingOptions(
            Optional<ExtractChunkingOptionsChunkingStrategy> chunkingStrategy,
            Optional<Integer> pageChunkSize,
            Optional<ExtractChunkingOptionsChunkSelectionStrategy> chunkSelectionStrategy,
            Optional<String> customSemanticChunkingRules,
            Map<String, Object> additionalProperties) {
        this.chunkingStrategy = chunkingStrategy;
        this.pageChunkSize = pageChunkSize;
        this.chunkSelectionStrategy = chunkSelectionStrategy;
        this.customSemanticChunkingRules = customSemanticChunkingRules;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The strategy to use for chunking the document.
     */
    @JsonProperty("chunkingStrategy")
    public Optional<ExtractChunkingOptionsChunkingStrategy> getChunkingStrategy() {
        return chunkingStrategy;
    }

    /**
     * @return The size of page chunks.
     */
    @JsonProperty("pageChunkSize")
    public Optional<Integer> getPageChunkSize() {
        return pageChunkSize;
    }

    /**
     * @return The strategy to use for selecting chunks.
     */
    @JsonProperty("chunkSelectionStrategy")
    public Optional<ExtractChunkingOptionsChunkSelectionStrategy> getChunkSelectionStrategy() {
        return chunkSelectionStrategy;
    }

    /**
     * @return Custom rules for semantic chunking.
     */
    @JsonProperty("customSemanticChunkingRules")
    public Optional<String> getCustomSemanticChunkingRules() {
        return customSemanticChunkingRules;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExtractChunkingOptions && equalTo((ExtractChunkingOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExtractChunkingOptions other) {
        return chunkingStrategy.equals(other.chunkingStrategy)
                && pageChunkSize.equals(other.pageChunkSize)
                && chunkSelectionStrategy.equals(other.chunkSelectionStrategy)
                && customSemanticChunkingRules.equals(other.customSemanticChunkingRules);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.chunkingStrategy,
                this.pageChunkSize,
                this.chunkSelectionStrategy,
                this.customSemanticChunkingRules);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ExtractChunkingOptionsChunkingStrategy> chunkingStrategy = Optional.empty();

        private Optional<Integer> pageChunkSize = Optional.empty();

        private Optional<ExtractChunkingOptionsChunkSelectionStrategy> chunkSelectionStrategy = Optional.empty();

        private Optional<String> customSemanticChunkingRules = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExtractChunkingOptions other) {
            chunkingStrategy(other.getChunkingStrategy());
            pageChunkSize(other.getPageChunkSize());
            chunkSelectionStrategy(other.getChunkSelectionStrategy());
            customSemanticChunkingRules(other.getCustomSemanticChunkingRules());
            return this;
        }

        /**
         * <p>The strategy to use for chunking the document.</p>
         */
        @JsonSetter(value = "chunkingStrategy", nulls = Nulls.SKIP)
        public Builder chunkingStrategy(Optional<ExtractChunkingOptionsChunkingStrategy> chunkingStrategy) {
            this.chunkingStrategy = chunkingStrategy;
            return this;
        }

        public Builder chunkingStrategy(ExtractChunkingOptionsChunkingStrategy chunkingStrategy) {
            this.chunkingStrategy = Optional.ofNullable(chunkingStrategy);
            return this;
        }

        /**
         * <p>The size of page chunks.</p>
         */
        @JsonSetter(value = "pageChunkSize", nulls = Nulls.SKIP)
        public Builder pageChunkSize(Optional<Integer> pageChunkSize) {
            this.pageChunkSize = pageChunkSize;
            return this;
        }

        public Builder pageChunkSize(Integer pageChunkSize) {
            this.pageChunkSize = Optional.ofNullable(pageChunkSize);
            return this;
        }

        /**
         * <p>The strategy to use for selecting chunks.</p>
         */
        @JsonSetter(value = "chunkSelectionStrategy", nulls = Nulls.SKIP)
        public Builder chunkSelectionStrategy(
                Optional<ExtractChunkingOptionsChunkSelectionStrategy> chunkSelectionStrategy) {
            this.chunkSelectionStrategy = chunkSelectionStrategy;
            return this;
        }

        public Builder chunkSelectionStrategy(ExtractChunkingOptionsChunkSelectionStrategy chunkSelectionStrategy) {
            this.chunkSelectionStrategy = Optional.ofNullable(chunkSelectionStrategy);
            return this;
        }

        /**
         * <p>Custom rules for semantic chunking.</p>
         */
        @JsonSetter(value = "customSemanticChunkingRules", nulls = Nulls.SKIP)
        public Builder customSemanticChunkingRules(Optional<String> customSemanticChunkingRules) {
            this.customSemanticChunkingRules = customSemanticChunkingRules;
            return this;
        }

        public Builder customSemanticChunkingRules(String customSemanticChunkingRules) {
            this.customSemanticChunkingRules = Optional.ofNullable(customSemanticChunkingRules);
            return this;
        }

        public ExtractChunkingOptions build() {
            return new ExtractChunkingOptions(
                    chunkingStrategy,
                    pageChunkSize,
                    chunkSelectionStrategy,
                    customSemanticChunkingRules,
                    additionalProperties);
        }
    }
}

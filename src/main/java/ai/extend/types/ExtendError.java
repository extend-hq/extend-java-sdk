/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExtendError.Builder.class)
public final class ExtendError {
    private final String code;

    private final String message;

    private final String requestId;

    private final boolean retryable;

    private final Map<String, Object> additionalProperties;

    private ExtendError(
            String code,
            String message,
            String requestId,
            boolean retryable,
            Map<String, Object> additionalProperties) {
        this.code = code;
        this.message = message;
        this.requestId = requestId;
        this.retryable = retryable;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Error code identifying the type of error
     */
    @JsonProperty("code")
    public String getCode() {
        return code;
    }

    /**
     * @return Human-readable error message
     */
    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    /**
     * @return Unique request identifier for support purposes
     */
    @JsonProperty("requestId")
    public String getRequestId() {
        return requestId;
    }

    /**
     * @return Whether the request can be retried
     */
    @JsonProperty("retryable")
    public boolean getRetryable() {
        return retryable;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExtendError && equalTo((ExtendError) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExtendError other) {
        return code.equals(other.code)
                && message.equals(other.message)
                && requestId.equals(other.requestId)
                && retryable == other.retryable;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.code, this.message, this.requestId, this.retryable);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CodeStage builder() {
        return new Builder();
    }

    public interface CodeStage {
        /**
         * <p>Error code identifying the type of error</p>
         */
        MessageStage code(@NotNull String code);

        Builder from(ExtendError other);
    }

    public interface MessageStage {
        /**
         * <p>Human-readable error message</p>
         */
        RequestIdStage message(@NotNull String message);
    }

    public interface RequestIdStage {
        /**
         * <p>Unique request identifier for support purposes</p>
         */
        RetryableStage requestId(@NotNull String requestId);
    }

    public interface RetryableStage {
        /**
         * <p>Whether the request can be retried</p>
         */
        _FinalStage retryable(boolean retryable);
    }

    public interface _FinalStage {
        ExtendError build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CodeStage, MessageStage, RequestIdStage, RetryableStage, _FinalStage {
        private String code;

        private String message;

        private String requestId;

        private boolean retryable;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ExtendError other) {
            code(other.getCode());
            message(other.getMessage());
            requestId(other.getRequestId());
            retryable(other.getRetryable());
            return this;
        }

        /**
         * <p>Error code identifying the type of error</p>
         * <p>Error code identifying the type of error</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("code")
        public MessageStage code(@NotNull String code) {
            this.code = Objects.requireNonNull(code, "code must not be null");
            return this;
        }

        /**
         * <p>Human-readable error message</p>
         * <p>Human-readable error message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("message")
        public RequestIdStage message(@NotNull String message) {
            this.message = Objects.requireNonNull(message, "message must not be null");
            return this;
        }

        /**
         * <p>Unique request identifier for support purposes</p>
         * <p>Unique request identifier for support purposes</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("requestId")
        public RetryableStage requestId(@NotNull String requestId) {
            this.requestId = Objects.requireNonNull(requestId, "requestId must not be null");
            return this;
        }

        /**
         * <p>Whether the request can be retried</p>
         * <p>Whether the request can be retried</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("retryable")
        public _FinalStage retryable(boolean retryable) {
            this.retryable = retryable;
            return this;
        }

        @java.lang.Override
        public ExtendError build() {
            return new ExtendError(code, message, requestId, retryable, additionalProperties);
        }
    }
}

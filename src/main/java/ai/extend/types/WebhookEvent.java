/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WebhookEvent.Builder.class)
public final class WebhookEvent {
    private final String eventId;

    private final WebhookEventEventType eventType;

    private final WebhookEventPayload payload;

    private final Map<String, Object> additionalProperties;

    private WebhookEvent(
            String eventId,
            WebhookEventEventType eventType,
            WebhookEventPayload payload,
            Map<String, Object> additionalProperties) {
        this.eventId = eventId;
        this.eventType = eventType;
        this.payload = payload;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the event
     */
    @JsonProperty("eventId")
    public String getEventId() {
        return eventId;
    }

    /**
     * @return Type of the event that occurred
     */
    @JsonProperty("eventType")
    public WebhookEventEventType getEventType() {
        return eventType;
    }

    /**
     * @return Contains the relevant object for the event type
     */
    @JsonProperty("payload")
    public WebhookEventPayload getPayload() {
        return payload;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WebhookEvent && equalTo((WebhookEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WebhookEvent other) {
        return eventId.equals(other.eventId) && eventType.equals(other.eventType) && payload.equals(other.payload);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventId, this.eventType, this.payload);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventIdStage builder() {
        return new Builder();
    }

    public interface EventIdStage {
        /**
         * <p>Unique identifier for the event</p>
         */
        EventTypeStage eventId(@NotNull String eventId);

        Builder from(WebhookEvent other);
    }

    public interface EventTypeStage {
        /**
         * <p>Type of the event that occurred</p>
         */
        PayloadStage eventType(@NotNull WebhookEventEventType eventType);
    }

    public interface PayloadStage {
        /**
         * <p>Contains the relevant object for the event type</p>
         */
        _FinalStage payload(@NotNull WebhookEventPayload payload);
    }

    public interface _FinalStage {
        WebhookEvent build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EventIdStage, EventTypeStage, PayloadStage, _FinalStage {
        private String eventId;

        private WebhookEventEventType eventType;

        private WebhookEventPayload payload;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WebhookEvent other) {
            eventId(other.getEventId());
            eventType(other.getEventType());
            payload(other.getPayload());
            return this;
        }

        /**
         * <p>Unique identifier for the event</p>
         * <p>Unique identifier for the event</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("eventId")
        public EventTypeStage eventId(@NotNull String eventId) {
            this.eventId = Objects.requireNonNull(eventId, "eventId must not be null");
            return this;
        }

        /**
         * <p>Type of the event that occurred</p>
         * <p>Type of the event that occurred</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("eventType")
        public PayloadStage eventType(@NotNull WebhookEventEventType eventType) {
            this.eventType = Objects.requireNonNull(eventType, "eventType must not be null");
            return this;
        }

        /**
         * <p>Contains the relevant object for the event type</p>
         * <p>Contains the relevant object for the event type</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("payload")
        public _FinalStage payload(@NotNull WebhookEventPayload payload) {
            this.payload = Objects.requireNonNull(payload, "payload must not be null");
            return this;
        }

        @java.lang.Override
        public WebhookEvent build() {
            return new WebhookEvent(eventId, eventType, payload, additionalProperties);
        }
    }
}

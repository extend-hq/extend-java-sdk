/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExtractionField.Builder.class)
public final class ExtractionField {
    private final String id;

    private final String name;

    private final ExtractionFieldType type;

    private final String description;

    private final Optional<List<ExtractionField>> schema;

    private final Optional<List<Enum>> enum_;

    private final Map<String, Object> additionalProperties;

    private ExtractionField(
            String id,
            String name,
            ExtractionFieldType type,
            String description,
            Optional<List<ExtractionField>> schema,
            Optional<List<Enum>> enum_,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.description = description;
        this.schema = schema;
        this.enum_ = enum_;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the field.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return Human-readable name for the field.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The type of the field.
     */
    @JsonProperty("type")
    public ExtractionFieldType getType() {
        return type;
    }

    /**
     * @return Detailed description of the field, including expected content and format.
     */
    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    /**
     * @return Required when type is &quot;array&quot; or &quot;object&quot;. Contains nested field definitions.
     */
    @JsonProperty("schema")
    public Optional<List<ExtractionField>> getSchema() {
        return schema;
    }

    /**
     * @return Required when type is &quot;enum&quot;. List of allowed values.
     */
    @JsonProperty("enum")
    public Optional<List<Enum>> getEnum() {
        return enum_;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExtractionField && equalTo((ExtractionField) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExtractionField other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && type.equals(other.type)
                && description.equals(other.description)
                && schema.equals(other.schema)
                && enum_.equals(other.enum_);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.type, this.description, this.schema, this.enum_);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>Unique identifier for the field.</p>
         */
        NameStage id(@NotNull String id);

        Builder from(ExtractionField other);
    }

    public interface NameStage {
        /**
         * <p>Human-readable name for the field.</p>
         */
        TypeStage name(@NotNull String name);
    }

    public interface TypeStage {
        /**
         * <p>The type of the field.</p>
         */
        DescriptionStage type(@NotNull ExtractionFieldType type);
    }

    public interface DescriptionStage {
        /**
         * <p>Detailed description of the field, including expected content and format.</p>
         */
        _FinalStage description(@NotNull String description);
    }

    public interface _FinalStage {
        ExtractionField build();

        /**
         * <p>Required when type is &quot;array&quot; or &quot;object&quot;. Contains nested field definitions.</p>
         */
        _FinalStage schema(Optional<List<ExtractionField>> schema);

        _FinalStage schema(List<ExtractionField> schema);

        /**
         * <p>Required when type is &quot;enum&quot;. List of allowed values.</p>
         */
        _FinalStage enum_(Optional<List<Enum>> enum_);

        _FinalStage enum_(List<Enum> enum_);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, NameStage, TypeStage, DescriptionStage, _FinalStage {
        private String id;

        private String name;

        private ExtractionFieldType type;

        private String description;

        private Optional<List<Enum>> enum_ = Optional.empty();

        private Optional<List<ExtractionField>> schema = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ExtractionField other) {
            id(other.getId());
            name(other.getName());
            type(other.getType());
            description(other.getDescription());
            schema(other.getSchema());
            enum_(other.getEnum());
            return this;
        }

        /**
         * <p>Unique identifier for the field.</p>
         * <p>Unique identifier for the field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Human-readable name for the field.</p>
         * <p>Human-readable name for the field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public TypeStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The type of the field.</p>
         * <p>The type of the field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public DescriptionStage type(@NotNull ExtractionFieldType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>Detailed description of the field, including expected content and format.</p>
         * <p>Detailed description of the field, including expected content and format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("description")
        public _FinalStage description(@NotNull String description) {
            this.description = Objects.requireNonNull(description, "description must not be null");
            return this;
        }

        /**
         * <p>Required when type is &quot;enum&quot;. List of allowed values.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enum_(List<Enum> enum_) {
            this.enum_ = Optional.ofNullable(enum_);
            return this;
        }

        /**
         * <p>Required when type is &quot;enum&quot;. List of allowed values.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "enum", nulls = Nulls.SKIP)
        public _FinalStage enum_(Optional<List<Enum>> enum_) {
            this.enum_ = enum_;
            return this;
        }

        /**
         * <p>Required when type is &quot;array&quot; or &quot;object&quot;. Contains nested field definitions.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage schema(List<ExtractionField> schema) {
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        /**
         * <p>Required when type is &quot;array&quot; or &quot;object&quot;. Contains nested field definitions.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "schema", nulls = Nulls.SKIP)
        public _FinalStage schema(Optional<List<ExtractionField>> schema) {
            this.schema = schema;
            return this;
        }

        @java.lang.Override
        public ExtractionField build() {
            return new ExtractionField(id, name, type, description, schema, enum_, additionalProperties);
        }
    }
}

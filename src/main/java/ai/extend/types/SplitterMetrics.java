/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SplitterMetrics.Builder.class)
public final class SplitterMetrics implements IBaseMetrics {
    private final Optional<Double> numFiles;

    private final Optional<Double> numPages;

    private final Optional<Double> meanRunTimeMs;

    private final Optional<String> type;

    private final Optional<Double> precisionPerc;

    private final Optional<Double> recallPerc;

    private final Optional<Double> numExpectedDocs;

    private final Optional<Double> numPredictedDocs;

    private final Optional<Double> numCorrectDocs;

    private final Map<String, Object> additionalProperties;

    private SplitterMetrics(
            Optional<Double> numFiles,
            Optional<Double> numPages,
            Optional<Double> meanRunTimeMs,
            Optional<String> type,
            Optional<Double> precisionPerc,
            Optional<Double> recallPerc,
            Optional<Double> numExpectedDocs,
            Optional<Double> numPredictedDocs,
            Optional<Double> numCorrectDocs,
            Map<String, Object> additionalProperties) {
        this.numFiles = numFiles;
        this.numPages = numPages;
        this.meanRunTimeMs = meanRunTimeMs;
        this.type = type;
        this.precisionPerc = precisionPerc;
        this.recallPerc = recallPerc;
        this.numExpectedDocs = numExpectedDocs;
        this.numPredictedDocs = numPredictedDocs;
        this.numCorrectDocs = numCorrectDocs;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The total number of files that were processed.
     */
    @JsonProperty("numFiles")
    @java.lang.Override
    public Optional<Double> getNumFiles() {
        return numFiles;
    }

    /**
     * @return The total number of pages that were processed.
     */
    @JsonProperty("numPages")
    @java.lang.Override
    public Optional<Double> getNumPages() {
        return numPages;
    }

    /**
     * @return The mean runtime in milliseconds per document.
     */
    @JsonProperty("meanRunTimeMs")
    @java.lang.Override
    public Optional<Double> getMeanRunTimeMs() {
        return meanRunTimeMs;
    }

    /**
     * @return The type of metrics. Will always be <code>&quot;SPLITTER&quot;</code> for splitter processors.
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    /**
     * @return Number of predicted subdocuments that are in the expected set of subdocuments divided by total number of predicted subdocuments.
     */
    @JsonProperty("precisionPerc")
    public Optional<Double> getPrecisionPerc() {
        return precisionPerc;
    }

    /**
     * @return Number of expected subdocuments that are in the predicted set of subdocuments divided by total number of expected subdocuments.
     */
    @JsonProperty("recallPerc")
    public Optional<Double> getRecallPerc() {
        return recallPerc;
    }

    /**
     * @return The number of expected documents.
     */
    @JsonProperty("numExpectedDocs")
    public Optional<Double> getNumExpectedDocs() {
        return numExpectedDocs;
    }

    /**
     * @return The number of predicted documents.
     */
    @JsonProperty("numPredictedDocs")
    public Optional<Double> getNumPredictedDocs() {
        return numPredictedDocs;
    }

    /**
     * @return The number of correctly predicted documents.
     */
    @JsonProperty("numCorrectDocs")
    public Optional<Double> getNumCorrectDocs() {
        return numCorrectDocs;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SplitterMetrics && equalTo((SplitterMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SplitterMetrics other) {
        return numFiles.equals(other.numFiles)
                && numPages.equals(other.numPages)
                && meanRunTimeMs.equals(other.meanRunTimeMs)
                && type.equals(other.type)
                && precisionPerc.equals(other.precisionPerc)
                && recallPerc.equals(other.recallPerc)
                && numExpectedDocs.equals(other.numExpectedDocs)
                && numPredictedDocs.equals(other.numPredictedDocs)
                && numCorrectDocs.equals(other.numCorrectDocs);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.numFiles,
                this.numPages,
                this.meanRunTimeMs,
                this.type,
                this.precisionPerc,
                this.recallPerc,
                this.numExpectedDocs,
                this.numPredictedDocs,
                this.numCorrectDocs);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> numFiles = Optional.empty();

        private Optional<Double> numPages = Optional.empty();

        private Optional<Double> meanRunTimeMs = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<Double> precisionPerc = Optional.empty();

        private Optional<Double> recallPerc = Optional.empty();

        private Optional<Double> numExpectedDocs = Optional.empty();

        private Optional<Double> numPredictedDocs = Optional.empty();

        private Optional<Double> numCorrectDocs = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SplitterMetrics other) {
            numFiles(other.getNumFiles());
            numPages(other.getNumPages());
            meanRunTimeMs(other.getMeanRunTimeMs());
            type(other.getType());
            precisionPerc(other.getPrecisionPerc());
            recallPerc(other.getRecallPerc());
            numExpectedDocs(other.getNumExpectedDocs());
            numPredictedDocs(other.getNumPredictedDocs());
            numCorrectDocs(other.getNumCorrectDocs());
            return this;
        }

        /**
         * <p>The total number of files that were processed.</p>
         */
        @JsonSetter(value = "numFiles", nulls = Nulls.SKIP)
        public Builder numFiles(Optional<Double> numFiles) {
            this.numFiles = numFiles;
            return this;
        }

        public Builder numFiles(Double numFiles) {
            this.numFiles = Optional.ofNullable(numFiles);
            return this;
        }

        /**
         * <p>The total number of pages that were processed.</p>
         */
        @JsonSetter(value = "numPages", nulls = Nulls.SKIP)
        public Builder numPages(Optional<Double> numPages) {
            this.numPages = numPages;
            return this;
        }

        public Builder numPages(Double numPages) {
            this.numPages = Optional.ofNullable(numPages);
            return this;
        }

        /**
         * <p>The mean runtime in milliseconds per document.</p>
         */
        @JsonSetter(value = "meanRunTimeMs", nulls = Nulls.SKIP)
        public Builder meanRunTimeMs(Optional<Double> meanRunTimeMs) {
            this.meanRunTimeMs = meanRunTimeMs;
            return this;
        }

        public Builder meanRunTimeMs(Double meanRunTimeMs) {
            this.meanRunTimeMs = Optional.ofNullable(meanRunTimeMs);
            return this;
        }

        /**
         * <p>The type of metrics. Will always be <code>&quot;SPLITTER&quot;</code> for splitter processors.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>Number of predicted subdocuments that are in the expected set of subdocuments divided by total number of predicted subdocuments.</p>
         */
        @JsonSetter(value = "precisionPerc", nulls = Nulls.SKIP)
        public Builder precisionPerc(Optional<Double> precisionPerc) {
            this.precisionPerc = precisionPerc;
            return this;
        }

        public Builder precisionPerc(Double precisionPerc) {
            this.precisionPerc = Optional.ofNullable(precisionPerc);
            return this;
        }

        /**
         * <p>Number of expected subdocuments that are in the predicted set of subdocuments divided by total number of expected subdocuments.</p>
         */
        @JsonSetter(value = "recallPerc", nulls = Nulls.SKIP)
        public Builder recallPerc(Optional<Double> recallPerc) {
            this.recallPerc = recallPerc;
            return this;
        }

        public Builder recallPerc(Double recallPerc) {
            this.recallPerc = Optional.ofNullable(recallPerc);
            return this;
        }

        /**
         * <p>The number of expected documents.</p>
         */
        @JsonSetter(value = "numExpectedDocs", nulls = Nulls.SKIP)
        public Builder numExpectedDocs(Optional<Double> numExpectedDocs) {
            this.numExpectedDocs = numExpectedDocs;
            return this;
        }

        public Builder numExpectedDocs(Double numExpectedDocs) {
            this.numExpectedDocs = Optional.ofNullable(numExpectedDocs);
            return this;
        }

        /**
         * <p>The number of predicted documents.</p>
         */
        @JsonSetter(value = "numPredictedDocs", nulls = Nulls.SKIP)
        public Builder numPredictedDocs(Optional<Double> numPredictedDocs) {
            this.numPredictedDocs = numPredictedDocs;
            return this;
        }

        public Builder numPredictedDocs(Double numPredictedDocs) {
            this.numPredictedDocs = Optional.ofNullable(numPredictedDocs);
            return this;
        }

        /**
         * <p>The number of correctly predicted documents.</p>
         */
        @JsonSetter(value = "numCorrectDocs", nulls = Nulls.SKIP)
        public Builder numCorrectDocs(Optional<Double> numCorrectDocs) {
            this.numCorrectDocs = numCorrectDocs;
            return this;
        }

        public Builder numCorrectDocs(Double numCorrectDocs) {
            this.numCorrectDocs = Optional.ofNullable(numCorrectDocs);
            return this;
        }

        public SplitterMetrics build() {
            return new SplitterMetrics(
                    numFiles,
                    numPages,
                    meanRunTimeMs,
                    type,
                    precisionPerc,
                    recallPerc,
                    numExpectedDocs,
                    numPredictedDocs,
                    numCorrectDocs,
                    additionalProperties);
        }
    }
}

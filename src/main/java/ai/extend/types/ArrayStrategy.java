/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ArrayStrategy.Builder.class)
public final class ArrayStrategy {
    private final Map<String, Object> additionalProperties;

    private ArrayStrategy(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The strategy type for handling arrays.
     * <ul>
     * <li><code>large_array_heuristics</code>: Optimized for documents with very large arrays. Uses specialized heuristics around chunking, tables, and merging to handle large arrays efficiently over large documents.</li>
     * </ul>
     */
    @JsonProperty("type")
    public String getType() {
        return "large_array_heuristics";
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ArrayStrategy;
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ArrayStrategy other) {
            return this;
        }

        public ArrayStrategy build() {
            return new ArrayStrategy(additionalProperties);
        }
    }
}

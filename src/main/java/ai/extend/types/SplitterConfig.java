/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SplitterConfig.Builder.class)
public final class SplitterConfig {
    private final Optional<SplitterConfigBaseProcessor> baseProcessor;

    private final Optional<String> baseVersion;

    private final List<Classification> splitClassifications;

    private final Optional<String> splitRules;

    private final Optional<SplitterAdvancedOptions> advancedOptions;

    private final Optional<ParseConfig> parser;

    private final Map<String, Object> additionalProperties;

    private SplitterConfig(
            Optional<SplitterConfigBaseProcessor> baseProcessor,
            Optional<String> baseVersion,
            List<Classification> splitClassifications,
            Optional<String> splitRules,
            Optional<SplitterAdvancedOptions> advancedOptions,
            Optional<ParseConfig> parser,
            Map<String, Object> additionalProperties) {
        this.baseProcessor = baseProcessor;
        this.baseVersion = baseVersion;
        this.splitClassifications = splitClassifications;
        this.splitRules = splitRules;
        this.advancedOptions = advancedOptions;
        this.parser = parser;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The base processor to use. For splitters, this can currently only be <code>&quot;splitting_performance&quot;</code> or <code>&quot;splitting_light&quot;</code>. See <a href="/changelog/splitting/splitting-performance">Splitting Changelog</a> for more details.
     */
    @JsonProperty("baseProcessor")
    public Optional<SplitterConfigBaseProcessor> getBaseProcessor() {
        return baseProcessor;
    }

    /**
     * @return The version of the <code>&quot;splitting_performance&quot;</code> or <code>&quot;splitting_light&quot;</code> processor to use. If this is provided, the <code>baseProcessor</code> must also be provided. See <a href="/changelog/splitting/splitting-performance">Splitting Changelog</a> for more details.
     */
    @JsonProperty("baseVersion")
    public Optional<String> getBaseVersion() {
        return baseVersion;
    }

    /**
     * @return Array of classifications that define the possible types of document sections.
     */
    @JsonProperty("splitClassifications")
    public List<Classification> getSplitClassifications() {
        return splitClassifications;
    }

    /**
     * @return Custom rules to guide the document splitting process in natural language.
     */
    @JsonProperty("splitRules")
    public Optional<String> getSplitRules() {
        return splitRules;
    }

    /**
     * @return Advanced configuration options.
     */
    @JsonProperty("advancedOptions")
    public Optional<SplitterAdvancedOptions> getAdvancedOptions() {
        return advancedOptions;
    }

    /**
     * @return Configuration options for the parsing process.
     */
    @JsonProperty("parser")
    public Optional<ParseConfig> getParser() {
        return parser;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SplitterConfig && equalTo((SplitterConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SplitterConfig other) {
        return baseProcessor.equals(other.baseProcessor)
                && baseVersion.equals(other.baseVersion)
                && splitClassifications.equals(other.splitClassifications)
                && splitRules.equals(other.splitRules)
                && advancedOptions.equals(other.advancedOptions)
                && parser.equals(other.parser);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.baseProcessor,
                this.baseVersion,
                this.splitClassifications,
                this.splitRules,
                this.advancedOptions,
                this.parser);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<SplitterConfigBaseProcessor> baseProcessor = Optional.empty();

        private Optional<String> baseVersion = Optional.empty();

        private List<Classification> splitClassifications = new ArrayList<>();

        private Optional<String> splitRules = Optional.empty();

        private Optional<SplitterAdvancedOptions> advancedOptions = Optional.empty();

        private Optional<ParseConfig> parser = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SplitterConfig other) {
            baseProcessor(other.getBaseProcessor());
            baseVersion(other.getBaseVersion());
            splitClassifications(other.getSplitClassifications());
            splitRules(other.getSplitRules());
            advancedOptions(other.getAdvancedOptions());
            parser(other.getParser());
            return this;
        }

        /**
         * <p>The base processor to use. For splitters, this can currently only be <code>&quot;splitting_performance&quot;</code> or <code>&quot;splitting_light&quot;</code>. See <a href="/changelog/splitting/splitting-performance">Splitting Changelog</a> for more details.</p>
         */
        @JsonSetter(value = "baseProcessor", nulls = Nulls.SKIP)
        public Builder baseProcessor(Optional<SplitterConfigBaseProcessor> baseProcessor) {
            this.baseProcessor = baseProcessor;
            return this;
        }

        public Builder baseProcessor(SplitterConfigBaseProcessor baseProcessor) {
            this.baseProcessor = Optional.ofNullable(baseProcessor);
            return this;
        }

        /**
         * <p>The version of the <code>&quot;splitting_performance&quot;</code> or <code>&quot;splitting_light&quot;</code> processor to use. If this is provided, the <code>baseProcessor</code> must also be provided. See <a href="/changelog/splitting/splitting-performance">Splitting Changelog</a> for more details.</p>
         */
        @JsonSetter(value = "baseVersion", nulls = Nulls.SKIP)
        public Builder baseVersion(Optional<String> baseVersion) {
            this.baseVersion = baseVersion;
            return this;
        }

        public Builder baseVersion(String baseVersion) {
            this.baseVersion = Optional.ofNullable(baseVersion);
            return this;
        }

        /**
         * <p>Array of classifications that define the possible types of document sections.</p>
         */
        @JsonSetter(value = "splitClassifications", nulls = Nulls.SKIP)
        public Builder splitClassifications(List<Classification> splitClassifications) {
            this.splitClassifications.clear();
            this.splitClassifications.addAll(splitClassifications);
            return this;
        }

        public Builder addSplitClassifications(Classification splitClassifications) {
            this.splitClassifications.add(splitClassifications);
            return this;
        }

        public Builder addAllSplitClassifications(List<Classification> splitClassifications) {
            this.splitClassifications.addAll(splitClassifications);
            return this;
        }

        /**
         * <p>Custom rules to guide the document splitting process in natural language.</p>
         */
        @JsonSetter(value = "splitRules", nulls = Nulls.SKIP)
        public Builder splitRules(Optional<String> splitRules) {
            this.splitRules = splitRules;
            return this;
        }

        public Builder splitRules(String splitRules) {
            this.splitRules = Optional.ofNullable(splitRules);
            return this;
        }

        /**
         * <p>Advanced configuration options.</p>
         */
        @JsonSetter(value = "advancedOptions", nulls = Nulls.SKIP)
        public Builder advancedOptions(Optional<SplitterAdvancedOptions> advancedOptions) {
            this.advancedOptions = advancedOptions;
            return this;
        }

        public Builder advancedOptions(SplitterAdvancedOptions advancedOptions) {
            this.advancedOptions = Optional.ofNullable(advancedOptions);
            return this;
        }

        /**
         * <p>Configuration options for the parsing process.</p>
         */
        @JsonSetter(value = "parser", nulls = Nulls.SKIP)
        public Builder parser(Optional<ParseConfig> parser) {
            this.parser = parser;
            return this;
        }

        public Builder parser(ParseConfig parser) {
            this.parser = Optional.ofNullable(parser);
            return this;
        }

        public SplitterConfig build() {
            return new SplitterConfig(
                    baseProcessor,
                    baseVersion,
                    splitClassifications,
                    splitRules,
                    advancedOptions,
                    parser,
                    additionalProperties);
        }
    }
}

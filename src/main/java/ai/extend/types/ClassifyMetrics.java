/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClassifyMetrics.Builder.class)
public final class ClassifyMetrics implements IBaseMetrics {
    private final Optional<Double> numFiles;

    private final Optional<Double> numPages;

    private final Optional<Double> meanRunTimeMs;

    private final Optional<String> type;

    private final Optional<Double> accuracyPerc;

    private final Optional<Double> meanConfidence;

    private final Optional<Map<String, Object>> distribution;

    private final Optional<Map<String, Object>> accuracyPercByClassification;

    private final Optional<Map<String, Object>> confusionMatrix;

    private final Map<String, Object> additionalProperties;

    private ClassifyMetrics(
            Optional<Double> numFiles,
            Optional<Double> numPages,
            Optional<Double> meanRunTimeMs,
            Optional<String> type,
            Optional<Double> accuracyPerc,
            Optional<Double> meanConfidence,
            Optional<Map<String, Object>> distribution,
            Optional<Map<String, Object>> accuracyPercByClassification,
            Optional<Map<String, Object>> confusionMatrix,
            Map<String, Object> additionalProperties) {
        this.numFiles = numFiles;
        this.numPages = numPages;
        this.meanRunTimeMs = meanRunTimeMs;
        this.type = type;
        this.accuracyPerc = accuracyPerc;
        this.meanConfidence = meanConfidence;
        this.distribution = distribution;
        this.accuracyPercByClassification = accuracyPercByClassification;
        this.confusionMatrix = confusionMatrix;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The total number of files that were processed.
     */
    @JsonProperty("numFiles")
    @java.lang.Override
    public Optional<Double> getNumFiles() {
        return numFiles;
    }

    /**
     * @return The total number of pages that were processed.
     */
    @JsonProperty("numPages")
    @java.lang.Override
    public Optional<Double> getNumPages() {
        return numPages;
    }

    /**
     * @return The mean runtime in milliseconds per document.
     */
    @JsonProperty("meanRunTimeMs")
    @java.lang.Override
    public Optional<Double> getMeanRunTimeMs() {
        return meanRunTimeMs;
    }

    /**
     * @return The type of metrics. Will always be <code>&quot;CLASSIFY&quot;</code> for classification processors.
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    /**
     * @return The overall accuracy percentage.
     */
    @JsonProperty("accuracyPerc")
    public Optional<Double> getAccuracyPerc() {
        return accuracyPerc;
    }

    /**
     * @return The mean confidence score.
     */
    @JsonProperty("meanConfidence")
    public Optional<Double> getMeanConfidence() {
        return meanConfidence;
    }

    /**
     * @return Record mapping classification values to their counts.
     */
    @JsonProperty("distribution")
    public Optional<Map<String, Object>> getDistribution() {
        return distribution;
    }

    /**
     * @return Mapping from classification to accuracy percentage as calculated from the confusion matrix.
     */
    @JsonProperty("accuracyPercByClassification")
    public Optional<Map<String, Object>> getAccuracyPercByClassification() {
        return accuracyPercByClassification;
    }

    /**
     * @return Mapping from actual class to predicted class to count. Only present when accuracy percentage is present.
     */
    @JsonProperty("confusionMatrix")
    public Optional<Map<String, Object>> getConfusionMatrix() {
        return confusionMatrix;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClassifyMetrics && equalTo((ClassifyMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClassifyMetrics other) {
        return numFiles.equals(other.numFiles)
                && numPages.equals(other.numPages)
                && meanRunTimeMs.equals(other.meanRunTimeMs)
                && type.equals(other.type)
                && accuracyPerc.equals(other.accuracyPerc)
                && meanConfidence.equals(other.meanConfidence)
                && distribution.equals(other.distribution)
                && accuracyPercByClassification.equals(other.accuracyPercByClassification)
                && confusionMatrix.equals(other.confusionMatrix);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.numFiles,
                this.numPages,
                this.meanRunTimeMs,
                this.type,
                this.accuracyPerc,
                this.meanConfidence,
                this.distribution,
                this.accuracyPercByClassification,
                this.confusionMatrix);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> numFiles = Optional.empty();

        private Optional<Double> numPages = Optional.empty();

        private Optional<Double> meanRunTimeMs = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<Double> accuracyPerc = Optional.empty();

        private Optional<Double> meanConfidence = Optional.empty();

        private Optional<Map<String, Object>> distribution = Optional.empty();

        private Optional<Map<String, Object>> accuracyPercByClassification = Optional.empty();

        private Optional<Map<String, Object>> confusionMatrix = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClassifyMetrics other) {
            numFiles(other.getNumFiles());
            numPages(other.getNumPages());
            meanRunTimeMs(other.getMeanRunTimeMs());
            type(other.getType());
            accuracyPerc(other.getAccuracyPerc());
            meanConfidence(other.getMeanConfidence());
            distribution(other.getDistribution());
            accuracyPercByClassification(other.getAccuracyPercByClassification());
            confusionMatrix(other.getConfusionMatrix());
            return this;
        }

        /**
         * <p>The total number of files that were processed.</p>
         */
        @JsonSetter(value = "numFiles", nulls = Nulls.SKIP)
        public Builder numFiles(Optional<Double> numFiles) {
            this.numFiles = numFiles;
            return this;
        }

        public Builder numFiles(Double numFiles) {
            this.numFiles = Optional.ofNullable(numFiles);
            return this;
        }

        /**
         * <p>The total number of pages that were processed.</p>
         */
        @JsonSetter(value = "numPages", nulls = Nulls.SKIP)
        public Builder numPages(Optional<Double> numPages) {
            this.numPages = numPages;
            return this;
        }

        public Builder numPages(Double numPages) {
            this.numPages = Optional.ofNullable(numPages);
            return this;
        }

        /**
         * <p>The mean runtime in milliseconds per document.</p>
         */
        @JsonSetter(value = "meanRunTimeMs", nulls = Nulls.SKIP)
        public Builder meanRunTimeMs(Optional<Double> meanRunTimeMs) {
            this.meanRunTimeMs = meanRunTimeMs;
            return this;
        }

        public Builder meanRunTimeMs(Double meanRunTimeMs) {
            this.meanRunTimeMs = Optional.ofNullable(meanRunTimeMs);
            return this;
        }

        /**
         * <p>The type of metrics. Will always be <code>&quot;CLASSIFY&quot;</code> for classification processors.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The overall accuracy percentage.</p>
         */
        @JsonSetter(value = "accuracyPerc", nulls = Nulls.SKIP)
        public Builder accuracyPerc(Optional<Double> accuracyPerc) {
            this.accuracyPerc = accuracyPerc;
            return this;
        }

        public Builder accuracyPerc(Double accuracyPerc) {
            this.accuracyPerc = Optional.ofNullable(accuracyPerc);
            return this;
        }

        /**
         * <p>The mean confidence score.</p>
         */
        @JsonSetter(value = "meanConfidence", nulls = Nulls.SKIP)
        public Builder meanConfidence(Optional<Double> meanConfidence) {
            this.meanConfidence = meanConfidence;
            return this;
        }

        public Builder meanConfidence(Double meanConfidence) {
            this.meanConfidence = Optional.ofNullable(meanConfidence);
            return this;
        }

        /**
         * <p>Record mapping classification values to their counts.</p>
         */
        @JsonSetter(value = "distribution", nulls = Nulls.SKIP)
        public Builder distribution(Optional<Map<String, Object>> distribution) {
            this.distribution = distribution;
            return this;
        }

        public Builder distribution(Map<String, Object> distribution) {
            this.distribution = Optional.ofNullable(distribution);
            return this;
        }

        /**
         * <p>Mapping from classification to accuracy percentage as calculated from the confusion matrix.</p>
         */
        @JsonSetter(value = "accuracyPercByClassification", nulls = Nulls.SKIP)
        public Builder accuracyPercByClassification(Optional<Map<String, Object>> accuracyPercByClassification) {
            this.accuracyPercByClassification = accuracyPercByClassification;
            return this;
        }

        public Builder accuracyPercByClassification(Map<String, Object> accuracyPercByClassification) {
            this.accuracyPercByClassification = Optional.ofNullable(accuracyPercByClassification);
            return this;
        }

        /**
         * <p>Mapping from actual class to predicted class to count. Only present when accuracy percentage is present.</p>
         */
        @JsonSetter(value = "confusionMatrix", nulls = Nulls.SKIP)
        public Builder confusionMatrix(Optional<Map<String, Object>> confusionMatrix) {
            this.confusionMatrix = confusionMatrix;
            return this;
        }

        public Builder confusionMatrix(Map<String, Object> confusionMatrix) {
            this.confusionMatrix = Optional.ofNullable(confusionMatrix);
            return this;
        }

        public ClassifyMetrics build() {
            return new ClassifyMetrics(
                    numFiles,
                    numPages,
                    meanRunTimeMs,
                    type,
                    accuracyPerc,
                    meanConfidence,
                    distribution,
                    accuracyPercByClassification,
                    confusionMatrix,
                    additionalProperties);
        }
    }
}

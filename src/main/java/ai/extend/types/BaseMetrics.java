/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BaseMetrics.Builder.class)
public final class BaseMetrics implements IBaseMetrics {
    private final Optional<Double> numFiles;

    private final Optional<Double> numPages;

    private final Optional<Double> meanRunTimeMs;

    private final Map<String, Object> additionalProperties;

    private BaseMetrics(
            Optional<Double> numFiles,
            Optional<Double> numPages,
            Optional<Double> meanRunTimeMs,
            Map<String, Object> additionalProperties) {
        this.numFiles = numFiles;
        this.numPages = numPages;
        this.meanRunTimeMs = meanRunTimeMs;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The total number of files that were processed.
     */
    @JsonProperty("numFiles")
    @java.lang.Override
    public Optional<Double> getNumFiles() {
        return numFiles;
    }

    /**
     * @return The total number of pages that were processed.
     */
    @JsonProperty("numPages")
    @java.lang.Override
    public Optional<Double> getNumPages() {
        return numPages;
    }

    /**
     * @return The mean runtime in milliseconds per document.
     */
    @JsonProperty("meanRunTimeMs")
    @java.lang.Override
    public Optional<Double> getMeanRunTimeMs() {
        return meanRunTimeMs;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BaseMetrics && equalTo((BaseMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BaseMetrics other) {
        return numFiles.equals(other.numFiles)
                && numPages.equals(other.numPages)
                && meanRunTimeMs.equals(other.meanRunTimeMs);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.numFiles, this.numPages, this.meanRunTimeMs);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> numFiles = Optional.empty();

        private Optional<Double> numPages = Optional.empty();

        private Optional<Double> meanRunTimeMs = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BaseMetrics other) {
            numFiles(other.getNumFiles());
            numPages(other.getNumPages());
            meanRunTimeMs(other.getMeanRunTimeMs());
            return this;
        }

        /**
         * <p>The total number of files that were processed.</p>
         */
        @JsonSetter(value = "numFiles", nulls = Nulls.SKIP)
        public Builder numFiles(Optional<Double> numFiles) {
            this.numFiles = numFiles;
            return this;
        }

        public Builder numFiles(Double numFiles) {
            this.numFiles = Optional.ofNullable(numFiles);
            return this;
        }

        /**
         * <p>The total number of pages that were processed.</p>
         */
        @JsonSetter(value = "numPages", nulls = Nulls.SKIP)
        public Builder numPages(Optional<Double> numPages) {
            this.numPages = numPages;
            return this;
        }

        public Builder numPages(Double numPages) {
            this.numPages = Optional.ofNullable(numPages);
            return this;
        }

        /**
         * <p>The mean runtime in milliseconds per document.</p>
         */
        @JsonSetter(value = "meanRunTimeMs", nulls = Nulls.SKIP)
        public Builder meanRunTimeMs(Optional<Double> meanRunTimeMs) {
            this.meanRunTimeMs = meanRunTimeMs;
            return this;
        }

        public Builder meanRunTimeMs(Double meanRunTimeMs) {
            this.meanRunTimeMs = Optional.ofNullable(meanRunTimeMs);
            return this;
        }

        public BaseMetrics build() {
            return new BaseMetrics(numFiles, numPages, meanRunTimeMs, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClassificationAdvancedOptions.Builder.class)
public final class ClassificationAdvancedOptions {
    private final Optional<ClassificationAdvancedOptionsContext> context;

    private final Optional<Boolean> advancedMultimodalEnabled;

    private final Optional<Integer> fixedPageLimit;

    private final Optional<List<PageRangesItem>> pageRanges;

    private final Map<String, Object> additionalProperties;

    private ClassificationAdvancedOptions(
            Optional<ClassificationAdvancedOptionsContext> context,
            Optional<Boolean> advancedMultimodalEnabled,
            Optional<Integer> fixedPageLimit,
            Optional<List<PageRangesItem>> pageRanges,
            Map<String, Object> additionalProperties) {
        this.context = context;
        this.advancedMultimodalEnabled = advancedMultimodalEnabled;
        this.fixedPageLimit = fixedPageLimit;
        this.pageRanges = pageRanges;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The context to use for classification.
     */
    @JsonProperty("context")
    public Optional<ClassificationAdvancedOptionsContext> getContext() {
        return context;
    }

    /**
     * @return Enable advanced multimodal processing for better handling of visual elements during classification.
     */
    @JsonProperty("advancedMultimodalEnabled")
    public Optional<Boolean> getAdvancedMultimodalEnabled() {
        return advancedMultimodalEnabled;
    }

    /**
     * @return Limit processing to a specific number of pages from the beginning of the document. See <a href="/product/page-ranges">Page Ranges</a>.
     */
    @JsonProperty("fixedPageLimit")
    public Optional<Integer> getFixedPageLimit() {
        return fixedPageLimit;
    }

    @JsonProperty("pageRanges")
    public Optional<List<PageRangesItem>> getPageRanges() {
        return pageRanges;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClassificationAdvancedOptions && equalTo((ClassificationAdvancedOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClassificationAdvancedOptions other) {
        return context.equals(other.context)
                && advancedMultimodalEnabled.equals(other.advancedMultimodalEnabled)
                && fixedPageLimit.equals(other.fixedPageLimit)
                && pageRanges.equals(other.pageRanges);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.context, this.advancedMultimodalEnabled, this.fixedPageLimit, this.pageRanges);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ClassificationAdvancedOptionsContext> context = Optional.empty();

        private Optional<Boolean> advancedMultimodalEnabled = Optional.empty();

        private Optional<Integer> fixedPageLimit = Optional.empty();

        private Optional<List<PageRangesItem>> pageRanges = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClassificationAdvancedOptions other) {
            context(other.getContext());
            advancedMultimodalEnabled(other.getAdvancedMultimodalEnabled());
            fixedPageLimit(other.getFixedPageLimit());
            pageRanges(other.getPageRanges());
            return this;
        }

        /**
         * <p>The context to use for classification.</p>
         */
        @JsonSetter(value = "context", nulls = Nulls.SKIP)
        public Builder context(Optional<ClassificationAdvancedOptionsContext> context) {
            this.context = context;
            return this;
        }

        public Builder context(ClassificationAdvancedOptionsContext context) {
            this.context = Optional.ofNullable(context);
            return this;
        }

        /**
         * <p>Enable advanced multimodal processing for better handling of visual elements during classification.</p>
         */
        @JsonSetter(value = "advancedMultimodalEnabled", nulls = Nulls.SKIP)
        public Builder advancedMultimodalEnabled(Optional<Boolean> advancedMultimodalEnabled) {
            this.advancedMultimodalEnabled = advancedMultimodalEnabled;
            return this;
        }

        public Builder advancedMultimodalEnabled(Boolean advancedMultimodalEnabled) {
            this.advancedMultimodalEnabled = Optional.ofNullable(advancedMultimodalEnabled);
            return this;
        }

        /**
         * <p>Limit processing to a specific number of pages from the beginning of the document. See <a href="/product/page-ranges">Page Ranges</a>.</p>
         */
        @JsonSetter(value = "fixedPageLimit", nulls = Nulls.SKIP)
        public Builder fixedPageLimit(Optional<Integer> fixedPageLimit) {
            this.fixedPageLimit = fixedPageLimit;
            return this;
        }

        public Builder fixedPageLimit(Integer fixedPageLimit) {
            this.fixedPageLimit = Optional.ofNullable(fixedPageLimit);
            return this;
        }

        @JsonSetter(value = "pageRanges", nulls = Nulls.SKIP)
        public Builder pageRanges(Optional<List<PageRangesItem>> pageRanges) {
            this.pageRanges = pageRanges;
            return this;
        }

        public Builder pageRanges(List<PageRangesItem> pageRanges) {
            this.pageRanges = Optional.ofNullable(pageRanges);
            return this;
        }

        public ClassificationAdvancedOptions build() {
            return new ClassificationAdvancedOptions(
                    context, advancedMultimodalEnabled, fixedPageLimit, pageRanges, additionalProperties);
        }
    }
}

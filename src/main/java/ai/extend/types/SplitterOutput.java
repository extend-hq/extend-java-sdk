/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SplitterOutput.Builder.class)
public final class SplitterOutput {
    private final List<SplitterOutputSplitsItem> splits;

    private final Optional<Boolean> isExternal;

    private final Map<String, Object> additionalProperties;

    private SplitterOutput(
            List<SplitterOutputSplitsItem> splits,
            Optional<Boolean> isExternal,
            Map<String, Object> additionalProperties) {
        this.splits = splits;
        this.isExternal = isExternal;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("splits")
    public List<SplitterOutputSplitsItem> getSplits() {
        return splits;
    }

    @JsonProperty("isExternal")
    public Optional<Boolean> getIsExternal() {
        return isExternal;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SplitterOutput && equalTo((SplitterOutput) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SplitterOutput other) {
        return splits.equals(other.splits) && isExternal.equals(other.isExternal);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.splits, this.isExternal);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<SplitterOutputSplitsItem> splits = new ArrayList<>();

        private Optional<Boolean> isExternal = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SplitterOutput other) {
            splits(other.getSplits());
            isExternal(other.getIsExternal());
            return this;
        }

        @JsonSetter(value = "splits", nulls = Nulls.SKIP)
        public Builder splits(List<SplitterOutputSplitsItem> splits) {
            this.splits.clear();
            this.splits.addAll(splits);
            return this;
        }

        public Builder addSplits(SplitterOutputSplitsItem splits) {
            this.splits.add(splits);
            return this;
        }

        public Builder addAllSplits(List<SplitterOutputSplitsItem> splits) {
            this.splits.addAll(splits);
            return this;
        }

        @JsonSetter(value = "isExternal", nulls = Nulls.SKIP)
        public Builder isExternal(Optional<Boolean> isExternal) {
            this.isExternal = isExternal;
            return this;
        }

        public Builder isExternal(Boolean isExternal) {
            this.isExternal = Optional.ofNullable(isExternal);
            return this;
        }

        public SplitterOutput build() {
            return new SplitterOutput(splits, isExternal, additionalProperties);
        }
    }
}

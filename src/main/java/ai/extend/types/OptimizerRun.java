/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OptimizerRun.Builder.class)
public final class OptimizerRun {
    private final String agentRunId;

    private final String processorId;

    private final String processorVersionId;

    private final String evalSetId;

    private final OptimizerRunAgentType agentType;

    private final OptimizerRunStatus status;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<List<OptimizerBatchProcessorRunResult>> batchProcessorRuns;

    private final Map<String, Object> additionalProperties;

    private OptimizerRun(
            String agentRunId,
            String processorId,
            String processorVersionId,
            String evalSetId,
            OptimizerRunAgentType agentType,
            OptimizerRunStatus status,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<List<OptimizerBatchProcessorRunResult>> batchProcessorRuns,
            Map<String, Object> additionalProperties) {
        this.agentRunId = agentRunId;
        this.processorId = processorId;
        this.processorVersionId = processorVersionId;
        this.evalSetId = evalSetId;
        this.agentType = agentType;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.batchProcessorRuns = batchProcessorRuns;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the optimizer run
     */
    @JsonProperty("agentRunId")
    public String getAgentRunId() {
        return agentRunId;
    }

    /**
     * @return ID of the processor being optimized
     */
    @JsonProperty("processorId")
    public String getProcessorId() {
        return processorId;
    }

    /**
     * @return ID of the processor version being optimized
     */
    @JsonProperty("processorVersionId")
    public String getProcessorVersionId() {
        return processorVersionId;
    }

    /**
     * @return ID of the evaluation set used
     */
    @JsonProperty("evalSetId")
    public String getEvalSetId() {
        return evalSetId;
    }

    /**
     * @return Type of optimizer agent that ran
     */
    @JsonProperty("agentType")
    public OptimizerRunAgentType getAgentType() {
        return agentType;
    }

    /**
     * @return Current status of the optimizer run
     */
    @JsonProperty("status")
    public OptimizerRunStatus getStatus() {
        return status;
    }

    /**
     * @return ISO 8601 timestamp of when the run was created
     */
    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return ISO 8601 timestamp of when the run was last updated
     */
    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return Array of batch processor run results. Each run represents one iteration of the optimization process.
     * The first result (with <code>isBaseline: true</code>) is the baseline configuration.
     * Subsequent results are optimization attempts, sorted chronologically.
     * Only present when status is <code>PROCESSED</code>.
     */
    @JsonProperty("batchProcessorRuns")
    public Optional<List<OptimizerBatchProcessorRunResult>> getBatchProcessorRuns() {
        return batchProcessorRuns;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OptimizerRun && equalTo((OptimizerRun) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OptimizerRun other) {
        return agentRunId.equals(other.agentRunId)
                && processorId.equals(other.processorId)
                && processorVersionId.equals(other.processorVersionId)
                && evalSetId.equals(other.evalSetId)
                && agentType.equals(other.agentType)
                && status.equals(other.status)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && batchProcessorRuns.equals(other.batchProcessorRuns);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.agentRunId,
                this.processorId,
                this.processorVersionId,
                this.evalSetId,
                this.agentType,
                this.status,
                this.createdAt,
                this.updatedAt,
                this.batchProcessorRuns);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AgentRunIdStage builder() {
        return new Builder();
    }

    public interface AgentRunIdStage {
        /**
         * <p>Unique identifier for the optimizer run</p>
         */
        ProcessorIdStage agentRunId(@NotNull String agentRunId);

        Builder from(OptimizerRun other);
    }

    public interface ProcessorIdStage {
        /**
         * <p>ID of the processor being optimized</p>
         */
        ProcessorVersionIdStage processorId(@NotNull String processorId);
    }

    public interface ProcessorVersionIdStage {
        /**
         * <p>ID of the processor version being optimized</p>
         */
        EvalSetIdStage processorVersionId(@NotNull String processorVersionId);
    }

    public interface EvalSetIdStage {
        /**
         * <p>ID of the evaluation set used</p>
         */
        AgentTypeStage evalSetId(@NotNull String evalSetId);
    }

    public interface AgentTypeStage {
        /**
         * <p>Type of optimizer agent that ran</p>
         */
        StatusStage agentType(@NotNull OptimizerRunAgentType agentType);
    }

    public interface StatusStage {
        /**
         * <p>Current status of the optimizer run</p>
         */
        CreatedAtStage status(@NotNull OptimizerRunStatus status);
    }

    public interface CreatedAtStage {
        /**
         * <p>ISO 8601 timestamp of when the run was created</p>
         */
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>ISO 8601 timestamp of when the run was last updated</p>
         */
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        OptimizerRun build();

        /**
         * <p>Array of batch processor run results. Each run represents one iteration of the optimization process.
         * The first result (with <code>isBaseline: true</code>) is the baseline configuration.
         * Subsequent results are optimization attempts, sorted chronologically.
         * Only present when status is <code>PROCESSED</code>.</p>
         */
        _FinalStage batchProcessorRuns(Optional<List<OptimizerBatchProcessorRunResult>> batchProcessorRuns);

        _FinalStage batchProcessorRuns(List<OptimizerBatchProcessorRunResult> batchProcessorRuns);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements AgentRunIdStage,
                    ProcessorIdStage,
                    ProcessorVersionIdStage,
                    EvalSetIdStage,
                    AgentTypeStage,
                    StatusStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    _FinalStage {
        private String agentRunId;

        private String processorId;

        private String processorVersionId;

        private String evalSetId;

        private OptimizerRunAgentType agentType;

        private OptimizerRunStatus status;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<List<OptimizerBatchProcessorRunResult>> batchProcessorRuns = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OptimizerRun other) {
            agentRunId(other.getAgentRunId());
            processorId(other.getProcessorId());
            processorVersionId(other.getProcessorVersionId());
            evalSetId(other.getEvalSetId());
            agentType(other.getAgentType());
            status(other.getStatus());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            batchProcessorRuns(other.getBatchProcessorRuns());
            return this;
        }

        /**
         * <p>Unique identifier for the optimizer run</p>
         * <p>Unique identifier for the optimizer run</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("agentRunId")
        public ProcessorIdStage agentRunId(@NotNull String agentRunId) {
            this.agentRunId = Objects.requireNonNull(agentRunId, "agentRunId must not be null");
            return this;
        }

        /**
         * <p>ID of the processor being optimized</p>
         * <p>ID of the processor being optimized</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("processorId")
        public ProcessorVersionIdStage processorId(@NotNull String processorId) {
            this.processorId = Objects.requireNonNull(processorId, "processorId must not be null");
            return this;
        }

        /**
         * <p>ID of the processor version being optimized</p>
         * <p>ID of the processor version being optimized</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("processorVersionId")
        public EvalSetIdStage processorVersionId(@NotNull String processorVersionId) {
            this.processorVersionId = Objects.requireNonNull(processorVersionId, "processorVersionId must not be null");
            return this;
        }

        /**
         * <p>ID of the evaluation set used</p>
         * <p>ID of the evaluation set used</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("evalSetId")
        public AgentTypeStage evalSetId(@NotNull String evalSetId) {
            this.evalSetId = Objects.requireNonNull(evalSetId, "evalSetId must not be null");
            return this;
        }

        /**
         * <p>Type of optimizer agent that ran</p>
         * <p>Type of optimizer agent that ran</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("agentType")
        public StatusStage agentType(@NotNull OptimizerRunAgentType agentType) {
            this.agentType = Objects.requireNonNull(agentType, "agentType must not be null");
            return this;
        }

        /**
         * <p>Current status of the optimizer run</p>
         * <p>Current status of the optimizer run</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public CreatedAtStage status(@NotNull OptimizerRunStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>ISO 8601 timestamp of when the run was created</p>
         * <p>ISO 8601 timestamp of when the run was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        /**
         * <p>ISO 8601 timestamp of when the run was last updated</p>
         * <p>ISO 8601 timestamp of when the run was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        /**
         * <p>Array of batch processor run results. Each run represents one iteration of the optimization process.
         * The first result (with <code>isBaseline: true</code>) is the baseline configuration.
         * Subsequent results are optimization attempts, sorted chronologically.
         * Only present when status is <code>PROCESSED</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchProcessorRuns(List<OptimizerBatchProcessorRunResult> batchProcessorRuns) {
            this.batchProcessorRuns = Optional.ofNullable(batchProcessorRuns);
            return this;
        }

        /**
         * <p>Array of batch processor run results. Each run represents one iteration of the optimization process.
         * The first result (with <code>isBaseline: true</code>) is the baseline configuration.
         * Subsequent results are optimization attempts, sorted chronologically.
         * Only present when status is <code>PROCESSED</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "batchProcessorRuns", nulls = Nulls.SKIP)
        public _FinalStage batchProcessorRuns(Optional<List<OptimizerBatchProcessorRunResult>> batchProcessorRuns) {
            this.batchProcessorRuns = batchProcessorRuns;
            return this;
        }

        @java.lang.Override
        public OptimizerRun build() {
            return new OptimizerRun(
                    agentRunId,
                    processorId,
                    processorVersionId,
                    evalSetId,
                    agentType,
                    status,
                    createdAt,
                    updatedAt,
                    batchProcessorRuns,
                    additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Chunk.Builder.class)
public final class Chunk {
    private final String object;

    private final ChunkType type;

    private final String content;

    private final ChunkMetadata metadata;

    private final List<Block> blocks;

    private final Map<String, Object> additionalProperties;

    private Chunk(
            String object,
            ChunkType type,
            String content,
            ChunkMetadata metadata,
            List<Block> blocks,
            Map<String, Object> additionalProperties) {
        this.object = object;
        this.type = type;
        this.content = content;
        this.metadata = metadata;
        this.blocks = blocks;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of object. In this case, it will always be <code>&quot;chunk&quot;</code>.
     */
    @JsonProperty("object")
    public String getObject() {
        return object;
    }

    /**
     * @return The type of chunk.
     */
    @JsonProperty("type")
    public ChunkType getType() {
        return type;
    }

    /**
     * @return The parsed content of the chunk.
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    /**
     * @return Metadata about the chunk.
     */
    @JsonProperty("metadata")
    public ChunkMetadata getMetadata() {
        return metadata;
    }

    /**
     * @return An array of block objects that make up the chunk. A Block represents a distinct content element within a document, such as a paragraph of text, a heading, a table, or a figure. Blocks are the fundamental units that make up chunks in parsed documents.
     */
    @JsonProperty("blocks")
    public List<Block> getBlocks() {
        return blocks;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Chunk && equalTo((Chunk) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Chunk other) {
        return object.equals(other.object)
                && type.equals(other.type)
                && content.equals(other.content)
                && metadata.equals(other.metadata)
                && blocks.equals(other.blocks);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.object, this.type, this.content, this.metadata, this.blocks);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ObjectStage builder() {
        return new Builder();
    }

    public interface ObjectStage {
        /**
         * <p>The type of object. In this case, it will always be <code>&quot;chunk&quot;</code>.</p>
         */
        TypeStage object(@NotNull String object);

        Builder from(Chunk other);
    }

    public interface TypeStage {
        /**
         * <p>The type of chunk.</p>
         */
        ContentStage type(@NotNull ChunkType type);
    }

    public interface ContentStage {
        /**
         * <p>The parsed content of the chunk.</p>
         */
        MetadataStage content(@NotNull String content);
    }

    public interface MetadataStage {
        /**
         * <p>Metadata about the chunk.</p>
         */
        _FinalStage metadata(@NotNull ChunkMetadata metadata);
    }

    public interface _FinalStage {
        Chunk build();

        /**
         * <p>An array of block objects that make up the chunk. A Block represents a distinct content element within a document, such as a paragraph of text, a heading, a table, or a figure. Blocks are the fundamental units that make up chunks in parsed documents.</p>
         */
        _FinalStage blocks(List<Block> blocks);

        _FinalStage addBlocks(Block blocks);

        _FinalStage addAllBlocks(List<Block> blocks);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ObjectStage, TypeStage, ContentStage, MetadataStage, _FinalStage {
        private String object;

        private ChunkType type;

        private String content;

        private ChunkMetadata metadata;

        private List<Block> blocks = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Chunk other) {
            object(other.getObject());
            type(other.getType());
            content(other.getContent());
            metadata(other.getMetadata());
            blocks(other.getBlocks());
            return this;
        }

        /**
         * <p>The type of object. In this case, it will always be <code>&quot;chunk&quot;</code>.</p>
         * <p>The type of object. In this case, it will always be <code>&quot;chunk&quot;</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("object")
        public TypeStage object(@NotNull String object) {
            this.object = Objects.requireNonNull(object, "object must not be null");
            return this;
        }

        /**
         * <p>The type of chunk.</p>
         * <p>The type of chunk.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public ContentStage type(@NotNull ChunkType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The parsed content of the chunk.</p>
         * <p>The parsed content of the chunk.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public MetadataStage content(@NotNull String content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        /**
         * <p>Metadata about the chunk.</p>
         * <p>Metadata about the chunk.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("metadata")
        public _FinalStage metadata(@NotNull ChunkMetadata metadata) {
            this.metadata = Objects.requireNonNull(metadata, "metadata must not be null");
            return this;
        }

        /**
         * <p>An array of block objects that make up the chunk. A Block represents a distinct content element within a document, such as a paragraph of text, a heading, a table, or a figure. Blocks are the fundamental units that make up chunks in parsed documents.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllBlocks(List<Block> blocks) {
            this.blocks.addAll(blocks);
            return this;
        }

        /**
         * <p>An array of block objects that make up the chunk. A Block represents a distinct content element within a document, such as a paragraph of text, a heading, a table, or a figure. Blocks are the fundamental units that make up chunks in parsed documents.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addBlocks(Block blocks) {
            this.blocks.add(blocks);
            return this;
        }

        /**
         * <p>An array of block objects that make up the chunk. A Block represents a distinct content element within a document, such as a paragraph of text, a heading, a table, or a figure. Blocks are the fundamental units that make up chunks in parsed documents.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "blocks", nulls = Nulls.SKIP)
        public _FinalStage blocks(List<Block> blocks) {
            this.blocks.clear();
            this.blocks.addAll(blocks);
            return this;
        }

        @java.lang.Override
        public Chunk build() {
            return new Chunk(object, type, content, metadata, blocks, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExtractionAdvancedOptions.Builder.class)
public final class ExtractionAdvancedOptions {
    private final Optional<String> documentKind;

    private final Optional<String> keyDefinitions;

    private final Optional<Boolean> modelReasoningInsightsEnabled;

    private final Optional<Boolean> advancedMultimodalEnabled;

    private final Optional<Boolean> citationsEnabled;

    private final Optional<Boolean> advancedFigureParsingEnabled;

    private final Optional<ExtractChunkingOptions> chunkingOptions;

    private final Optional<Integer> fixedPageLimit;

    private final Optional<List<ExtractionAdvancedOptionsPageRangesItem>> pageRanges;

    private final Map<String, Object> additionalProperties;

    private ExtractionAdvancedOptions(
            Optional<String> documentKind,
            Optional<String> keyDefinitions,
            Optional<Boolean> modelReasoningInsightsEnabled,
            Optional<Boolean> advancedMultimodalEnabled,
            Optional<Boolean> citationsEnabled,
            Optional<Boolean> advancedFigureParsingEnabled,
            Optional<ExtractChunkingOptions> chunkingOptions,
            Optional<Integer> fixedPageLimit,
            Optional<List<ExtractionAdvancedOptionsPageRangesItem>> pageRanges,
            Map<String, Object> additionalProperties) {
        this.documentKind = documentKind;
        this.keyDefinitions = keyDefinitions;
        this.modelReasoningInsightsEnabled = modelReasoningInsightsEnabled;
        this.advancedMultimodalEnabled = advancedMultimodalEnabled;
        this.citationsEnabled = citationsEnabled;
        this.advancedFigureParsingEnabled = advancedFigureParsingEnabled;
        this.chunkingOptions = chunkingOptions;
        this.fixedPageLimit = fixedPageLimit;
        this.pageRanges = pageRanges;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The kind of document being processed.
     */
    @JsonProperty("documentKind")
    public Optional<String> getDocumentKind() {
        return documentKind;
    }

    /**
     * @return Custom key definitions for extraction.
     */
    @JsonProperty("keyDefinitions")
    public Optional<String> getKeyDefinitions() {
        return keyDefinitions;
    }

    /**
     * @return Whether to enable model reasoning insights.
     */
    @JsonProperty("modelReasoningInsightsEnabled")
    public Optional<Boolean> getModelReasoningInsightsEnabled() {
        return modelReasoningInsightsEnabled;
    }

    /**
     * @return Whether to enable advanced multimodal features.
     */
    @JsonProperty("advancedMultimodalEnabled")
    public Optional<Boolean> getAdvancedMultimodalEnabled() {
        return advancedMultimodalEnabled;
    }

    /**
     * @return Whether to enable citations in the output.
     */
    @JsonProperty("citationsEnabled")
    public Optional<Boolean> getCitationsEnabled() {
        return citationsEnabled;
    }

    /**
     * @return Whether to enable advanced figure parsing.
     */
    @JsonProperty("advancedFigureParsingEnabled")
    public Optional<Boolean> getAdvancedFigureParsingEnabled() {
        return advancedFigureParsingEnabled;
    }

    @JsonProperty("chunkingOptions")
    public Optional<ExtractChunkingOptions> getChunkingOptions() {
        return chunkingOptions;
    }

    /**
     * @return Optional fixed limit on the number of pages to process. See <a href="/product/page-ranges">Page Ranges</a>.
     */
    @JsonProperty("fixedPageLimit")
    public Optional<Integer> getFixedPageLimit() {
        return fixedPageLimit;
    }

    /**
     * @return Limit processing to the specified page ranges. See <a href="/product/page-ranges">Page Ranges</a>.
     */
    @JsonProperty("pageRanges")
    public Optional<List<ExtractionAdvancedOptionsPageRangesItem>> getPageRanges() {
        return pageRanges;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExtractionAdvancedOptions && equalTo((ExtractionAdvancedOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExtractionAdvancedOptions other) {
        return documentKind.equals(other.documentKind)
                && keyDefinitions.equals(other.keyDefinitions)
                && modelReasoningInsightsEnabled.equals(other.modelReasoningInsightsEnabled)
                && advancedMultimodalEnabled.equals(other.advancedMultimodalEnabled)
                && citationsEnabled.equals(other.citationsEnabled)
                && advancedFigureParsingEnabled.equals(other.advancedFigureParsingEnabled)
                && chunkingOptions.equals(other.chunkingOptions)
                && fixedPageLimit.equals(other.fixedPageLimit)
                && pageRanges.equals(other.pageRanges);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.documentKind,
                this.keyDefinitions,
                this.modelReasoningInsightsEnabled,
                this.advancedMultimodalEnabled,
                this.citationsEnabled,
                this.advancedFigureParsingEnabled,
                this.chunkingOptions,
                this.fixedPageLimit,
                this.pageRanges);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> documentKind = Optional.empty();

        private Optional<String> keyDefinitions = Optional.empty();

        private Optional<Boolean> modelReasoningInsightsEnabled = Optional.empty();

        private Optional<Boolean> advancedMultimodalEnabled = Optional.empty();

        private Optional<Boolean> citationsEnabled = Optional.empty();

        private Optional<Boolean> advancedFigureParsingEnabled = Optional.empty();

        private Optional<ExtractChunkingOptions> chunkingOptions = Optional.empty();

        private Optional<Integer> fixedPageLimit = Optional.empty();

        private Optional<List<ExtractionAdvancedOptionsPageRangesItem>> pageRanges = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExtractionAdvancedOptions other) {
            documentKind(other.getDocumentKind());
            keyDefinitions(other.getKeyDefinitions());
            modelReasoningInsightsEnabled(other.getModelReasoningInsightsEnabled());
            advancedMultimodalEnabled(other.getAdvancedMultimodalEnabled());
            citationsEnabled(other.getCitationsEnabled());
            advancedFigureParsingEnabled(other.getAdvancedFigureParsingEnabled());
            chunkingOptions(other.getChunkingOptions());
            fixedPageLimit(other.getFixedPageLimit());
            pageRanges(other.getPageRanges());
            return this;
        }

        /**
         * <p>The kind of document being processed.</p>
         */
        @JsonSetter(value = "documentKind", nulls = Nulls.SKIP)
        public Builder documentKind(Optional<String> documentKind) {
            this.documentKind = documentKind;
            return this;
        }

        public Builder documentKind(String documentKind) {
            this.documentKind = Optional.ofNullable(documentKind);
            return this;
        }

        /**
         * <p>Custom key definitions for extraction.</p>
         */
        @JsonSetter(value = "keyDefinitions", nulls = Nulls.SKIP)
        public Builder keyDefinitions(Optional<String> keyDefinitions) {
            this.keyDefinitions = keyDefinitions;
            return this;
        }

        public Builder keyDefinitions(String keyDefinitions) {
            this.keyDefinitions = Optional.ofNullable(keyDefinitions);
            return this;
        }

        /**
         * <p>Whether to enable model reasoning insights.</p>
         */
        @JsonSetter(value = "modelReasoningInsightsEnabled", nulls = Nulls.SKIP)
        public Builder modelReasoningInsightsEnabled(Optional<Boolean> modelReasoningInsightsEnabled) {
            this.modelReasoningInsightsEnabled = modelReasoningInsightsEnabled;
            return this;
        }

        public Builder modelReasoningInsightsEnabled(Boolean modelReasoningInsightsEnabled) {
            this.modelReasoningInsightsEnabled = Optional.ofNullable(modelReasoningInsightsEnabled);
            return this;
        }

        /**
         * <p>Whether to enable advanced multimodal features.</p>
         */
        @JsonSetter(value = "advancedMultimodalEnabled", nulls = Nulls.SKIP)
        public Builder advancedMultimodalEnabled(Optional<Boolean> advancedMultimodalEnabled) {
            this.advancedMultimodalEnabled = advancedMultimodalEnabled;
            return this;
        }

        public Builder advancedMultimodalEnabled(Boolean advancedMultimodalEnabled) {
            this.advancedMultimodalEnabled = Optional.ofNullable(advancedMultimodalEnabled);
            return this;
        }

        /**
         * <p>Whether to enable citations in the output.</p>
         */
        @JsonSetter(value = "citationsEnabled", nulls = Nulls.SKIP)
        public Builder citationsEnabled(Optional<Boolean> citationsEnabled) {
            this.citationsEnabled = citationsEnabled;
            return this;
        }

        public Builder citationsEnabled(Boolean citationsEnabled) {
            this.citationsEnabled = Optional.ofNullable(citationsEnabled);
            return this;
        }

        /**
         * <p>Whether to enable advanced figure parsing.</p>
         */
        @JsonSetter(value = "advancedFigureParsingEnabled", nulls = Nulls.SKIP)
        public Builder advancedFigureParsingEnabled(Optional<Boolean> advancedFigureParsingEnabled) {
            this.advancedFigureParsingEnabled = advancedFigureParsingEnabled;
            return this;
        }

        public Builder advancedFigureParsingEnabled(Boolean advancedFigureParsingEnabled) {
            this.advancedFigureParsingEnabled = Optional.ofNullable(advancedFigureParsingEnabled);
            return this;
        }

        @JsonSetter(value = "chunkingOptions", nulls = Nulls.SKIP)
        public Builder chunkingOptions(Optional<ExtractChunkingOptions> chunkingOptions) {
            this.chunkingOptions = chunkingOptions;
            return this;
        }

        public Builder chunkingOptions(ExtractChunkingOptions chunkingOptions) {
            this.chunkingOptions = Optional.ofNullable(chunkingOptions);
            return this;
        }

        /**
         * <p>Optional fixed limit on the number of pages to process. See <a href="/product/page-ranges">Page Ranges</a>.</p>
         */
        @JsonSetter(value = "fixedPageLimit", nulls = Nulls.SKIP)
        public Builder fixedPageLimit(Optional<Integer> fixedPageLimit) {
            this.fixedPageLimit = fixedPageLimit;
            return this;
        }

        public Builder fixedPageLimit(Integer fixedPageLimit) {
            this.fixedPageLimit = Optional.ofNullable(fixedPageLimit);
            return this;
        }

        /**
         * <p>Limit processing to the specified page ranges. See <a href="/product/page-ranges">Page Ranges</a>.</p>
         */
        @JsonSetter(value = "pageRanges", nulls = Nulls.SKIP)
        public Builder pageRanges(Optional<List<ExtractionAdvancedOptionsPageRangesItem>> pageRanges) {
            this.pageRanges = pageRanges;
            return this;
        }

        public Builder pageRanges(List<ExtractionAdvancedOptionsPageRangesItem> pageRanges) {
            this.pageRanges = Optional.ofNullable(pageRanges);
            return this;
        }

        public ExtractionAdvancedOptions build() {
            return new ExtractionAdvancedOptions(
                    documentKind,
                    keyDefinitions,
                    modelReasoningInsightsEnabled,
                    advancedMultimodalEnabled,
                    citationsEnabled,
                    advancedFigureParsingEnabled,
                    chunkingOptions,
                    fixedPageLimit,
                    pageRanges,
                    additionalProperties);
        }
    }
}

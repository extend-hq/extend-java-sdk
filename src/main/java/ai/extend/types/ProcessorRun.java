/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessorRun.Builder.class)
public final class ProcessorRun {
    private final String object;

    private final String id;

    private final String processorId;

    private final String processorVersionId;

    private final String processorName;

    private final ProcessorRunStatus status;

    private final ProcessorOutput output;

    private final Optional<String> failureReason;

    private final Optional<String> failureMessage;

    private final Optional<Map<String, Object>> metadata;

    private final boolean reviewed;

    private final boolean edited;

    private final Map<String, ExtractionOutputEdits> edits;

    private final ProcessorRunType type;

    private final ProcessorRunConfig config;

    private final Optional<ProcessorOutput> initialOutput;

    private final Optional<ProcessorOutput> reviewedOutput;

    private final List<File> files;

    private final List<ProcessorRunMergedProcessorsItem> mergedProcessors;

    private final String url;

    private final Map<String, Object> additionalProperties;

    private ProcessorRun(
            String object,
            String id,
            String processorId,
            String processorVersionId,
            String processorName,
            ProcessorRunStatus status,
            ProcessorOutput output,
            Optional<String> failureReason,
            Optional<String> failureMessage,
            Optional<Map<String, Object>> metadata,
            boolean reviewed,
            boolean edited,
            Map<String, ExtractionOutputEdits> edits,
            ProcessorRunType type,
            ProcessorRunConfig config,
            Optional<ProcessorOutput> initialOutput,
            Optional<ProcessorOutput> reviewedOutput,
            List<File> files,
            List<ProcessorRunMergedProcessorsItem> mergedProcessors,
            String url,
            Map<String, Object> additionalProperties) {
        this.object = object;
        this.id = id;
        this.processorId = processorId;
        this.processorVersionId = processorVersionId;
        this.processorName = processorName;
        this.status = status;
        this.output = output;
        this.failureReason = failureReason;
        this.failureMessage = failureMessage;
        this.metadata = metadata;
        this.reviewed = reviewed;
        this.edited = edited;
        this.edits = edits;
        this.type = type;
        this.config = config;
        this.initialOutput = initialOutput;
        this.reviewedOutput = reviewedOutput;
        this.files = files;
        this.mergedProcessors = mergedProcessors;
        this.url = url;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of response. In this case, it will always be <code>&quot;document_processor_run&quot;</code>.
     */
    @JsonProperty("object")
    public String getObject() {
        return object;
    }

    /**
     * @return The unique identifier for this processor run.
     * <p>Example: <code>&quot;dpr_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The ID of the processor used for this run.
     * <p>Example: <code>&quot;dp_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
     */
    @JsonProperty("processorId")
    public String getProcessorId() {
        return processorId;
    }

    /**
     * @return The ID of the specific processor version used.
     */
    @JsonProperty("processorVersionId")
    public String getProcessorVersionId() {
        return processorVersionId;
    }

    /**
     * @return The name of the processor.
     * <p>Example: <code>&quot;Invoice Processor&quot;</code></p>
     */
    @JsonProperty("processorName")
    public String getProcessorName() {
        return processorName;
    }

    /**
     * @return The current status of the processor run:
     * <ul>
     * <li><code>&quot;PROCESSING&quot;</code> - The processor is currently running</li>
     * <li><code>&quot;PROCESSED&quot;</code> - The processor has completed successfully</li>
     * <li><code>&quot;FAILED&quot;</code> - The processor encountered an error</li>
     * <li><code>&quot;CANCELLED&quot;</code> - The processor run was cancelled</li>
     * </ul>
     */
    @JsonProperty("status")
    public ProcessorRunStatus getStatus() {
        return status;
    }

    /**
     * @return The final output, either reviewed or initial.
     * <p>Conforms to the shape of output types and depends on the processor type and configuration shape.</p>
     */
    @JsonProperty("output")
    public ProcessorOutput getOutput() {
        return output;
    }

    /**
     * @return If the run failed, indicates the reason for failure.
     */
    @JsonProperty("failureReason")
    public Optional<String> getFailureReason() {
        return failureReason;
    }

    /**
     * @return If the run failed, provides a detailed message about the failure.
     */
    @JsonProperty("failureMessage")
    public Optional<String> getFailureMessage() {
        return failureMessage;
    }

    /**
     * @return Any metadata that was provided when creating the processor run.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    /**
     * @return Indicates whether the run has been reviewed.
     */
    @JsonProperty("reviewed")
    public boolean getReviewed() {
        return reviewed;
    }

    /**
     * @return Indicates whether the run results have been edited.
     */
    @JsonProperty("edited")
    public boolean getEdited() {
        return edited;
    }

    @JsonProperty("edits")
    public Map<String, ExtractionOutputEdits> getEdits() {
        return edits;
    }

    /**
     * @return The type of processor:
     * <ul>
     * <li><code>&quot;CLASSIFY&quot;</code> - Classifies documents into categories</li>
     * <li><code>&quot;EXTRACT&quot;</code> - Extracts structured data from documents</li>
     * <li><code>&quot;SPLITTER&quot;</code> - Splits documents into multiple parts</li>
     * </ul>
     */
    @JsonProperty("type")
    public ProcessorRunType getType() {
        return type;
    }

    /**
     * @return The configuration used for this processor run. The type of configuration will match the processor type.
     */
    @JsonProperty("config")
    public ProcessorRunConfig getConfig() {
        return config;
    }

    /**
     * @return The initial output from the processor run. The type of output will match the processor type.
     */
    @JsonProperty("initialOutput")
    public Optional<ProcessorOutput> getInitialOutput() {
        return initialOutput;
    }

    /**
     * @return The output after review, if any.
     */
    @JsonProperty("reviewedOutput")
    public Optional<ProcessorOutput> getReviewedOutput() {
        return reviewedOutput;
    }

    /**
     * @return Details of the processed files.
     * <p>If this was a file generated from a splitter processor, this will be the sub file.</p>
     * <p>See the File object for more details.</p>
     */
    @JsonProperty("files")
    public List<File> getFiles() {
        return files;
    }

    /**
     * @return An array of processors that were merged to create this output. Will be an empty array unless this output was the result of a MergeExtraction step in a workflow.
     */
    @JsonProperty("mergedProcessors")
    public List<ProcessorRunMergedProcessorsItem> getMergedProcessors() {
        return mergedProcessors;
    }

    /**
     * @return The URL to view the processor run.
     */
    @JsonProperty("url")
    public String getUrl() {
        return url;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessorRun && equalTo((ProcessorRun) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessorRun other) {
        return object.equals(other.object)
                && id.equals(other.id)
                && processorId.equals(other.processorId)
                && processorVersionId.equals(other.processorVersionId)
                && processorName.equals(other.processorName)
                && status.equals(other.status)
                && output.equals(other.output)
                && failureReason.equals(other.failureReason)
                && failureMessage.equals(other.failureMessage)
                && metadata.equals(other.metadata)
                && reviewed == other.reviewed
                && edited == other.edited
                && edits.equals(other.edits)
                && type.equals(other.type)
                && config.equals(other.config)
                && initialOutput.equals(other.initialOutput)
                && reviewedOutput.equals(other.reviewedOutput)
                && files.equals(other.files)
                && mergedProcessors.equals(other.mergedProcessors)
                && url.equals(other.url);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.object,
                this.id,
                this.processorId,
                this.processorVersionId,
                this.processorName,
                this.status,
                this.output,
                this.failureReason,
                this.failureMessage,
                this.metadata,
                this.reviewed,
                this.edited,
                this.edits,
                this.type,
                this.config,
                this.initialOutput,
                this.reviewedOutput,
                this.files,
                this.mergedProcessors,
                this.url);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ObjectStage builder() {
        return new Builder();
    }

    public interface ObjectStage {
        /**
         * <p>The type of response. In this case, it will always be <code>&quot;document_processor_run&quot;</code>.</p>
         */
        IdStage object(@NotNull String object);

        Builder from(ProcessorRun other);
    }

    public interface IdStage {
        /**
         * <p>The unique identifier for this processor run.</p>
         * <p>Example: <code>&quot;dpr_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
         */
        ProcessorIdStage id(@NotNull String id);
    }

    public interface ProcessorIdStage {
        /**
         * <p>The ID of the processor used for this run.</p>
         * <p>Example: <code>&quot;dp_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
         */
        ProcessorVersionIdStage processorId(@NotNull String processorId);
    }

    public interface ProcessorVersionIdStage {
        /**
         * <p>The ID of the specific processor version used.</p>
         */
        ProcessorNameStage processorVersionId(@NotNull String processorVersionId);
    }

    public interface ProcessorNameStage {
        /**
         * <p>The name of the processor.</p>
         * <p>Example: <code>&quot;Invoice Processor&quot;</code></p>
         */
        StatusStage processorName(@NotNull String processorName);
    }

    public interface StatusStage {
        /**
         * <p>The current status of the processor run:</p>
         * <ul>
         * <li><code>&quot;PROCESSING&quot;</code> - The processor is currently running</li>
         * <li><code>&quot;PROCESSED&quot;</code> - The processor has completed successfully</li>
         * <li><code>&quot;FAILED&quot;</code> - The processor encountered an error</li>
         * <li><code>&quot;CANCELLED&quot;</code> - The processor run was cancelled</li>
         * </ul>
         */
        OutputStage status(@NotNull ProcessorRunStatus status);
    }

    public interface OutputStage {
        /**
         * <p>The final output, either reviewed or initial.</p>
         * <p>Conforms to the shape of output types and depends on the processor type and configuration shape.</p>
         */
        ReviewedStage output(@NotNull ProcessorOutput output);
    }

    public interface ReviewedStage {
        /**
         * <p>Indicates whether the run has been reviewed.</p>
         */
        EditedStage reviewed(boolean reviewed);
    }

    public interface EditedStage {
        /**
         * <p>Indicates whether the run results have been edited.</p>
         */
        TypeStage edited(boolean edited);
    }

    public interface TypeStage {
        /**
         * <p>The type of processor:</p>
         * <ul>
         * <li><code>&quot;CLASSIFY&quot;</code> - Classifies documents into categories</li>
         * <li><code>&quot;EXTRACT&quot;</code> - Extracts structured data from documents</li>
         * <li><code>&quot;SPLITTER&quot;</code> - Splits documents into multiple parts</li>
         * </ul>
         */
        ConfigStage type(@NotNull ProcessorRunType type);
    }

    public interface ConfigStage {
        /**
         * <p>The configuration used for this processor run. The type of configuration will match the processor type.</p>
         */
        UrlStage config(@NotNull ProcessorRunConfig config);
    }

    public interface UrlStage {
        /**
         * <p>The URL to view the processor run.</p>
         */
        _FinalStage url(@NotNull String url);
    }

    public interface _FinalStage {
        ProcessorRun build();

        /**
         * <p>If the run failed, indicates the reason for failure.</p>
         */
        _FinalStage failureReason(Optional<String> failureReason);

        _FinalStage failureReason(String failureReason);

        /**
         * <p>If the run failed, provides a detailed message about the failure.</p>
         */
        _FinalStage failureMessage(Optional<String> failureMessage);

        _FinalStage failureMessage(String failureMessage);

        /**
         * <p>Any metadata that was provided when creating the processor run.</p>
         */
        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);

        _FinalStage edits(Map<String, ExtractionOutputEdits> edits);

        _FinalStage putAllEdits(Map<String, ExtractionOutputEdits> edits);

        _FinalStage edits(String key, ExtractionOutputEdits value);

        /**
         * <p>The initial output from the processor run. The type of output will match the processor type.</p>
         */
        _FinalStage initialOutput(Optional<ProcessorOutput> initialOutput);

        _FinalStage initialOutput(ProcessorOutput initialOutput);

        /**
         * <p>The output after review, if any.</p>
         */
        _FinalStage reviewedOutput(Optional<ProcessorOutput> reviewedOutput);

        _FinalStage reviewedOutput(ProcessorOutput reviewedOutput);

        /**
         * <p>Details of the processed files.</p>
         * <p>If this was a file generated from a splitter processor, this will be the sub file.</p>
         * <p>See the File object for more details.</p>
         */
        _FinalStage files(List<File> files);

        _FinalStage addFiles(File files);

        _FinalStage addAllFiles(List<File> files);

        /**
         * <p>An array of processors that were merged to create this output. Will be an empty array unless this output was the result of a MergeExtraction step in a workflow.</p>
         */
        _FinalStage mergedProcessors(List<ProcessorRunMergedProcessorsItem> mergedProcessors);

        _FinalStage addMergedProcessors(ProcessorRunMergedProcessorsItem mergedProcessors);

        _FinalStage addAllMergedProcessors(List<ProcessorRunMergedProcessorsItem> mergedProcessors);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ObjectStage,
                    IdStage,
                    ProcessorIdStage,
                    ProcessorVersionIdStage,
                    ProcessorNameStage,
                    StatusStage,
                    OutputStage,
                    ReviewedStage,
                    EditedStage,
                    TypeStage,
                    ConfigStage,
                    UrlStage,
                    _FinalStage {
        private String object;

        private String id;

        private String processorId;

        private String processorVersionId;

        private String processorName;

        private ProcessorRunStatus status;

        private ProcessorOutput output;

        private boolean reviewed;

        private boolean edited;

        private ProcessorRunType type;

        private ProcessorRunConfig config;

        private String url;

        private List<ProcessorRunMergedProcessorsItem> mergedProcessors = new ArrayList<>();

        private List<File> files = new ArrayList<>();

        private Optional<ProcessorOutput> reviewedOutput = Optional.empty();

        private Optional<ProcessorOutput> initialOutput = Optional.empty();

        private Map<String, ExtractionOutputEdits> edits = new LinkedHashMap<>();

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<String> failureMessage = Optional.empty();

        private Optional<String> failureReason = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProcessorRun other) {
            object(other.getObject());
            id(other.getId());
            processorId(other.getProcessorId());
            processorVersionId(other.getProcessorVersionId());
            processorName(other.getProcessorName());
            status(other.getStatus());
            output(other.getOutput());
            failureReason(other.getFailureReason());
            failureMessage(other.getFailureMessage());
            metadata(other.getMetadata());
            reviewed(other.getReviewed());
            edited(other.getEdited());
            edits(other.getEdits());
            type(other.getType());
            config(other.getConfig());
            initialOutput(other.getInitialOutput());
            reviewedOutput(other.getReviewedOutput());
            files(other.getFiles());
            mergedProcessors(other.getMergedProcessors());
            url(other.getUrl());
            return this;
        }

        /**
         * <p>The type of response. In this case, it will always be <code>&quot;document_processor_run&quot;</code>.</p>
         * <p>The type of response. In this case, it will always be <code>&quot;document_processor_run&quot;</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("object")
        public IdStage object(@NotNull String object) {
            this.object = Objects.requireNonNull(object, "object must not be null");
            return this;
        }

        /**
         * <p>The unique identifier for this processor run.</p>
         * <p>Example: <code>&quot;dpr_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
         * <p>The unique identifier for this processor run.</p>
         * <p>Example: <code>&quot;dpr_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public ProcessorIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The ID of the processor used for this run.</p>
         * <p>Example: <code>&quot;dp_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
         * <p>The ID of the processor used for this run.</p>
         * <p>Example: <code>&quot;dp_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("processorId")
        public ProcessorVersionIdStage processorId(@NotNull String processorId) {
            this.processorId = Objects.requireNonNull(processorId, "processorId must not be null");
            return this;
        }

        /**
         * <p>The ID of the specific processor version used.</p>
         * <p>The ID of the specific processor version used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("processorVersionId")
        public ProcessorNameStage processorVersionId(@NotNull String processorVersionId) {
            this.processorVersionId = Objects.requireNonNull(processorVersionId, "processorVersionId must not be null");
            return this;
        }

        /**
         * <p>The name of the processor.</p>
         * <p>Example: <code>&quot;Invoice Processor&quot;</code></p>
         * <p>The name of the processor.</p>
         * <p>Example: <code>&quot;Invoice Processor&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("processorName")
        public StatusStage processorName(@NotNull String processorName) {
            this.processorName = Objects.requireNonNull(processorName, "processorName must not be null");
            return this;
        }

        /**
         * <p>The current status of the processor run:</p>
         * <ul>
         * <li><code>&quot;PROCESSING&quot;</code> - The processor is currently running</li>
         * <li><code>&quot;PROCESSED&quot;</code> - The processor has completed successfully</li>
         * <li><code>&quot;FAILED&quot;</code> - The processor encountered an error</li>
         * <li><code>&quot;CANCELLED&quot;</code> - The processor run was cancelled</li>
         * </ul>
         * <p>The current status of the processor run:</p>
         * <ul>
         * <li><code>&quot;PROCESSING&quot;</code> - The processor is currently running</li>
         * <li><code>&quot;PROCESSED&quot;</code> - The processor has completed successfully</li>
         * <li><code>&quot;FAILED&quot;</code> - The processor encountered an error</li>
         * <li><code>&quot;CANCELLED&quot;</code> - The processor run was cancelled</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public OutputStage status(@NotNull ProcessorRunStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>The final output, either reviewed or initial.</p>
         * <p>Conforms to the shape of output types and depends on the processor type and configuration shape.</p>
         * <p>The final output, either reviewed or initial.</p>
         * <p>Conforms to the shape of output types and depends on the processor type and configuration shape.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("output")
        public ReviewedStage output(@NotNull ProcessorOutput output) {
            this.output = Objects.requireNonNull(output, "output must not be null");
            return this;
        }

        /**
         * <p>Indicates whether the run has been reviewed.</p>
         * <p>Indicates whether the run has been reviewed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("reviewed")
        public EditedStage reviewed(boolean reviewed) {
            this.reviewed = reviewed;
            return this;
        }

        /**
         * <p>Indicates whether the run results have been edited.</p>
         * <p>Indicates whether the run results have been edited.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("edited")
        public TypeStage edited(boolean edited) {
            this.edited = edited;
            return this;
        }

        /**
         * <p>The type of processor:</p>
         * <ul>
         * <li><code>&quot;CLASSIFY&quot;</code> - Classifies documents into categories</li>
         * <li><code>&quot;EXTRACT&quot;</code> - Extracts structured data from documents</li>
         * <li><code>&quot;SPLITTER&quot;</code> - Splits documents into multiple parts</li>
         * </ul>
         * <p>The type of processor:</p>
         * <ul>
         * <li><code>&quot;CLASSIFY&quot;</code> - Classifies documents into categories</li>
         * <li><code>&quot;EXTRACT&quot;</code> - Extracts structured data from documents</li>
         * <li><code>&quot;SPLITTER&quot;</code> - Splits documents into multiple parts</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public ConfigStage type(@NotNull ProcessorRunType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The configuration used for this processor run. The type of configuration will match the processor type.</p>
         * <p>The configuration used for this processor run. The type of configuration will match the processor type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("config")
        public UrlStage config(@NotNull ProcessorRunConfig config) {
            this.config = Objects.requireNonNull(config, "config must not be null");
            return this;
        }

        /**
         * <p>The URL to view the processor run.</p>
         * <p>The URL to view the processor run.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("url")
        public _FinalStage url(@NotNull String url) {
            this.url = Objects.requireNonNull(url, "url must not be null");
            return this;
        }

        /**
         * <p>An array of processors that were merged to create this output. Will be an empty array unless this output was the result of a MergeExtraction step in a workflow.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllMergedProcessors(List<ProcessorRunMergedProcessorsItem> mergedProcessors) {
            this.mergedProcessors.addAll(mergedProcessors);
            return this;
        }

        /**
         * <p>An array of processors that were merged to create this output. Will be an empty array unless this output was the result of a MergeExtraction step in a workflow.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addMergedProcessors(ProcessorRunMergedProcessorsItem mergedProcessors) {
            this.mergedProcessors.add(mergedProcessors);
            return this;
        }

        /**
         * <p>An array of processors that were merged to create this output. Will be an empty array unless this output was the result of a MergeExtraction step in a workflow.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "mergedProcessors", nulls = Nulls.SKIP)
        public _FinalStage mergedProcessors(List<ProcessorRunMergedProcessorsItem> mergedProcessors) {
            this.mergedProcessors.clear();
            this.mergedProcessors.addAll(mergedProcessors);
            return this;
        }

        /**
         * <p>Details of the processed files.</p>
         * <p>If this was a file generated from a splitter processor, this will be the sub file.</p>
         * <p>See the File object for more details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllFiles(List<File> files) {
            this.files.addAll(files);
            return this;
        }

        /**
         * <p>Details of the processed files.</p>
         * <p>If this was a file generated from a splitter processor, this will be the sub file.</p>
         * <p>See the File object for more details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addFiles(File files) {
            this.files.add(files);
            return this;
        }

        /**
         * <p>Details of the processed files.</p>
         * <p>If this was a file generated from a splitter processor, this will be the sub file.</p>
         * <p>See the File object for more details.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "files", nulls = Nulls.SKIP)
        public _FinalStage files(List<File> files) {
            this.files.clear();
            this.files.addAll(files);
            return this;
        }

        /**
         * <p>The output after review, if any.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage reviewedOutput(ProcessorOutput reviewedOutput) {
            this.reviewedOutput = Optional.ofNullable(reviewedOutput);
            return this;
        }

        /**
         * <p>The output after review, if any.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "reviewedOutput", nulls = Nulls.SKIP)
        public _FinalStage reviewedOutput(Optional<ProcessorOutput> reviewedOutput) {
            this.reviewedOutput = reviewedOutput;
            return this;
        }

        /**
         * <p>The initial output from the processor run. The type of output will match the processor type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage initialOutput(ProcessorOutput initialOutput) {
            this.initialOutput = Optional.ofNullable(initialOutput);
            return this;
        }

        /**
         * <p>The initial output from the processor run. The type of output will match the processor type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "initialOutput", nulls = Nulls.SKIP)
        public _FinalStage initialOutput(Optional<ProcessorOutput> initialOutput) {
            this.initialOutput = initialOutput;
            return this;
        }

        @java.lang.Override
        public _FinalStage edits(String key, ExtractionOutputEdits value) {
            this.edits.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllEdits(Map<String, ExtractionOutputEdits> edits) {
            this.edits.putAll(edits);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "edits", nulls = Nulls.SKIP)
        public _FinalStage edits(Map<String, ExtractionOutputEdits> edits) {
            this.edits.clear();
            this.edits.putAll(edits);
            return this;
        }

        /**
         * <p>Any metadata that was provided when creating the processor run.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>Any metadata that was provided when creating the processor run.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>If the run failed, provides a detailed message about the failure.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage failureMessage(String failureMessage) {
            this.failureMessage = Optional.ofNullable(failureMessage);
            return this;
        }

        /**
         * <p>If the run failed, provides a detailed message about the failure.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "failureMessage", nulls = Nulls.SKIP)
        public _FinalStage failureMessage(Optional<String> failureMessage) {
            this.failureMessage = failureMessage;
            return this;
        }

        /**
         * <p>If the run failed, indicates the reason for failure.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage failureReason(String failureReason) {
            this.failureReason = Optional.ofNullable(failureReason);
            return this;
        }

        /**
         * <p>If the run failed, indicates the reason for failure.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "failureReason", nulls = Nulls.SKIP)
        public _FinalStage failureReason(Optional<String> failureReason) {
            this.failureReason = failureReason;
            return this;
        }

        @java.lang.Override
        public ProcessorRun build() {
            return new ProcessorRun(
                    object,
                    id,
                    processorId,
                    processorVersionId,
                    processorName,
                    status,
                    output,
                    failureReason,
                    failureMessage,
                    metadata,
                    reviewed,
                    edited,
                    edits,
                    type,
                    config,
                    initialOutput,
                    reviewedOutput,
                    files,
                    mergedProcessors,
                    url,
                    additionalProperties);
        }
    }
}

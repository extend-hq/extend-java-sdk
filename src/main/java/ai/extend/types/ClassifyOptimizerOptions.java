/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClassifyOptimizerOptions.Builder.class)
public final class ClassifyOptimizerOptions {
    private final Optional<Double> accuracyThreshold;

    private final Optional<Double> maxBatchRuns;

    private final Map<String, Object> additionalProperties;

    private ClassifyOptimizerOptions(
            Optional<Double> accuracyThreshold,
            Optional<Double> maxBatchRuns,
            Map<String, Object> additionalProperties) {
        this.accuracyThreshold = accuracyThreshold;
        this.maxBatchRuns = maxBatchRuns;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Type of optimizer agent
     */
    @JsonProperty("agentType")
    public String getAgentType() {
        return "CLASSIFY_OPTIMIZER";
    }

    /**
     * @return Target accuracy threshold (0-1)
     */
    @JsonProperty("accuracyThreshold")
    public Optional<Double> getAccuracyThreshold() {
        return accuracyThreshold;
    }

    /**
     * @return Maximum number of batch iterations
     */
    @JsonProperty("maxBatchRuns")
    public Optional<Double> getMaxBatchRuns() {
        return maxBatchRuns;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClassifyOptimizerOptions && equalTo((ClassifyOptimizerOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClassifyOptimizerOptions other) {
        return accuracyThreshold.equals(other.accuracyThreshold) && maxBatchRuns.equals(other.maxBatchRuns);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accuracyThreshold, this.maxBatchRuns);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> accuracyThreshold = Optional.empty();

        private Optional<Double> maxBatchRuns = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClassifyOptimizerOptions other) {
            accuracyThreshold(other.getAccuracyThreshold());
            maxBatchRuns(other.getMaxBatchRuns());
            return this;
        }

        /**
         * <p>Target accuracy threshold (0-1)</p>
         */
        @JsonSetter(value = "accuracyThreshold", nulls = Nulls.SKIP)
        public Builder accuracyThreshold(Optional<Double> accuracyThreshold) {
            this.accuracyThreshold = accuracyThreshold;
            return this;
        }

        public Builder accuracyThreshold(Double accuracyThreshold) {
            this.accuracyThreshold = Optional.ofNullable(accuracyThreshold);
            return this;
        }

        /**
         * <p>Maximum number of batch iterations</p>
         */
        @JsonSetter(value = "maxBatchRuns", nulls = Nulls.SKIP)
        public Builder maxBatchRuns(Optional<Double> maxBatchRuns) {
            this.maxBatchRuns = maxBatchRuns;
            return this;
        }

        public Builder maxBatchRuns(Double maxBatchRuns) {
            this.maxBatchRuns = Optional.ofNullable(maxBatchRuns);
            return this;
        }

        public ClassifyOptimizerOptions build() {
            return new ClassifyOptimizerOptions(accuracyThreshold, maxBatchRuns, additionalProperties);
        }
    }
}

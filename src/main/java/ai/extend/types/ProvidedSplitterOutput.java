/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProvidedSplitterOutput.Builder.class)
public final class ProvidedSplitterOutput {
    private final List<ProvidedSplitterOutputSplitsItem> splits;

    private final Map<String, Object> additionalProperties;

    private ProvidedSplitterOutput(
            List<ProvidedSplitterOutputSplitsItem> splits, Map<String, Object> additionalProperties) {
        this.splits = splits;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("splits")
    public List<ProvidedSplitterOutputSplitsItem> getSplits() {
        return splits;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProvidedSplitterOutput && equalTo((ProvidedSplitterOutput) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProvidedSplitterOutput other) {
        return splits.equals(other.splits);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.splits);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<ProvidedSplitterOutputSplitsItem> splits = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProvidedSplitterOutput other) {
            splits(other.getSplits());
            return this;
        }

        @JsonSetter(value = "splits", nulls = Nulls.SKIP)
        public Builder splits(List<ProvidedSplitterOutputSplitsItem> splits) {
            this.splits.clear();
            this.splits.addAll(splits);
            return this;
        }

        public Builder addSplits(ProvidedSplitterOutputSplitsItem splits) {
            this.splits.add(splits);
            return this;
        }

        public Builder addAllSplits(List<ProvidedSplitterOutputSplitsItem> splits) {
            this.splits.addAll(splits);
            return this;
        }

        public ProvidedSplitterOutput build() {
            return new ProvidedSplitterOutput(splits, additionalProperties);
        }
    }
}

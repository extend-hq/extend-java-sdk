/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Insight.Builder.class)
public final class Insight {
    private final String content;

    private final Map<String, Object> additionalProperties;

    private Insight(String content, Map<String, Object> additionalProperties) {
        this.content = content;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of insight. Will always be <code>&quot;reasoning&quot;</code> for now.
     */
    @JsonProperty("type")
    public String getType() {
        return "reasoning";
    }

    /**
     * @return The content of the reasoning insight.
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Insight && equalTo((Insight) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Insight other) {
        return content.equals(other.content);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.content);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContentStage builder() {
        return new Builder();
    }

    public interface ContentStage {
        /**
         * <p>The content of the reasoning insight.</p>
         */
        _FinalStage content(@NotNull String content);

        Builder from(Insight other);
    }

    public interface _FinalStage {
        Insight build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ContentStage, _FinalStage {
        private String content;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Insight other) {
            content(other.getContent());
            return this;
        }

        /**
         * <p>The content of the reasoning insight.</p>
         * <p>The content of the reasoning insight.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public _FinalStage content(@NotNull String content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        @java.lang.Override
        public Insight build() {
            return new Insight(content, additionalProperties);
        }
    }
}

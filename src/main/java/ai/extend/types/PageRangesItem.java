/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PageRangesItem.Builder.class)
public final class PageRangesItem {
    private final Optional<Integer> start;

    private final Optional<Integer> end;

    private final Map<String, Object> additionalProperties;

    private PageRangesItem(Optional<Integer> start, Optional<Integer> end, Map<String, Object> additionalProperties) {
        this.start = start;
        this.end = end;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The start page of the range.
     */
    @JsonProperty("start")
    public Optional<Integer> getStart() {
        return start;
    }

    /**
     * @return The end page of the range.
     */
    @JsonProperty("end")
    public Optional<Integer> getEnd() {
        return end;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PageRangesItem && equalTo((PageRangesItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PageRangesItem other) {
        return start.equals(other.start) && end.equals(other.end);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.start, this.end);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> start = Optional.empty();

        private Optional<Integer> end = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PageRangesItem other) {
            start(other.getStart());
            end(other.getEnd());
            return this;
        }

        /**
         * <p>The start page of the range.</p>
         */
        @JsonSetter(value = "start", nulls = Nulls.SKIP)
        public Builder start(Optional<Integer> start) {
            this.start = start;
            return this;
        }

        public Builder start(Integer start) {
            this.start = Optional.ofNullable(start);
            return this;
        }

        /**
         * <p>The end page of the range.</p>
         */
        @JsonSetter(value = "end", nulls = Nulls.SKIP)
        public Builder end(Optional<Integer> end) {
            this.end = end;
            return this;
        }

        public Builder end(Integer end) {
            this.end = Optional.ofNullable(end);
            return this;
        }

        public PageRangesItem build() {
            return new PageRangesItem(start, end, additionalProperties);
        }
    }
}

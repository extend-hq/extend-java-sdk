/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParseConfigBlockOptionsFigures.Builder.class)
public final class ParseConfigBlockOptionsFigures {
    private final Optional<Boolean> enabled;

    private final Optional<Boolean> figureImageClippingEnabled;

    private final Map<String, Object> additionalProperties;

    private ParseConfigBlockOptionsFigures(
            Optional<Boolean> enabled,
            Optional<Boolean> figureImageClippingEnabled,
            Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.figureImageClippingEnabled = figureImageClippingEnabled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether to include figures in the output.
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return Whether to clip and extract images from figures.
     */
    @JsonProperty("figureImageClippingEnabled")
    public Optional<Boolean> getFigureImageClippingEnabled() {
        return figureImageClippingEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParseConfigBlockOptionsFigures && equalTo((ParseConfigBlockOptionsFigures) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParseConfigBlockOptionsFigures other) {
        return enabled.equals(other.enabled) && figureImageClippingEnabled.equals(other.figureImageClippingEnabled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.enabled, this.figureImageClippingEnabled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enabled = Optional.empty();

        private Optional<Boolean> figureImageClippingEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ParseConfigBlockOptionsFigures other) {
            enabled(other.getEnabled());
            figureImageClippingEnabled(other.getFigureImageClippingEnabled());
            return this;
        }

        /**
         * <p>Whether to include figures in the output.</p>
         */
        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>Whether to clip and extract images from figures.</p>
         */
        @JsonSetter(value = "figureImageClippingEnabled", nulls = Nulls.SKIP)
        public Builder figureImageClippingEnabled(Optional<Boolean> figureImageClippingEnabled) {
            this.figureImageClippingEnabled = figureImageClippingEnabled;
            return this;
        }

        public Builder figureImageClippingEnabled(Boolean figureImageClippingEnabled) {
            this.figureImageClippingEnabled = Optional.ofNullable(figureImageClippingEnabled);
            return this;
        }

        public ParseConfigBlockOptionsFigures build() {
            return new ParseConfigBlockOptionsFigures(enabled, figureImageClippingEnabled, additionalProperties);
        }
    }
}

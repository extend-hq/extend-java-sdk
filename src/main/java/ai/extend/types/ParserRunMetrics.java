/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParserRunMetrics.Builder.class)
public final class ParserRunMetrics {
    private final double processingTimeMs;

    private final double pageCount;

    private final Map<String, Object> additionalProperties;

    private ParserRunMetrics(double processingTimeMs, double pageCount, Map<String, Object> additionalProperties) {
        this.processingTimeMs = processingTimeMs;
        this.pageCount = pageCount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The time taken to process the document in milliseconds.
     */
    @JsonProperty("processingTimeMs")
    public double getProcessingTimeMs() {
        return processingTimeMs;
    }

    /**
     * @return The number of pages in the document.
     */
    @JsonProperty("pageCount")
    public double getPageCount() {
        return pageCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParserRunMetrics && equalTo((ParserRunMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParserRunMetrics other) {
        return processingTimeMs == other.processingTimeMs && pageCount == other.pageCount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.processingTimeMs, this.pageCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProcessingTimeMsStage builder() {
        return new Builder();
    }

    public interface ProcessingTimeMsStage {
        /**
         * <p>The time taken to process the document in milliseconds.</p>
         */
        PageCountStage processingTimeMs(double processingTimeMs);

        Builder from(ParserRunMetrics other);
    }

    public interface PageCountStage {
        /**
         * <p>The number of pages in the document.</p>
         */
        _FinalStage pageCount(double pageCount);
    }

    public interface _FinalStage {
        ParserRunMetrics build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ProcessingTimeMsStage, PageCountStage, _FinalStage {
        private double processingTimeMs;

        private double pageCount;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ParserRunMetrics other) {
            processingTimeMs(other.getProcessingTimeMs());
            pageCount(other.getPageCount());
            return this;
        }

        /**
         * <p>The time taken to process the document in milliseconds.</p>
         * <p>The time taken to process the document in milliseconds.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("processingTimeMs")
        public PageCountStage processingTimeMs(double processingTimeMs) {
            this.processingTimeMs = processingTimeMs;
            return this;
        }

        /**
         * <p>The number of pages in the document.</p>
         * <p>The number of pages in the document.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("pageCount")
        public _FinalStage pageCount(double pageCount) {
            this.pageCount = pageCount;
            return this;
        }

        @java.lang.Override
        public ParserRunMetrics build() {
            return new ParserRunMetrics(processingTimeMs, pageCount, additionalProperties);
        }
    }
}

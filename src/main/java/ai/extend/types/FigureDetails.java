/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FigureDetails.Builder.class)
public final class FigureDetails {
    private final Optional<String> imageUrl;

    private final Optional<FigureDetailsFigureType> figureType;

    private final Map<String, Object> additionalProperties;

    private FigureDetails(
            Optional<String> imageUrl,
            Optional<FigureDetailsFigureType> figureType,
            Map<String, Object> additionalProperties) {
        this.imageUrl = imageUrl;
        this.figureType = figureType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates this is a figure details object
     */
    @JsonProperty("type")
    public String getType() {
        return "figure_details";
    }

    /**
     * @return URL to the clipped/segmented figure image. Only set if the option <code>figureImageClippingEnabled</code> in the input is <code>true</code>, which it is by default.
     */
    @JsonProperty("imageUrl")
    public Optional<String> getImageUrl() {
        return imageUrl;
    }

    /**
     * @return The refined type of figure - only set when figure classification and summarization is enabled. Possible values:
     * <ul>
     * <li><code>image</code>: A photographic image</li>
     * <li><code>chart</code>: A data chart or graph</li>
     * <li><code>diagram</code>: A schematic or diagram</li>
     * <li><code>logo</code>: A company or brand logo</li>
     * <li><code>other</code>: Any other type of figure</li>
     * </ul>
     */
    @JsonProperty("figureType")
    public Optional<FigureDetailsFigureType> getFigureType() {
        return figureType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FigureDetails && equalTo((FigureDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FigureDetails other) {
        return imageUrl.equals(other.imageUrl) && figureType.equals(other.figureType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.imageUrl, this.figureType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> imageUrl = Optional.empty();

        private Optional<FigureDetailsFigureType> figureType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FigureDetails other) {
            imageUrl(other.getImageUrl());
            figureType(other.getFigureType());
            return this;
        }

        /**
         * <p>URL to the clipped/segmented figure image. Only set if the option <code>figureImageClippingEnabled</code> in the input is <code>true</code>, which it is by default.</p>
         */
        @JsonSetter(value = "imageUrl", nulls = Nulls.SKIP)
        public Builder imageUrl(Optional<String> imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }

        public Builder imageUrl(String imageUrl) {
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        /**
         * <p>The refined type of figure - only set when figure classification and summarization is enabled. Possible values:</p>
         * <ul>
         * <li><code>image</code>: A photographic image</li>
         * <li><code>chart</code>: A data chart or graph</li>
         * <li><code>diagram</code>: A schematic or diagram</li>
         * <li><code>logo</code>: A company or brand logo</li>
         * <li><code>other</code>: Any other type of figure</li>
         * </ul>
         */
        @JsonSetter(value = "figureType", nulls = Nulls.SKIP)
        public Builder figureType(Optional<FigureDetailsFigureType> figureType) {
            this.figureType = figureType;
            return this;
        }

        public Builder figureType(FigureDetailsFigureType figureType) {
            this.figureType = Optional.ofNullable(figureType);
            return this;
        }

        public FigureDetails build() {
            return new FigureDetails(imageUrl, figureType, additionalProperties);
        }
    }
}

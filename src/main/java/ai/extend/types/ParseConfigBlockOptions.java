/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParseConfigBlockOptions.Builder.class)
public final class ParseConfigBlockOptions {
    private final Optional<ParseConfigBlockOptionsFigures> figures;

    private final Optional<ParseConfigBlockOptionsTables> tables;

    private final Optional<ParseConfigBlockOptionsText> text;

    private final Map<String, Object> additionalProperties;

    private ParseConfigBlockOptions(
            Optional<ParseConfigBlockOptionsFigures> figures,
            Optional<ParseConfigBlockOptionsTables> tables,
            Optional<ParseConfigBlockOptionsText> text,
            Map<String, Object> additionalProperties) {
        this.figures = figures;
        this.tables = tables;
        this.text = text;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Options for figure blocks.
     */
    @JsonProperty("figures")
    public Optional<ParseConfigBlockOptionsFigures> getFigures() {
        return figures;
    }

    /**
     * @return Options for table blocks.
     */
    @JsonProperty("tables")
    public Optional<ParseConfigBlockOptionsTables> getTables() {
        return tables;
    }

    /**
     * @return Options for text blocks.
     */
    @JsonProperty("text")
    public Optional<ParseConfigBlockOptionsText> getText() {
        return text;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParseConfigBlockOptions && equalTo((ParseConfigBlockOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParseConfigBlockOptions other) {
        return figures.equals(other.figures) && tables.equals(other.tables) && text.equals(other.text);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.figures, this.tables, this.text);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ParseConfigBlockOptionsFigures> figures = Optional.empty();

        private Optional<ParseConfigBlockOptionsTables> tables = Optional.empty();

        private Optional<ParseConfigBlockOptionsText> text = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ParseConfigBlockOptions other) {
            figures(other.getFigures());
            tables(other.getTables());
            text(other.getText());
            return this;
        }

        /**
         * <p>Options for figure blocks.</p>
         */
        @JsonSetter(value = "figures", nulls = Nulls.SKIP)
        public Builder figures(Optional<ParseConfigBlockOptionsFigures> figures) {
            this.figures = figures;
            return this;
        }

        public Builder figures(ParseConfigBlockOptionsFigures figures) {
            this.figures = Optional.ofNullable(figures);
            return this;
        }

        /**
         * <p>Options for table blocks.</p>
         */
        @JsonSetter(value = "tables", nulls = Nulls.SKIP)
        public Builder tables(Optional<ParseConfigBlockOptionsTables> tables) {
            this.tables = tables;
            return this;
        }

        public Builder tables(ParseConfigBlockOptionsTables tables) {
            this.tables = Optional.ofNullable(tables);
            return this;
        }

        /**
         * <p>Options for text blocks.</p>
         */
        @JsonSetter(value = "text", nulls = Nulls.SKIP)
        public Builder text(Optional<ParseConfigBlockOptionsText> text) {
            this.text = text;
            return this;
        }

        public Builder text(ParseConfigBlockOptionsText text) {
            this.text = Optional.ofNullable(text);
            return this;
        }

        public ParseConfigBlockOptions build() {
            return new ParseConfigBlockOptions(figures, tables, text, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParseConfigChunkingStrategy.Builder.class)
public final class ParseConfigChunkingStrategy {
    private final Optional<ParseConfigChunkingStrategyType> type;

    private final Optional<ParseConfigChunkingStrategyOptions> options;

    private final Map<String, Object> additionalProperties;

    private ParseConfigChunkingStrategy(
            Optional<ParseConfigChunkingStrategyType> type,
            Optional<ParseConfigChunkingStrategyOptions> options,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.options = options;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of chunking strategy. Supported values:
     * <ul>
     * <li><code>page</code>: Chunk document by pages.</li>
     * <li><code>document</code>: Entire document is a single chunk. Essentially no chunking.</li>
     * <li><code>section</code>: Split by logical sections. Not supported for target=spatial.</li>
     * </ul>
     */
    @JsonProperty("type")
    public Optional<ParseConfigChunkingStrategyType> getType() {
        return type;
    }

    /**
     * @return Additional options for the chunking strategy.
     */
    @JsonProperty("options")
    public Optional<ParseConfigChunkingStrategyOptions> getOptions() {
        return options;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParseConfigChunkingStrategy && equalTo((ParseConfigChunkingStrategy) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParseConfigChunkingStrategy other) {
        return type.equals(other.type) && options.equals(other.options);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.options);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ParseConfigChunkingStrategyType> type = Optional.empty();

        private Optional<ParseConfigChunkingStrategyOptions> options = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ParseConfigChunkingStrategy other) {
            type(other.getType());
            options(other.getOptions());
            return this;
        }

        /**
         * <p>The type of chunking strategy. Supported values:</p>
         * <ul>
         * <li><code>page</code>: Chunk document by pages.</li>
         * <li><code>document</code>: Entire document is a single chunk. Essentially no chunking.</li>
         * <li><code>section</code>: Split by logical sections. Not supported for target=spatial.</li>
         * </ul>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<ParseConfigChunkingStrategyType> type) {
            this.type = type;
            return this;
        }

        public Builder type(ParseConfigChunkingStrategyType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>Additional options for the chunking strategy.</p>
         */
        @JsonSetter(value = "options", nulls = Nulls.SKIP)
        public Builder options(Optional<ParseConfigChunkingStrategyOptions> options) {
            this.options = options;
            return this;
        }

        public Builder options(ParseConfigChunkingStrategyOptions options) {
            this.options = Optional.ofNullable(options);
            return this;
        }

        public ParseConfigChunkingStrategy build() {
            return new ParseConfigChunkingStrategy(type, options, additionalProperties);
        }
    }
}

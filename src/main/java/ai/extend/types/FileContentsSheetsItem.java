/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FileContentsSheetsItem.Builder.class)
public final class FileContentsSheetsItem {
    private final String sheetName;

    private final Optional<String> rawText;

    private final Map<String, Object> additionalProperties;

    private FileContentsSheetsItem(
            String sheetName, Optional<String> rawText, Map<String, Object> additionalProperties) {
        this.sheetName = sheetName;
        this.rawText = rawText;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the sheet.
     */
    @JsonProperty("sheetName")
    public String getSheetName() {
        return sheetName;
    }

    /**
     * @return The raw text content of the sheet.
     */
    @JsonProperty("rawText")
    public Optional<String> getRawText() {
        return rawText;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FileContentsSheetsItem && equalTo((FileContentsSheetsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FileContentsSheetsItem other) {
        return sheetName.equals(other.sheetName) && rawText.equals(other.rawText);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sheetName, this.rawText);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SheetNameStage builder() {
        return new Builder();
    }

    public interface SheetNameStage {
        /**
         * <p>The name of the sheet.</p>
         */
        _FinalStage sheetName(@NotNull String sheetName);

        Builder from(FileContentsSheetsItem other);
    }

    public interface _FinalStage {
        FileContentsSheetsItem build();

        /**
         * <p>The raw text content of the sheet.</p>
         */
        _FinalStage rawText(Optional<String> rawText);

        _FinalStage rawText(String rawText);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SheetNameStage, _FinalStage {
        private String sheetName;

        private Optional<String> rawText = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FileContentsSheetsItem other) {
            sheetName(other.getSheetName());
            rawText(other.getRawText());
            return this;
        }

        /**
         * <p>The name of the sheet.</p>
         * <p>The name of the sheet.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sheetName")
        public _FinalStage sheetName(@NotNull String sheetName) {
            this.sheetName = Objects.requireNonNull(sheetName, "sheetName must not be null");
            return this;
        }

        /**
         * <p>The raw text content of the sheet.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage rawText(String rawText) {
            this.rawText = Optional.ofNullable(rawText);
            return this;
        }

        /**
         * <p>The raw text content of the sheet.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "rawText", nulls = Nulls.SKIP)
        public _FinalStage rawText(Optional<String> rawText) {
            this.rawText = rawText;
            return this;
        }

        @java.lang.Override
        public FileContentsSheetsItem build() {
            return new FileContentsSheetsItem(sheetName, rawText, additionalProperties);
        }
    }
}

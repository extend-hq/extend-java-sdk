/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FileContents.Builder.class)
public final class FileContents {
    private final Optional<String> rawText;

    private final Optional<String> markdown;

    private final Optional<List<FileContentsPagesItem>> pages;

    private final Optional<List<FileContentsSheetsItem>> sheets;

    private final Map<String, Object> additionalProperties;

    private FileContents(
            Optional<String> rawText,
            Optional<String> markdown,
            Optional<List<FileContentsPagesItem>> pages,
            Optional<List<FileContentsSheetsItem>> sheets,
            Map<String, Object> additionalProperties) {
        this.rawText = rawText;
        this.markdown = markdown;
        this.pages = pages;
        this.sheets = sheets;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The raw text content of the file. This is included for all file types if the <code>rawText</code> query parameter is set to true in the endpoint request.
     */
    @JsonProperty("rawText")
    public Optional<String> getRawText() {
        return rawText;
    }

    /**
     * @return Cleaned and structured markdown content of the entire file. Available for PDF and IMG file types. Only included if the <code>markdown</code> query parameter is set to true in the endpoint request.
     */
    @JsonProperty("markdown")
    public Optional<String> getMarkdown() {
        return markdown;
    }

    @JsonProperty("pages")
    public Optional<List<FileContentsPagesItem>> getPages() {
        return pages;
    }

    @JsonProperty("sheets")
    public Optional<List<FileContentsSheetsItem>> getSheets() {
        return sheets;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FileContents && equalTo((FileContents) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FileContents other) {
        return rawText.equals(other.rawText)
                && markdown.equals(other.markdown)
                && pages.equals(other.pages)
                && sheets.equals(other.sheets);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.rawText, this.markdown, this.pages, this.sheets);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> rawText = Optional.empty();

        private Optional<String> markdown = Optional.empty();

        private Optional<List<FileContentsPagesItem>> pages = Optional.empty();

        private Optional<List<FileContentsSheetsItem>> sheets = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FileContents other) {
            rawText(other.getRawText());
            markdown(other.getMarkdown());
            pages(other.getPages());
            sheets(other.getSheets());
            return this;
        }

        /**
         * <p>The raw text content of the file. This is included for all file types if the <code>rawText</code> query parameter is set to true in the endpoint request.</p>
         */
        @JsonSetter(value = "rawText", nulls = Nulls.SKIP)
        public Builder rawText(Optional<String> rawText) {
            this.rawText = rawText;
            return this;
        }

        public Builder rawText(String rawText) {
            this.rawText = Optional.ofNullable(rawText);
            return this;
        }

        /**
         * <p>Cleaned and structured markdown content of the entire file. Available for PDF and IMG file types. Only included if the <code>markdown</code> query parameter is set to true in the endpoint request.</p>
         */
        @JsonSetter(value = "markdown", nulls = Nulls.SKIP)
        public Builder markdown(Optional<String> markdown) {
            this.markdown = markdown;
            return this;
        }

        public Builder markdown(String markdown) {
            this.markdown = Optional.ofNullable(markdown);
            return this;
        }

        @JsonSetter(value = "pages", nulls = Nulls.SKIP)
        public Builder pages(Optional<List<FileContentsPagesItem>> pages) {
            this.pages = pages;
            return this;
        }

        public Builder pages(List<FileContentsPagesItem> pages) {
            this.pages = Optional.ofNullable(pages);
            return this;
        }

        @JsonSetter(value = "sheets", nulls = Nulls.SKIP)
        public Builder sheets(Optional<List<FileContentsSheetsItem>> sheets) {
            this.sheets = sheets;
            return this;
        }

        public Builder sheets(List<FileContentsSheetsItem> sheets) {
            this.sheets = Optional.ofNullable(sheets);
            return this;
        }

        public FileContents build() {
            return new FileContents(rawText, markdown, pages, sheets, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParserRunStatus.Builder.class)
public final class ParserRunStatus {
    private final String id;

    private final ParserRunStatusStatus status;

    private final Optional<String> failureReason;

    private final Map<String, Object> additionalProperties;

    private ParserRunStatus(
            String id,
            ParserRunStatusStatus status,
            Optional<String> failureReason,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.status = status;
        this.failureReason = failureReason;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique identifier for the parser run. Will always start with <code>&quot;parser_run_&quot;</code>
     * <p>Example: <code>&quot;parser_run_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The status of the parser run.
     */
    @JsonProperty("status")
    public ParserRunStatusStatus getStatus() {
        return status;
    }

    /**
     * @return The reason for failure if status is &quot;FAILED&quot;.
     */
    @JsonProperty("failureReason")
    public Optional<String> getFailureReason() {
        return failureReason;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParserRunStatus && equalTo((ParserRunStatus) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParserRunStatus other) {
        return id.equals(other.id) && status.equals(other.status) && failureReason.equals(other.failureReason);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.status, this.failureReason);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>A unique identifier for the parser run. Will always start with <code>&quot;parser_run_&quot;</code></p>
         * <p>Example: <code>&quot;parser_run_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
         */
        StatusStage id(@NotNull String id);

        Builder from(ParserRunStatus other);
    }

    public interface StatusStage {
        /**
         * <p>The status of the parser run.</p>
         */
        _FinalStage status(@NotNull ParserRunStatusStatus status);
    }

    public interface _FinalStage {
        ParserRunStatus build();

        /**
         * <p>The reason for failure if status is &quot;FAILED&quot;.</p>
         */
        _FinalStage failureReason(Optional<String> failureReason);

        _FinalStage failureReason(String failureReason);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, StatusStage, _FinalStage {
        private String id;

        private ParserRunStatusStatus status;

        private Optional<String> failureReason = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ParserRunStatus other) {
            id(other.getId());
            status(other.getStatus());
            failureReason(other.getFailureReason());
            return this;
        }

        /**
         * <p>A unique identifier for the parser run. Will always start with <code>&quot;parser_run_&quot;</code></p>
         * <p>Example: <code>&quot;parser_run_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
         * <p>A unique identifier for the parser run. Will always start with <code>&quot;parser_run_&quot;</code></p>
         * <p>Example: <code>&quot;parser_run_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public StatusStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The status of the parser run.</p>
         * <p>The status of the parser run.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull ParserRunStatusStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>The reason for failure if status is &quot;FAILED&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage failureReason(String failureReason) {
            this.failureReason = Optional.ofNullable(failureReason);
            return this;
        }

        /**
         * <p>The reason for failure if status is &quot;FAILED&quot;.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "failureReason", nulls = Nulls.SKIP)
        public _FinalStage failureReason(Optional<String> failureReason) {
            this.failureReason = failureReason;
            return this;
        }

        @java.lang.Override
        public ParserRunStatus build() {
            return new ParserRunStatus(id, status, failureReason, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FileMetadata.Builder.class)
public final class FileMetadata {
    private final Optional<Double> pageCount;

    private final Optional<FileMetadataParentSplit> parentSplit;

    private final Map<String, Object> additionalProperties;

    private FileMetadata(
            Optional<Double> pageCount,
            Optional<FileMetadataParentSplit> parentSplit,
            Map<String, Object> additionalProperties) {
        this.pageCount = pageCount;
        this.parentSplit = parentSplit;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The number of pages in the file. This is only set for PDF/DOCX files.
     */
    @JsonProperty("pageCount")
    public Optional<Double> getPageCount() {
        return pageCount;
    }

    /**
     * @return The split metadata details. Only included if this file is a derivative of another file, for instance if it was created via a Splitter in a workflow.
     */
    @JsonProperty("parentSplit")
    public Optional<FileMetadataParentSplit> getParentSplit() {
        return parentSplit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FileMetadata && equalTo((FileMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FileMetadata other) {
        return pageCount.equals(other.pageCount) && parentSplit.equals(other.parentSplit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pageCount, this.parentSplit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> pageCount = Optional.empty();

        private Optional<FileMetadataParentSplit> parentSplit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FileMetadata other) {
            pageCount(other.getPageCount());
            parentSplit(other.getParentSplit());
            return this;
        }

        /**
         * <p>The number of pages in the file. This is only set for PDF/DOCX files.</p>
         */
        @JsonSetter(value = "pageCount", nulls = Nulls.SKIP)
        public Builder pageCount(Optional<Double> pageCount) {
            this.pageCount = pageCount;
            return this;
        }

        public Builder pageCount(Double pageCount) {
            this.pageCount = Optional.ofNullable(pageCount);
            return this;
        }

        /**
         * <p>The split metadata details. Only included if this file is a derivative of another file, for instance if it was created via a Splitter in a workflow.</p>
         */
        @JsonSetter(value = "parentSplit", nulls = Nulls.SKIP)
        public Builder parentSplit(Optional<FileMetadataParentSplit> parentSplit) {
            this.parentSplit = parentSplit;
            return this;
        }

        public Builder parentSplit(FileMetadataParentSplit parentSplit) {
            this.parentSplit = Optional.ofNullable(parentSplit);
            return this;
        }

        public FileMetadata build() {
            return new FileMetadata(pageCount, parentSplit, additionalProperties);
        }
    }
}

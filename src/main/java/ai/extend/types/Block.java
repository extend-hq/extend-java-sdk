/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Block.Builder.class)
public final class Block {
    private final String object;

    private final String id;

    private final BlockType type;

    private final String content;

    private final BlockDetails details;

    private final BlockMetadata metadata;

    private final List<BlockPolygonItem> polygon;

    private final BlockBoundingBox boundingBox;

    private final Map<String, Object> additionalProperties;

    private Block(
            String object,
            String id,
            BlockType type,
            String content,
            BlockDetails details,
            BlockMetadata metadata,
            List<BlockPolygonItem> polygon,
            BlockBoundingBox boundingBox,
            Map<String, Object> additionalProperties) {
        this.object = object;
        this.id = id;
        this.type = type;
        this.content = content;
        this.details = details;
        this.metadata = metadata;
        this.polygon = polygon;
        this.boundingBox = boundingBox;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of object. In this case, it will always be <code>&quot;block&quot;</code>.
     */
    @JsonProperty("object")
    public String getObject() {
        return object;
    }

    /**
     * @return A unique identifier for the block, deterministically generated as a hash of the block content.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The type of block:
     * <ul>
     * <li><code>&quot;text&quot;</code> - Regular text content</li>
     * <li><code>&quot;heading&quot;</code> - Section or document headings</li>
     * <li><code>&quot;section_heading&quot;</code> - Subsection headings</li>
     * <li><code>&quot;table&quot;</code> - Tabular data with rows and columns</li>
     * <li><code>&quot;table_head&quot;</code> - Table header cells</li>
     * <li><code>&quot;table_cell&quot;</code> - Table body cells</li>
     * <li><code>&quot;figure&quot;</code> - Images, charts, diagrams, or logos</li>
     * </ul>
     */
    @JsonProperty("type")
    public BlockType getType() {
        return type;
    }

    /**
     * @return The textual content of the block formatted based on the target format.
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    /**
     * @return Additional details specific to the block type. The schema depends on the block type.
     */
    @JsonProperty("details")
    public BlockDetails getDetails() {
        return details;
    }

    /**
     * @return Metadata about the block.
     */
    @JsonProperty("metadata")
    public BlockMetadata getMetadata() {
        return metadata;
    }

    /**
     * @return An array of points defining the polygon that bounds the block.
     */
    @JsonProperty("polygon")
    public List<BlockPolygonItem> getPolygon() {
        return polygon;
    }

    /**
     * @return A simplified bounding box for the block.
     */
    @JsonProperty("boundingBox")
    public BlockBoundingBox getBoundingBox() {
        return boundingBox;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Block && equalTo((Block) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Block other) {
        return object.equals(other.object)
                && id.equals(other.id)
                && type.equals(other.type)
                && content.equals(other.content)
                && details.equals(other.details)
                && metadata.equals(other.metadata)
                && polygon.equals(other.polygon)
                && boundingBox.equals(other.boundingBox);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.object,
                this.id,
                this.type,
                this.content,
                this.details,
                this.metadata,
                this.polygon,
                this.boundingBox);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ObjectStage builder() {
        return new Builder();
    }

    public interface ObjectStage {
        /**
         * <p>The type of object. In this case, it will always be <code>&quot;block&quot;</code>.</p>
         */
        IdStage object(@NotNull String object);

        Builder from(Block other);
    }

    public interface IdStage {
        /**
         * <p>A unique identifier for the block, deterministically generated as a hash of the block content.</p>
         */
        TypeStage id(@NotNull String id);
    }

    public interface TypeStage {
        /**
         * <p>The type of block:</p>
         * <ul>
         * <li><code>&quot;text&quot;</code> - Regular text content</li>
         * <li><code>&quot;heading&quot;</code> - Section or document headings</li>
         * <li><code>&quot;section_heading&quot;</code> - Subsection headings</li>
         * <li><code>&quot;table&quot;</code> - Tabular data with rows and columns</li>
         * <li><code>&quot;table_head&quot;</code> - Table header cells</li>
         * <li><code>&quot;table_cell&quot;</code> - Table body cells</li>
         * <li><code>&quot;figure&quot;</code> - Images, charts, diagrams, or logos</li>
         * </ul>
         */
        ContentStage type(@NotNull BlockType type);
    }

    public interface ContentStage {
        /**
         * <p>The textual content of the block formatted based on the target format.</p>
         */
        DetailsStage content(@NotNull String content);
    }

    public interface DetailsStage {
        /**
         * <p>Additional details specific to the block type. The schema depends on the block type.</p>
         */
        MetadataStage details(@NotNull BlockDetails details);
    }

    public interface MetadataStage {
        /**
         * <p>Metadata about the block.</p>
         */
        BoundingBoxStage metadata(@NotNull BlockMetadata metadata);
    }

    public interface BoundingBoxStage {
        /**
         * <p>A simplified bounding box for the block.</p>
         */
        _FinalStage boundingBox(@NotNull BlockBoundingBox boundingBox);
    }

    public interface _FinalStage {
        Block build();

        /**
         * <p>An array of points defining the polygon that bounds the block.</p>
         */
        _FinalStage polygon(List<BlockPolygonItem> polygon);

        _FinalStage addPolygon(BlockPolygonItem polygon);

        _FinalStage addAllPolygon(List<BlockPolygonItem> polygon);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ObjectStage,
                    IdStage,
                    TypeStage,
                    ContentStage,
                    DetailsStage,
                    MetadataStage,
                    BoundingBoxStage,
                    _FinalStage {
        private String object;

        private String id;

        private BlockType type;

        private String content;

        private BlockDetails details;

        private BlockMetadata metadata;

        private BlockBoundingBox boundingBox;

        private List<BlockPolygonItem> polygon = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Block other) {
            object(other.getObject());
            id(other.getId());
            type(other.getType());
            content(other.getContent());
            details(other.getDetails());
            metadata(other.getMetadata());
            polygon(other.getPolygon());
            boundingBox(other.getBoundingBox());
            return this;
        }

        /**
         * <p>The type of object. In this case, it will always be <code>&quot;block&quot;</code>.</p>
         * <p>The type of object. In this case, it will always be <code>&quot;block&quot;</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("object")
        public IdStage object(@NotNull String object) {
            this.object = Objects.requireNonNull(object, "object must not be null");
            return this;
        }

        /**
         * <p>A unique identifier for the block, deterministically generated as a hash of the block content.</p>
         * <p>A unique identifier for the block, deterministically generated as a hash of the block content.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public TypeStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The type of block:</p>
         * <ul>
         * <li><code>&quot;text&quot;</code> - Regular text content</li>
         * <li><code>&quot;heading&quot;</code> - Section or document headings</li>
         * <li><code>&quot;section_heading&quot;</code> - Subsection headings</li>
         * <li><code>&quot;table&quot;</code> - Tabular data with rows and columns</li>
         * <li><code>&quot;table_head&quot;</code> - Table header cells</li>
         * <li><code>&quot;table_cell&quot;</code> - Table body cells</li>
         * <li><code>&quot;figure&quot;</code> - Images, charts, diagrams, or logos</li>
         * </ul>
         * <p>The type of block:</p>
         * <ul>
         * <li><code>&quot;text&quot;</code> - Regular text content</li>
         * <li><code>&quot;heading&quot;</code> - Section or document headings</li>
         * <li><code>&quot;section_heading&quot;</code> - Subsection headings</li>
         * <li><code>&quot;table&quot;</code> - Tabular data with rows and columns</li>
         * <li><code>&quot;table_head&quot;</code> - Table header cells</li>
         * <li><code>&quot;table_cell&quot;</code> - Table body cells</li>
         * <li><code>&quot;figure&quot;</code> - Images, charts, diagrams, or logos</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public ContentStage type(@NotNull BlockType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The textual content of the block formatted based on the target format.</p>
         * <p>The textual content of the block formatted based on the target format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public DetailsStage content(@NotNull String content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        /**
         * <p>Additional details specific to the block type. The schema depends on the block type.</p>
         * <p>Additional details specific to the block type. The schema depends on the block type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("details")
        public MetadataStage details(@NotNull BlockDetails details) {
            this.details = Objects.requireNonNull(details, "details must not be null");
            return this;
        }

        /**
         * <p>Metadata about the block.</p>
         * <p>Metadata about the block.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("metadata")
        public BoundingBoxStage metadata(@NotNull BlockMetadata metadata) {
            this.metadata = Objects.requireNonNull(metadata, "metadata must not be null");
            return this;
        }

        /**
         * <p>A simplified bounding box for the block.</p>
         * <p>A simplified bounding box for the block.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("boundingBox")
        public _FinalStage boundingBox(@NotNull BlockBoundingBox boundingBox) {
            this.boundingBox = Objects.requireNonNull(boundingBox, "boundingBox must not be null");
            return this;
        }

        /**
         * <p>An array of points defining the polygon that bounds the block.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllPolygon(List<BlockPolygonItem> polygon) {
            this.polygon.addAll(polygon);
            return this;
        }

        /**
         * <p>An array of points defining the polygon that bounds the block.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addPolygon(BlockPolygonItem polygon) {
            this.polygon.add(polygon);
            return this;
        }

        /**
         * <p>An array of points defining the polygon that bounds the block.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "polygon", nulls = Nulls.SKIP)
        public _FinalStage polygon(List<BlockPolygonItem> polygon) {
            this.polygon.clear();
            this.polygon.addAll(polygon);
            return this;
        }

        @java.lang.Override
        public Block build() {
            return new Block(object, id, type, content, details, metadata, polygon, boundingBox, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OptimizerRunMetrics.Builder.class)
public final class OptimizerRunMetrics {
    private final double overallAccuracy;

    private final List<OptimizerRunMetricsFieldsItem> fields;

    private final Map<String, Object> additionalProperties;

    private OptimizerRunMetrics(
            double overallAccuracy,
            List<OptimizerRunMetricsFieldsItem> fields,
            Map<String, Object> additionalProperties) {
        this.overallAccuracy = overallAccuracy;
        this.fields = fields;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Overall accuracy across all fields/classifications
     */
    @JsonProperty("overallAccuracy")
    public double getOverallAccuracy() {
        return overallAccuracy;
    }

    /**
     * @return Per-field or per-classification accuracy metrics.
     * For <code>EXTRACT_OPTIMIZER</code>: each entry represents a field in the schema.
     * For <code>CLASSIFY_OPTIMIZER</code>: each entry represents a classification category.
     */
    @JsonProperty("fields")
    public List<OptimizerRunMetricsFieldsItem> getFields() {
        return fields;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OptimizerRunMetrics && equalTo((OptimizerRunMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OptimizerRunMetrics other) {
        return overallAccuracy == other.overallAccuracy && fields.equals(other.fields);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.overallAccuracy, this.fields);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OverallAccuracyStage builder() {
        return new Builder();
    }

    public interface OverallAccuracyStage {
        /**
         * <p>Overall accuracy across all fields/classifications</p>
         */
        _FinalStage overallAccuracy(double overallAccuracy);

        Builder from(OptimizerRunMetrics other);
    }

    public interface _FinalStage {
        OptimizerRunMetrics build();

        /**
         * <p>Per-field or per-classification accuracy metrics.
         * For <code>EXTRACT_OPTIMIZER</code>: each entry represents a field in the schema.
         * For <code>CLASSIFY_OPTIMIZER</code>: each entry represents a classification category.</p>
         */
        _FinalStage fields(List<OptimizerRunMetricsFieldsItem> fields);

        _FinalStage addFields(OptimizerRunMetricsFieldsItem fields);

        _FinalStage addAllFields(List<OptimizerRunMetricsFieldsItem> fields);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OverallAccuracyStage, _FinalStage {
        private double overallAccuracy;

        private List<OptimizerRunMetricsFieldsItem> fields = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OptimizerRunMetrics other) {
            overallAccuracy(other.getOverallAccuracy());
            fields(other.getFields());
            return this;
        }

        /**
         * <p>Overall accuracy across all fields/classifications</p>
         * <p>Overall accuracy across all fields/classifications</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("overallAccuracy")
        public _FinalStage overallAccuracy(double overallAccuracy) {
            this.overallAccuracy = overallAccuracy;
            return this;
        }

        /**
         * <p>Per-field or per-classification accuracy metrics.
         * For <code>EXTRACT_OPTIMIZER</code>: each entry represents a field in the schema.
         * For <code>CLASSIFY_OPTIMIZER</code>: each entry represents a classification category.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllFields(List<OptimizerRunMetricsFieldsItem> fields) {
            this.fields.addAll(fields);
            return this;
        }

        /**
         * <p>Per-field or per-classification accuracy metrics.
         * For <code>EXTRACT_OPTIMIZER</code>: each entry represents a field in the schema.
         * For <code>CLASSIFY_OPTIMIZER</code>: each entry represents a classification category.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addFields(OptimizerRunMetricsFieldsItem fields) {
            this.fields.add(fields);
            return this;
        }

        /**
         * <p>Per-field or per-classification accuracy metrics.
         * For <code>EXTRACT_OPTIMIZER</code>: each entry represents a field in the schema.
         * For <code>CLASSIFY_OPTIMIZER</code>: each entry represents a classification category.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public _FinalStage fields(List<OptimizerRunMetricsFieldsItem> fields) {
            this.fields.clear();
            this.fields.addAll(fields);
            return this;
        }

        @java.lang.Override
        public OptimizerRunMetrics build() {
            return new OptimizerRunMetrics(overallAccuracy, fields, additionalProperties);
        }
    }
}

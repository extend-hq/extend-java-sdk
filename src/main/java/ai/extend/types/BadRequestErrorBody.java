/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BadRequestErrorBody.Builder.class)
public final class BadRequestErrorBody implements IError {
    private final Optional<Boolean> success;

    private final Optional<String> error;

    private final Optional<BadRequestErrorBodyCode> code;

    private final Map<String, Object> additionalProperties;

    private BadRequestErrorBody(
            Optional<Boolean> success,
            Optional<String> error,
            Optional<BadRequestErrorBodyCode> code,
            Map<String, Object> additionalProperties) {
        this.success = success;
        this.error = error;
        this.code = code;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("success")
    @java.lang.Override
    public Optional<Boolean> getSuccess() {
        return success;
    }

    /**
     * @return Error message
     */
    @JsonProperty("error")
    @java.lang.Override
    public Optional<String> getError() {
        return error;
    }

    @JsonProperty("code")
    public Optional<BadRequestErrorBodyCode> getCode() {
        return code;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BadRequestErrorBody && equalTo((BadRequestErrorBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BadRequestErrorBody other) {
        return success.equals(other.success) && error.equals(other.error) && code.equals(other.code);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.success, this.error, this.code);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> success = Optional.empty();

        private Optional<String> error = Optional.empty();

        private Optional<BadRequestErrorBodyCode> code = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BadRequestErrorBody other) {
            success(other.getSuccess());
            error(other.getError());
            code(other.getCode());
            return this;
        }

        @JsonSetter(value = "success", nulls = Nulls.SKIP)
        public Builder success(Optional<Boolean> success) {
            this.success = success;
            return this;
        }

        public Builder success(Boolean success) {
            this.success = Optional.ofNullable(success);
            return this;
        }

        /**
         * <p>Error message</p>
         */
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public Builder error(Optional<String> error) {
            this.error = error;
            return this;
        }

        public Builder error(String error) {
            this.error = Optional.ofNullable(error);
            return this;
        }

        @JsonSetter(value = "code", nulls = Nulls.SKIP)
        public Builder code(Optional<BadRequestErrorBodyCode> code) {
            this.code = code;
            return this;
        }

        public Builder code(BadRequestErrorBodyCode code) {
            this.code = Optional.ofNullable(code);
            return this;
        }

        public BadRequestErrorBody build() {
            return new BadRequestErrorBody(success, error, code, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TableDetails.Builder.class)
public final class TableDetails {
    private final int rowCount;

    private final int columnCount;

    private final Map<String, Object> additionalProperties;

    private TableDetails(int rowCount, int columnCount, Map<String, Object> additionalProperties) {
        this.rowCount = rowCount;
        this.columnCount = columnCount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates this is a table details object
     */
    @JsonProperty("type")
    public String getType() {
        return "table_details";
    }

    /**
     * @return The number of rows in the table
     */
    @JsonProperty("rowCount")
    public int getRowCount() {
        return rowCount;
    }

    /**
     * @return The number of columns in the table
     */
    @JsonProperty("columnCount")
    public int getColumnCount() {
        return columnCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TableDetails && equalTo((TableDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TableDetails other) {
        return rowCount == other.rowCount && columnCount == other.columnCount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.rowCount, this.columnCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RowCountStage builder() {
        return new Builder();
    }

    public interface RowCountStage {
        /**
         * <p>The number of rows in the table</p>
         */
        ColumnCountStage rowCount(int rowCount);

        Builder from(TableDetails other);
    }

    public interface ColumnCountStage {
        /**
         * <p>The number of columns in the table</p>
         */
        _FinalStage columnCount(int columnCount);
    }

    public interface _FinalStage {
        TableDetails build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RowCountStage, ColumnCountStage, _FinalStage {
        private int rowCount;

        private int columnCount;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TableDetails other) {
            rowCount(other.getRowCount());
            columnCount(other.getColumnCount());
            return this;
        }

        /**
         * <p>The number of rows in the table</p>
         * <p>The number of rows in the table</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("rowCount")
        public ColumnCountStage rowCount(int rowCount) {
            this.rowCount = rowCount;
            return this;
        }

        /**
         * <p>The number of columns in the table</p>
         * <p>The number of columns in the table</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("columnCount")
        public _FinalStage columnCount(int columnCount) {
            this.columnCount = columnCount;
            return this;
        }

        @java.lang.Override
        public TableDetails build() {
            return new TableDetails(rowCount, columnCount, additionalProperties);
        }
    }
}

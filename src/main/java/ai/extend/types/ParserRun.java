/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParserRun.Builder.class)
public final class ParserRun {
    private final String id;

    private final String fileId;

    private final List<Chunk> chunks;

    private final ParserRunStatusEnum status;

    private final Optional<String> failureReason;

    private final ParserRunMetrics metrics;

    private final ParseConfig config;

    private final Map<String, Object> additionalProperties;

    private ParserRun(
            String id,
            String fileId,
            List<Chunk> chunks,
            ParserRunStatusEnum status,
            Optional<String> failureReason,
            ParserRunMetrics metrics,
            ParseConfig config,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.fileId = fileId;
        this.chunks = chunks;
        this.status = status;
        this.failureReason = failureReason;
        this.metrics = metrics;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique identifier for the parser run. Will always start with <code>&quot;parser_run_&quot;</code>
     * <p>Example: <code>&quot;parser_run_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The identifier of the file that was parsed. This can be used as a parameter to other Extend endpoints, such as processor runs.
     */
    @JsonProperty("fileId")
    public String getFileId() {
        return fileId;
    }

    /**
     * @return An array of chunks that were parsed from the file.
     */
    @JsonProperty("chunks")
    public List<Chunk> getChunks() {
        return chunks;
    }

    /**
     * @return The status of the parser run:
     * <ul>
     * <li><code>&quot;PROCESSED&quot;</code> - The file was successfully processed</li>
     * <li><code>&quot;FAILED&quot;</code> - The processing failed (see failureReason for details)</li>
     * </ul>
     */
    @JsonProperty("status")
    public ParserRunStatusEnum getStatus() {
        return status;
    }

    /**
     * @return The reason for failure if status is &quot;FAILED&quot;.
     */
    @JsonProperty("failureReason")
    public Optional<String> getFailureReason() {
        return failureReason;
    }

    /**
     * @return Metrics about the parsing process.
     */
    @JsonProperty("metrics")
    public ParserRunMetrics getMetrics() {
        return metrics;
    }

    /**
     * @return The configuration used for the parsing process, including any default values that were applied.
     */
    @JsonProperty("config")
    public ParseConfig getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParserRun && equalTo((ParserRun) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParserRun other) {
        return id.equals(other.id)
                && fileId.equals(other.fileId)
                && chunks.equals(other.chunks)
                && status.equals(other.status)
                && failureReason.equals(other.failureReason)
                && metrics.equals(other.metrics)
                && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.fileId, this.chunks, this.status, this.failureReason, this.metrics, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>A unique identifier for the parser run. Will always start with <code>&quot;parser_run_&quot;</code></p>
         * <p>Example: <code>&quot;parser_run_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
         */
        FileIdStage id(@NotNull String id);

        Builder from(ParserRun other);
    }

    public interface FileIdStage {
        /**
         * <p>The identifier of the file that was parsed. This can be used as a parameter to other Extend endpoints, such as processor runs.</p>
         */
        StatusStage fileId(@NotNull String fileId);
    }

    public interface StatusStage {
        /**
         * <p>The status of the parser run:</p>
         * <ul>
         * <li><code>&quot;PROCESSED&quot;</code> - The file was successfully processed</li>
         * <li><code>&quot;FAILED&quot;</code> - The processing failed (see failureReason for details)</li>
         * </ul>
         */
        MetricsStage status(@NotNull ParserRunStatusEnum status);
    }

    public interface MetricsStage {
        /**
         * <p>Metrics about the parsing process.</p>
         */
        ConfigStage metrics(@NotNull ParserRunMetrics metrics);
    }

    public interface ConfigStage {
        /**
         * <p>The configuration used for the parsing process, including any default values that were applied.</p>
         */
        _FinalStage config(@NotNull ParseConfig config);
    }

    public interface _FinalStage {
        ParserRun build();

        /**
         * <p>An array of chunks that were parsed from the file.</p>
         */
        _FinalStage chunks(List<Chunk> chunks);

        _FinalStage addChunks(Chunk chunks);

        _FinalStage addAllChunks(List<Chunk> chunks);

        /**
         * <p>The reason for failure if status is &quot;FAILED&quot;.</p>
         */
        _FinalStage failureReason(Optional<String> failureReason);

        _FinalStage failureReason(String failureReason);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, FileIdStage, StatusStage, MetricsStage, ConfigStage, _FinalStage {
        private String id;

        private String fileId;

        private ParserRunStatusEnum status;

        private ParserRunMetrics metrics;

        private ParseConfig config;

        private Optional<String> failureReason = Optional.empty();

        private List<Chunk> chunks = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ParserRun other) {
            id(other.getId());
            fileId(other.getFileId());
            chunks(other.getChunks());
            status(other.getStatus());
            failureReason(other.getFailureReason());
            metrics(other.getMetrics());
            config(other.getConfig());
            return this;
        }

        /**
         * <p>A unique identifier for the parser run. Will always start with <code>&quot;parser_run_&quot;</code></p>
         * <p>Example: <code>&quot;parser_run_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
         * <p>A unique identifier for the parser run. Will always start with <code>&quot;parser_run_&quot;</code></p>
         * <p>Example: <code>&quot;parser_run_xK9mLPqRtN3vS8wF5hB2cQ&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public FileIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The identifier of the file that was parsed. This can be used as a parameter to other Extend endpoints, such as processor runs.</p>
         * <p>The identifier of the file that was parsed. This can be used as a parameter to other Extend endpoints, such as processor runs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("fileId")
        public StatusStage fileId(@NotNull String fileId) {
            this.fileId = Objects.requireNonNull(fileId, "fileId must not be null");
            return this;
        }

        /**
         * <p>The status of the parser run:</p>
         * <ul>
         * <li><code>&quot;PROCESSED&quot;</code> - The file was successfully processed</li>
         * <li><code>&quot;FAILED&quot;</code> - The processing failed (see failureReason for details)</li>
         * </ul>
         * <p>The status of the parser run:</p>
         * <ul>
         * <li><code>&quot;PROCESSED&quot;</code> - The file was successfully processed</li>
         * <li><code>&quot;FAILED&quot;</code> - The processing failed (see failureReason for details)</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public MetricsStage status(@NotNull ParserRunStatusEnum status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Metrics about the parsing process.</p>
         * <p>Metrics about the parsing process.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("metrics")
        public ConfigStage metrics(@NotNull ParserRunMetrics metrics) {
            this.metrics = Objects.requireNonNull(metrics, "metrics must not be null");
            return this;
        }

        /**
         * <p>The configuration used for the parsing process, including any default values that were applied.</p>
         * <p>The configuration used for the parsing process, including any default values that were applied.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("config")
        public _FinalStage config(@NotNull ParseConfig config) {
            this.config = Objects.requireNonNull(config, "config must not be null");
            return this;
        }

        /**
         * <p>The reason for failure if status is &quot;FAILED&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage failureReason(String failureReason) {
            this.failureReason = Optional.ofNullable(failureReason);
            return this;
        }

        /**
         * <p>The reason for failure if status is &quot;FAILED&quot;.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "failureReason", nulls = Nulls.SKIP)
        public _FinalStage failureReason(Optional<String> failureReason) {
            this.failureReason = failureReason;
            return this;
        }

        /**
         * <p>An array of chunks that were parsed from the file.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllChunks(List<Chunk> chunks) {
            this.chunks.addAll(chunks);
            return this;
        }

        /**
         * <p>An array of chunks that were parsed from the file.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addChunks(Chunk chunks) {
            this.chunks.add(chunks);
            return this;
        }

        /**
         * <p>An array of chunks that were parsed from the file.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "chunks", nulls = Nulls.SKIP)
        public _FinalStage chunks(List<Chunk> chunks) {
            this.chunks.clear();
            this.chunks.addAll(chunks);
            return this;
        }

        @java.lang.Override
        public ParserRun build() {
            return new ParserRun(id, fileId, chunks, status, failureReason, metrics, config, additionalProperties);
        }
    }
}

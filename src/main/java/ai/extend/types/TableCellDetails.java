/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TableCellDetails.Builder.class)
public final class TableCellDetails {
    private final int rowIndex;

    private final int columnIndex;

    private final Map<String, Object> additionalProperties;

    private TableCellDetails(int rowIndex, int columnIndex, Map<String, Object> additionalProperties) {
        this.rowIndex = rowIndex;
        this.columnIndex = columnIndex;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates this is a table cell details object
     */
    @JsonProperty("type")
    public String getType() {
        return "table_cell_details";
    }

    @JsonProperty("rowIndex")
    public int getRowIndex() {
        return rowIndex;
    }

    @JsonProperty("columnIndex")
    public int getColumnIndex() {
        return columnIndex;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TableCellDetails && equalTo((TableCellDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TableCellDetails other) {
        return rowIndex == other.rowIndex && columnIndex == other.columnIndex;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.rowIndex, this.columnIndex);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RowIndexStage builder() {
        return new Builder();
    }

    public interface RowIndexStage {
        ColumnIndexStage rowIndex(int rowIndex);

        Builder from(TableCellDetails other);
    }

    public interface ColumnIndexStage {
        _FinalStage columnIndex(int columnIndex);
    }

    public interface _FinalStage {
        TableCellDetails build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RowIndexStage, ColumnIndexStage, _FinalStage {
        private int rowIndex;

        private int columnIndex;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TableCellDetails other) {
            rowIndex(other.getRowIndex());
            columnIndex(other.getColumnIndex());
            return this;
        }

        @java.lang.Override
        @JsonSetter("rowIndex")
        public ColumnIndexStage rowIndex(int rowIndex) {
            this.rowIndex = rowIndex;
            return this;
        }

        @java.lang.Override
        @JsonSetter("columnIndex")
        public _FinalStage columnIndex(int columnIndex) {
            this.columnIndex = columnIndex;
            return this;
        }

        @java.lang.Override
        public TableCellDetails build() {
            return new TableCellDetails(rowIndex, columnIndex, additionalProperties);
        }
    }
}

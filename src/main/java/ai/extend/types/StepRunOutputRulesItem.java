/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StepRunOutputRulesItem.Builder.class)
public final class StepRunOutputRulesItem {
    private final String name;

    private final boolean valid;

    private final Optional<List<String>> validArray;

    private final Optional<StepRunOutputRulesItemFailureReason> failureReason;

    private final Optional<String> error;

    private final Map<String, Object> additionalProperties;

    private StepRunOutputRulesItem(
            String name,
            boolean valid,
            Optional<List<String>> validArray,
            Optional<StepRunOutputRulesItemFailureReason> failureReason,
            Optional<String> error,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.valid = valid;
        this.validArray = validArray;
        this.failureReason = failureReason;
        this.error = error;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the validation rule.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return Indicates whether this validation rule passed or not. This field will be <code>true</code> only if the formula evaluates to <code>true</code>. If the rule's formula is array valued, then this field will only be <code>true</code> if the formula evaluates to <code>true</code> for every item in the array.
     */
    @JsonProperty("valid")
    public boolean getValid() {
        return valid;
    }

    /**
     * @return Only present if the validation rule's formula is array valued. This field contains the formula's evaluated result for every item in the array.
     */
    @JsonProperty("validArray")
    public Optional<List<String>> getValidArray() {
        return validArray;
    }

    /**
     * @return If the validation rule is not valid, then this describes why the rule failed.
     * <ul>
     * <li><code>&quot;RULE_FAILED&quot;</code> - The formula evaluated to <code>false</code> or <code>null</code></li>
     * <li><code>&quot;PARSE_ERROR&quot;</code> - The formula could not be parsed</li>
     * <li><code>&quot;VALUE_ERROR&quot;</code> - An error occurred while evaluating the formula</li>
     * </ul>
     */
    @JsonProperty("failureReason")
    public Optional<StepRunOutputRulesItemFailureReason> getFailureReason() {
        return failureReason;
    }

    /**
     * @return If the <code>failureReason</code> is <code>PARSE_ERROR</code> or <code>VALUE_ERROR</code>, then this field contains the error's details.
     */
    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StepRunOutputRulesItem && equalTo((StepRunOutputRulesItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StepRunOutputRulesItem other) {
        return name.equals(other.name)
                && valid == other.valid
                && validArray.equals(other.validArray)
                && failureReason.equals(other.failureReason)
                && error.equals(other.error);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.valid, this.validArray, this.failureReason, this.error);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>The name of the validation rule.</p>
         */
        ValidStage name(@NotNull String name);

        Builder from(StepRunOutputRulesItem other);
    }

    public interface ValidStage {
        /**
         * <p>Indicates whether this validation rule passed or not. This field will be <code>true</code> only if the formula evaluates to <code>true</code>. If the rule's formula is array valued, then this field will only be <code>true</code> if the formula evaluates to <code>true</code> for every item in the array.</p>
         */
        _FinalStage valid(boolean valid);
    }

    public interface _FinalStage {
        StepRunOutputRulesItem build();

        /**
         * <p>Only present if the validation rule's formula is array valued. This field contains the formula's evaluated result for every item in the array.</p>
         */
        _FinalStage validArray(Optional<List<String>> validArray);

        _FinalStage validArray(List<String> validArray);

        /**
         * <p>If the validation rule is not valid, then this describes why the rule failed.</p>
         * <ul>
         * <li><code>&quot;RULE_FAILED&quot;</code> - The formula evaluated to <code>false</code> or <code>null</code></li>
         * <li><code>&quot;PARSE_ERROR&quot;</code> - The formula could not be parsed</li>
         * <li><code>&quot;VALUE_ERROR&quot;</code> - An error occurred while evaluating the formula</li>
         * </ul>
         */
        _FinalStage failureReason(Optional<StepRunOutputRulesItemFailureReason> failureReason);

        _FinalStage failureReason(StepRunOutputRulesItemFailureReason failureReason);

        /**
         * <p>If the <code>failureReason</code> is <code>PARSE_ERROR</code> or <code>VALUE_ERROR</code>, then this field contains the error's details.</p>
         */
        _FinalStage error(Optional<String> error);

        _FinalStage error(String error);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, ValidStage, _FinalStage {
        private String name;

        private boolean valid;

        private Optional<String> error = Optional.empty();

        private Optional<StepRunOutputRulesItemFailureReason> failureReason = Optional.empty();

        private Optional<List<String>> validArray = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(StepRunOutputRulesItem other) {
            name(other.getName());
            valid(other.getValid());
            validArray(other.getValidArray());
            failureReason(other.getFailureReason());
            error(other.getError());
            return this;
        }

        /**
         * <p>The name of the validation rule.</p>
         * <p>The name of the validation rule.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public ValidStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>Indicates whether this validation rule passed or not. This field will be <code>true</code> only if the formula evaluates to <code>true</code>. If the rule's formula is array valued, then this field will only be <code>true</code> if the formula evaluates to <code>true</code> for every item in the array.</p>
         * <p>Indicates whether this validation rule passed or not. This field will be <code>true</code> only if the formula evaluates to <code>true</code>. If the rule's formula is array valued, then this field will only be <code>true</code> if the formula evaluates to <code>true</code> for every item in the array.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("valid")
        public _FinalStage valid(boolean valid) {
            this.valid = valid;
            return this;
        }

        /**
         * <p>If the <code>failureReason</code> is <code>PARSE_ERROR</code> or <code>VALUE_ERROR</code>, then this field contains the error's details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage error(String error) {
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * <p>If the <code>failureReason</code> is <code>PARSE_ERROR</code> or <code>VALUE_ERROR</code>, then this field contains the error's details.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public _FinalStage error(Optional<String> error) {
            this.error = error;
            return this;
        }

        /**
         * <p>If the validation rule is not valid, then this describes why the rule failed.</p>
         * <ul>
         * <li><code>&quot;RULE_FAILED&quot;</code> - The formula evaluated to <code>false</code> or <code>null</code></li>
         * <li><code>&quot;PARSE_ERROR&quot;</code> - The formula could not be parsed</li>
         * <li><code>&quot;VALUE_ERROR&quot;</code> - An error occurred while evaluating the formula</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage failureReason(StepRunOutputRulesItemFailureReason failureReason) {
            this.failureReason = Optional.ofNullable(failureReason);
            return this;
        }

        /**
         * <p>If the validation rule is not valid, then this describes why the rule failed.</p>
         * <ul>
         * <li><code>&quot;RULE_FAILED&quot;</code> - The formula evaluated to <code>false</code> or <code>null</code></li>
         * <li><code>&quot;PARSE_ERROR&quot;</code> - The formula could not be parsed</li>
         * <li><code>&quot;VALUE_ERROR&quot;</code> - An error occurred while evaluating the formula</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "failureReason", nulls = Nulls.SKIP)
        public _FinalStage failureReason(Optional<StepRunOutputRulesItemFailureReason> failureReason) {
            this.failureReason = failureReason;
            return this;
        }

        /**
         * <p>Only present if the validation rule's formula is array valued. This field contains the formula's evaluated result for every item in the array.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage validArray(List<String> validArray) {
            this.validArray = Optional.ofNullable(validArray);
            return this;
        }

        /**
         * <p>Only present if the validation rule's formula is array valued. This field contains the formula's evaluated result for every item in the array.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "validArray", nulls = Nulls.SKIP)
        public _FinalStage validArray(Optional<List<String>> validArray) {
            this.validArray = validArray;
            return this;
        }

        @java.lang.Override
        public StepRunOutputRulesItem build() {
            return new StepRunOutputRulesItem(name, valid, validArray, failureReason, error, additionalProperties);
        }
    }
}

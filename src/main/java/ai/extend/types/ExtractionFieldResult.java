/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExtractionFieldResult.Builder.class)
public final class ExtractionFieldResult {
    private final String id;

    private final ExtractionFieldResultType type;

    private final Object value;

    private final Optional<Double> confidence;

    private final Optional<List<ExtractionField>> schema;

    private final Optional<List<Insight>> insights;

    private final List<ExtractionFieldResultReference> references;

    private final Optional<List<EnumOption>> enum_;

    private final Map<String, Object> additionalProperties;

    private ExtractionFieldResult(
            String id,
            ExtractionFieldResultType type,
            Object value,
            Optional<Double> confidence,
            Optional<List<ExtractionField>> schema,
            Optional<List<Insight>> insights,
            List<ExtractionFieldResultReference> references,
            Optional<List<EnumOption>> enum_,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.type = type;
        this.value = value;
        this.confidence = confidence;
        this.schema = schema;
        this.insights = insights;
        this.references = references;
        this.enum_ = enum_;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique identifier for this field
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The type of the extracted field
     */
    @JsonProperty("type")
    public ExtractionFieldResultType getType() {
        return type;
    }

    @JsonProperty("value")
    public Object getValue() {
        return value;
    }

    /**
     * @return A value between 0 and 1 indicating confidence in the extraction
     */
    @JsonProperty("confidence")
    public Optional<Double> getConfidence() {
        return confidence;
    }

    /**
     * @return The field schema of nested fields
     */
    @JsonProperty("schema")
    public Optional<List<ExtractionField>> getSchema() {
        return schema;
    }

    /**
     * @return Reasoning and other insights from the model
     */
    @JsonProperty("insights")
    public Optional<List<Insight>> getInsights() {
        return insights;
    }

    /**
     * @return References for the extracted field
     */
    @JsonProperty("references")
    public List<ExtractionFieldResultReference> getReferences() {
        return references;
    }

    /**
     * @return The enum options for enum fields, only set when type=enum
     */
    @JsonProperty("enum")
    public Optional<List<EnumOption>> getEnum() {
        return enum_;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExtractionFieldResult && equalTo((ExtractionFieldResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExtractionFieldResult other) {
        return id.equals(other.id)
                && type.equals(other.type)
                && value.equals(other.value)
                && confidence.equals(other.confidence)
                && schema.equals(other.schema)
                && insights.equals(other.insights)
                && references.equals(other.references)
                && enum_.equals(other.enum_);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.type,
                this.value,
                this.confidence,
                this.schema,
                this.insights,
                this.references,
                this.enum_);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The unique identifier for this field</p>
         */
        TypeStage id(@NotNull String id);

        Builder from(ExtractionFieldResult other);
    }

    public interface TypeStage {
        /**
         * <p>The type of the extracted field</p>
         */
        ValueStage type(@NotNull ExtractionFieldResultType type);
    }

    public interface ValueStage {
        _FinalStage value(Object value);
    }

    public interface _FinalStage {
        ExtractionFieldResult build();

        /**
         * <p>A value between 0 and 1 indicating confidence in the extraction</p>
         */
        _FinalStage confidence(Optional<Double> confidence);

        _FinalStage confidence(Double confidence);

        /**
         * <p>The field schema of nested fields</p>
         */
        _FinalStage schema(Optional<List<ExtractionField>> schema);

        _FinalStage schema(List<ExtractionField> schema);

        /**
         * <p>Reasoning and other insights from the model</p>
         */
        _FinalStage insights(Optional<List<Insight>> insights);

        _FinalStage insights(List<Insight> insights);

        /**
         * <p>References for the extracted field</p>
         */
        _FinalStage references(List<ExtractionFieldResultReference> references);

        _FinalStage addReferences(ExtractionFieldResultReference references);

        _FinalStage addAllReferences(List<ExtractionFieldResultReference> references);

        /**
         * <p>The enum options for enum fields, only set when type=enum</p>
         */
        _FinalStage enum_(Optional<List<EnumOption>> enum_);

        _FinalStage enum_(List<EnumOption> enum_);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, TypeStage, ValueStage, _FinalStage {
        private String id;

        private ExtractionFieldResultType type;

        private Object value;

        private Optional<List<EnumOption>> enum_ = Optional.empty();

        private List<ExtractionFieldResultReference> references = new ArrayList<>();

        private Optional<List<Insight>> insights = Optional.empty();

        private Optional<List<ExtractionField>> schema = Optional.empty();

        private Optional<Double> confidence = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ExtractionFieldResult other) {
            id(other.getId());
            type(other.getType());
            value(other.getValue());
            confidence(other.getConfidence());
            schema(other.getSchema());
            insights(other.getInsights());
            references(other.getReferences());
            enum_(other.getEnum());
            return this;
        }

        /**
         * <p>The unique identifier for this field</p>
         * <p>The unique identifier for this field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public TypeStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The type of the extracted field</p>
         * <p>The type of the extracted field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public ValueStage type(@NotNull ExtractionFieldResultType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("value")
        public _FinalStage value(Object value) {
            this.value = value;
            return this;
        }

        /**
         * <p>The enum options for enum fields, only set when type=enum</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enum_(List<EnumOption> enum_) {
            this.enum_ = Optional.ofNullable(enum_);
            return this;
        }

        /**
         * <p>The enum options for enum fields, only set when type=enum</p>
         */
        @java.lang.Override
        @JsonSetter(value = "enum", nulls = Nulls.SKIP)
        public _FinalStage enum_(Optional<List<EnumOption>> enum_) {
            this.enum_ = enum_;
            return this;
        }

        /**
         * <p>References for the extracted field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllReferences(List<ExtractionFieldResultReference> references) {
            this.references.addAll(references);
            return this;
        }

        /**
         * <p>References for the extracted field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addReferences(ExtractionFieldResultReference references) {
            this.references.add(references);
            return this;
        }

        /**
         * <p>References for the extracted field</p>
         */
        @java.lang.Override
        @JsonSetter(value = "references", nulls = Nulls.SKIP)
        public _FinalStage references(List<ExtractionFieldResultReference> references) {
            this.references.clear();
            this.references.addAll(references);
            return this;
        }

        /**
         * <p>Reasoning and other insights from the model</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage insights(List<Insight> insights) {
            this.insights = Optional.ofNullable(insights);
            return this;
        }

        /**
         * <p>Reasoning and other insights from the model</p>
         */
        @java.lang.Override
        @JsonSetter(value = "insights", nulls = Nulls.SKIP)
        public _FinalStage insights(Optional<List<Insight>> insights) {
            this.insights = insights;
            return this;
        }

        /**
         * <p>The field schema of nested fields</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage schema(List<ExtractionField> schema) {
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        /**
         * <p>The field schema of nested fields</p>
         */
        @java.lang.Override
        @JsonSetter(value = "schema", nulls = Nulls.SKIP)
        public _FinalStage schema(Optional<List<ExtractionField>> schema) {
            this.schema = schema;
            return this;
        }

        /**
         * <p>A value between 0 and 1 indicating confidence in the extraction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage confidence(Double confidence) {
            this.confidence = Optional.ofNullable(confidence);
            return this;
        }

        /**
         * <p>A value between 0 and 1 indicating confidence in the extraction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "confidence", nulls = Nulls.SKIP)
        public _FinalStage confidence(Optional<Double> confidence) {
            this.confidence = confidence;
            return this;
        }

        @java.lang.Override
        public ExtractionFieldResult build() {
            return new ExtractionFieldResult(
                    id, type, value, confidence, schema, insights, references, enum_, additionalProperties);
        }
    }
}

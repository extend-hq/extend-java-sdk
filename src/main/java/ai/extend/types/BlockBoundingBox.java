/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BlockBoundingBox.Builder.class)
public final class BlockBoundingBox {
    private final Optional<Double> left;

    private final Optional<Double> right;

    private final Optional<Double> top;

    private final Optional<Double> bottom;

    private final Map<String, Object> additionalProperties;

    private BlockBoundingBox(
            Optional<Double> left,
            Optional<Double> right,
            Optional<Double> top,
            Optional<Double> bottom,
            Map<String, Object> additionalProperties) {
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("left")
    public Optional<Double> getLeft() {
        return left;
    }

    @JsonProperty("right")
    public Optional<Double> getRight() {
        return right;
    }

    @JsonProperty("top")
    public Optional<Double> getTop() {
        return top;
    }

    @JsonProperty("bottom")
    public Optional<Double> getBottom() {
        return bottom;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BlockBoundingBox && equalTo((BlockBoundingBox) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BlockBoundingBox other) {
        return left.equals(other.left)
                && right.equals(other.right)
                && top.equals(other.top)
                && bottom.equals(other.bottom);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.left, this.right, this.top, this.bottom);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> left = Optional.empty();

        private Optional<Double> right = Optional.empty();

        private Optional<Double> top = Optional.empty();

        private Optional<Double> bottom = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BlockBoundingBox other) {
            left(other.getLeft());
            right(other.getRight());
            top(other.getTop());
            bottom(other.getBottom());
            return this;
        }

        @JsonSetter(value = "left", nulls = Nulls.SKIP)
        public Builder left(Optional<Double> left) {
            this.left = left;
            return this;
        }

        public Builder left(Double left) {
            this.left = Optional.ofNullable(left);
            return this;
        }

        @JsonSetter(value = "right", nulls = Nulls.SKIP)
        public Builder right(Optional<Double> right) {
            this.right = right;
            return this;
        }

        public Builder right(Double right) {
            this.right = Optional.ofNullable(right);
            return this;
        }

        @JsonSetter(value = "top", nulls = Nulls.SKIP)
        public Builder top(Optional<Double> top) {
            this.top = top;
            return this;
        }

        public Builder top(Double top) {
            this.top = Optional.ofNullable(top);
            return this;
        }

        @JsonSetter(value = "bottom", nulls = Nulls.SKIP)
        public Builder bottom(Optional<Double> bottom) {
            this.bottom = bottom;
            return this;
        }

        public Builder bottom(Double bottom) {
            this.bottom = Optional.ofNullable(bottom);
            return this;
        }

        public BlockBoundingBox build() {
            return new BlockBoundingBox(left, right, top, bottom, additionalProperties);
        }
    }
}

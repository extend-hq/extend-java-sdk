/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParseConfigAdvancedOptions.Builder.class)
public final class ParseConfigAdvancedOptions {
    private final Optional<Boolean> pageRotationEnabled;

    private final Optional<List<PageRangesItem>> pageRanges;

    private final Map<String, Object> additionalProperties;

    private ParseConfigAdvancedOptions(
            Optional<Boolean> pageRotationEnabled,
            Optional<List<PageRangesItem>> pageRanges,
            Map<String, Object> additionalProperties) {
        this.pageRotationEnabled = pageRotationEnabled;
        this.pageRanges = pageRanges;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether to automatically detect and correct page rotation.
     */
    @JsonProperty("pageRotationEnabled")
    public Optional<Boolean> getPageRotationEnabled() {
        return pageRotationEnabled;
    }

    @JsonProperty("pageRanges")
    public Optional<List<PageRangesItem>> getPageRanges() {
        return pageRanges;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParseConfigAdvancedOptions && equalTo((ParseConfigAdvancedOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParseConfigAdvancedOptions other) {
        return pageRotationEnabled.equals(other.pageRotationEnabled) && pageRanges.equals(other.pageRanges);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pageRotationEnabled, this.pageRanges);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> pageRotationEnabled = Optional.empty();

        private Optional<List<PageRangesItem>> pageRanges = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ParseConfigAdvancedOptions other) {
            pageRotationEnabled(other.getPageRotationEnabled());
            pageRanges(other.getPageRanges());
            return this;
        }

        /**
         * <p>Whether to automatically detect and correct page rotation.</p>
         */
        @JsonSetter(value = "pageRotationEnabled", nulls = Nulls.SKIP)
        public Builder pageRotationEnabled(Optional<Boolean> pageRotationEnabled) {
            this.pageRotationEnabled = pageRotationEnabled;
            return this;
        }

        public Builder pageRotationEnabled(Boolean pageRotationEnabled) {
            this.pageRotationEnabled = Optional.ofNullable(pageRotationEnabled);
            return this;
        }

        @JsonSetter(value = "pageRanges", nulls = Nulls.SKIP)
        public Builder pageRanges(Optional<List<PageRangesItem>> pageRanges) {
            this.pageRanges = pageRanges;
            return this;
        }

        public Builder pageRanges(List<PageRangesItem> pageRanges) {
            this.pageRanges = Optional.ofNullable(pageRanges);
            return this;
        }

        public ParseConfigAdvancedOptions build() {
            return new ParseConfigAdvancedOptions(pageRotationEnabled, pageRanges, additionalProperties);
        }
    }
}

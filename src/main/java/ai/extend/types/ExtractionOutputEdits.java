/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExtractionOutputEdits.Builder.class)
public final class ExtractionOutputEdits {
    private final Optional<Object> originalValue;

    private final Optional<Object> editedValue;

    private final Optional<String> notes;

    private final Optional<Double> page;

    private final Optional<String> fieldType;

    private final Map<String, Object> additionalProperties;

    private ExtractionOutputEdits(
            Optional<Object> originalValue,
            Optional<Object> editedValue,
            Optional<String> notes,
            Optional<Double> page,
            Optional<String> fieldType,
            Map<String, Object> additionalProperties) {
        this.originalValue = originalValue;
        this.editedValue = editedValue;
        this.notes = notes;
        this.page = page;
        this.fieldType = fieldType;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("originalValue")
    public Optional<Object> getOriginalValue() {
        return originalValue;
    }

    @JsonProperty("editedValue")
    public Optional<Object> getEditedValue() {
        return editedValue;
    }

    /**
     * @return Any notes added during editing.
     */
    @JsonProperty("notes")
    public Optional<String> getNotes() {
        return notes;
    }

    /**
     * @return The page number where the edit was made.
     */
    @JsonProperty("page")
    public Optional<Double> getPage() {
        return page;
    }

    /**
     * @return The type of the edited field.
     */
    @JsonProperty("fieldType")
    public Optional<String> getFieldType() {
        return fieldType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExtractionOutputEdits && equalTo((ExtractionOutputEdits) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExtractionOutputEdits other) {
        return originalValue.equals(other.originalValue)
                && editedValue.equals(other.editedValue)
                && notes.equals(other.notes)
                && page.equals(other.page)
                && fieldType.equals(other.fieldType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.originalValue, this.editedValue, this.notes, this.page, this.fieldType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Object> originalValue = Optional.empty();

        private Optional<Object> editedValue = Optional.empty();

        private Optional<String> notes = Optional.empty();

        private Optional<Double> page = Optional.empty();

        private Optional<String> fieldType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExtractionOutputEdits other) {
            originalValue(other.getOriginalValue());
            editedValue(other.getEditedValue());
            notes(other.getNotes());
            page(other.getPage());
            fieldType(other.getFieldType());
            return this;
        }

        @JsonSetter(value = "originalValue", nulls = Nulls.SKIP)
        public Builder originalValue(Optional<Object> originalValue) {
            this.originalValue = originalValue;
            return this;
        }

        public Builder originalValue(Object originalValue) {
            this.originalValue = Optional.ofNullable(originalValue);
            return this;
        }

        @JsonSetter(value = "editedValue", nulls = Nulls.SKIP)
        public Builder editedValue(Optional<Object> editedValue) {
            this.editedValue = editedValue;
            return this;
        }

        public Builder editedValue(Object editedValue) {
            this.editedValue = Optional.ofNullable(editedValue);
            return this;
        }

        /**
         * <p>Any notes added during editing.</p>
         */
        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public Builder notes(Optional<String> notes) {
            this.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        /**
         * <p>The page number where the edit was made.</p>
         */
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Double> page) {
            this.page = page;
            return this;
        }

        public Builder page(Double page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>The type of the edited field.</p>
         */
        @JsonSetter(value = "fieldType", nulls = Nulls.SKIP)
        public Builder fieldType(Optional<String> fieldType) {
            this.fieldType = fieldType;
            return this;
        }

        public Builder fieldType(String fieldType) {
            this.fieldType = Optional.ofNullable(fieldType);
            return this;
        }

        public ExtractionOutputEdits build() {
            return new ExtractionOutputEdits(originalValue, editedValue, notes, page, fieldType, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class ProcessorRunConfig {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ProcessorRunConfig(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ProcessorRunConfig classify(ClassificationConfig value) {
        return new ProcessorRunConfig(new ClassifyValue(value));
    }

    public static ProcessorRunConfig extract(ExtractionConfig value) {
        return new ProcessorRunConfig(new ExtractValue(value));
    }

    public static ProcessorRunConfig splitter(SplitterConfig value) {
        return new ProcessorRunConfig(new SplitterValue(value));
    }

    public boolean isClassify() {
        return value instanceof ClassifyValue;
    }

    public boolean isExtract() {
        return value instanceof ExtractValue;
    }

    public boolean isSplitter() {
        return value instanceof SplitterValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ClassificationConfig> getClassify() {
        if (isClassify()) {
            return Optional.of(((ClassifyValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ExtractionConfig> getExtract() {
        if (isExtract()) {
            return Optional.of(((ExtractValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<SplitterConfig> getSplitter() {
        if (isSplitter()) {
            return Optional.of(((SplitterValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitClassify(ClassificationConfig classify);

        T visitExtract(ExtractionConfig extract);

        T visitSplitter(SplitterConfig splitter);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(ClassifyValue.class),
        @JsonSubTypes.Type(ExtractValue.class),
        @JsonSubTypes.Type(SplitterValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("CLASSIFY")
    @JsonIgnoreProperties("type")
    private static final class ClassifyValue implements Value {
        @JsonUnwrapped
        private ClassificationConfig value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ClassifyValue() {}

        private ClassifyValue(ClassificationConfig value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitClassify(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ClassifyValue && equalTo((ClassifyValue) other);
        }

        private boolean equalTo(ClassifyValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ProcessorRunConfig{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("EXTRACT")
    @JsonIgnoreProperties("type")
    private static final class ExtractValue implements Value {
        @JsonUnwrapped
        private ExtractionConfig value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ExtractValue() {}

        private ExtractValue(ExtractionConfig value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitExtract(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ExtractValue && equalTo((ExtractValue) other);
        }

        private boolean equalTo(ExtractValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ProcessorRunConfig{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("SPLITTER")
    @JsonIgnoreProperties("type")
    private static final class SplitterValue implements Value {
        @JsonUnwrapped
        private SplitterConfig value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SplitterValue() {}

        private SplitterValue(SplitterConfig value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSplitter(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SplitterValue && equalTo((SplitterValue) other);
        }

        private boolean equalTo(SplitterValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ProcessorRunConfig{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ProcessorRunConfig{" + "type: " + type + ", value: " + value + "}";
        }
    }
}

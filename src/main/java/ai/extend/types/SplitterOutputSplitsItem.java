/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SplitterOutputSplitsItem.Builder.class)
public final class SplitterOutputSplitsItem {
    private final String type;

    private final String observation;

    private final String identifier;

    private final int startPage;

    private final int endPage;

    private final Optional<String> name;

    private final String classificationId;

    private final String id;

    private final String fileId;

    private final Map<String, Object> additionalProperties;

    private SplitterOutputSplitsItem(
            String type,
            String observation,
            String identifier,
            int startPage,
            int endPage,
            Optional<String> name,
            String classificationId,
            String id,
            String fileId,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.observation = observation;
        this.identifier = identifier;
        this.startPage = startPage;
        this.endPage = endPage;
        this.name = name;
        this.classificationId = classificationId;
        this.id = id;
        this.fileId = fileId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of the split document (set in the processor config), corresponds to the classificationId
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return Explanation of the results
     */
    @JsonProperty("observation")
    public String getObservation() {
        return observation;
    }

    /**
     * @return Identifier for the split document (e.g. invoice number)
     */
    @JsonProperty("identifier")
    public String getIdentifier() {
        return identifier;
    }

    /**
     * @return The start page of the split document
     */
    @JsonProperty("startPage")
    public int getStartPage() {
        return startPage;
    }

    /**
     * @return The end page of the split document
     */
    @JsonProperty("endPage")
    public int getEndPage() {
        return endPage;
    }

    /**
     * @return Optional name for the split
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return ID of the classification type (set in the processor config)
     */
    @JsonProperty("classificationId")
    public String getClassificationId() {
        return classificationId;
    }

    /**
     * @return Unique ID for this split
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return File ID associated with this split
     */
    @JsonProperty("fileId")
    public String getFileId() {
        return fileId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SplitterOutputSplitsItem && equalTo((SplitterOutputSplitsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SplitterOutputSplitsItem other) {
        return type.equals(other.type)
                && observation.equals(other.observation)
                && identifier.equals(other.identifier)
                && startPage == other.startPage
                && endPage == other.endPage
                && name.equals(other.name)
                && classificationId.equals(other.classificationId)
                && id.equals(other.id)
                && fileId.equals(other.fileId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.observation,
                this.identifier,
                this.startPage,
                this.endPage,
                this.name,
                this.classificationId,
                this.id,
                this.fileId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The type of the split document (set in the processor config), corresponds to the classificationId</p>
         */
        ObservationStage type(@NotNull String type);

        Builder from(SplitterOutputSplitsItem other);
    }

    public interface ObservationStage {
        /**
         * <p>Explanation of the results</p>
         */
        IdentifierStage observation(@NotNull String observation);
    }

    public interface IdentifierStage {
        /**
         * <p>Identifier for the split document (e.g. invoice number)</p>
         */
        StartPageStage identifier(@NotNull String identifier);
    }

    public interface StartPageStage {
        /**
         * <p>The start page of the split document</p>
         */
        EndPageStage startPage(int startPage);
    }

    public interface EndPageStage {
        /**
         * <p>The end page of the split document</p>
         */
        ClassificationIdStage endPage(int endPage);
    }

    public interface ClassificationIdStage {
        /**
         * <p>ID of the classification type (set in the processor config)</p>
         */
        IdStage classificationId(@NotNull String classificationId);
    }

    public interface IdStage {
        /**
         * <p>Unique ID for this split</p>
         */
        FileIdStage id(@NotNull String id);
    }

    public interface FileIdStage {
        /**
         * <p>File ID associated with this split</p>
         */
        _FinalStage fileId(@NotNull String fileId);
    }

    public interface _FinalStage {
        SplitterOutputSplitsItem build();

        /**
         * <p>Optional name for the split</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TypeStage,
                    ObservationStage,
                    IdentifierStage,
                    StartPageStage,
                    EndPageStage,
                    ClassificationIdStage,
                    IdStage,
                    FileIdStage,
                    _FinalStage {
        private String type;

        private String observation;

        private String identifier;

        private int startPage;

        private int endPage;

        private String classificationId;

        private String id;

        private String fileId;

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SplitterOutputSplitsItem other) {
            type(other.getType());
            observation(other.getObservation());
            identifier(other.getIdentifier());
            startPage(other.getStartPage());
            endPage(other.getEndPage());
            name(other.getName());
            classificationId(other.getClassificationId());
            id(other.getId());
            fileId(other.getFileId());
            return this;
        }

        /**
         * <p>The type of the split document (set in the processor config), corresponds to the classificationId</p>
         * <p>The type of the split document (set in the processor config), corresponds to the classificationId</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public ObservationStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>Explanation of the results</p>
         * <p>Explanation of the results</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("observation")
        public IdentifierStage observation(@NotNull String observation) {
            this.observation = Objects.requireNonNull(observation, "observation must not be null");
            return this;
        }

        /**
         * <p>Identifier for the split document (e.g. invoice number)</p>
         * <p>Identifier for the split document (e.g. invoice number)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("identifier")
        public StartPageStage identifier(@NotNull String identifier) {
            this.identifier = Objects.requireNonNull(identifier, "identifier must not be null");
            return this;
        }

        /**
         * <p>The start page of the split document</p>
         * <p>The start page of the split document</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("startPage")
        public EndPageStage startPage(int startPage) {
            this.startPage = startPage;
            return this;
        }

        /**
         * <p>The end page of the split document</p>
         * <p>The end page of the split document</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("endPage")
        public ClassificationIdStage endPage(int endPage) {
            this.endPage = endPage;
            return this;
        }

        /**
         * <p>ID of the classification type (set in the processor config)</p>
         * <p>ID of the classification type (set in the processor config)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("classificationId")
        public IdStage classificationId(@NotNull String classificationId) {
            this.classificationId = Objects.requireNonNull(classificationId, "classificationId must not be null");
            return this;
        }

        /**
         * <p>Unique ID for this split</p>
         * <p>Unique ID for this split</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public FileIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>File ID associated with this split</p>
         * <p>File ID associated with this split</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("fileId")
        public _FinalStage fileId(@NotNull String fileId) {
            this.fileId = Objects.requireNonNull(fileId, "fileId must not be null");
            return this;
        }

        /**
         * <p>Optional name for the split</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>Optional name for the split</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public SplitterOutputSplitsItem build() {
            return new SplitterOutputSplitsItem(
                    type,
                    observation,
                    identifier,
                    startPage,
                    endPage,
                    name,
                    classificationId,
                    id,
                    fileId,
                    additionalProperties);
        }
    }
}

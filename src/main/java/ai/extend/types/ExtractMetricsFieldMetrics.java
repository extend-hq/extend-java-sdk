/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExtractMetricsFieldMetrics.Builder.class)
public final class ExtractMetricsFieldMetrics {
    private final Optional<Double> meanConfidence;

    private final Optional<Double> recallPerc;

    private final Optional<Double> precisionPerc;

    private final Optional<Map<String, Object>> fieldMetrics;

    private final Map<String, Object> additionalProperties;

    private ExtractMetricsFieldMetrics(
            Optional<Double> meanConfidence,
            Optional<Double> recallPerc,
            Optional<Double> precisionPerc,
            Optional<Map<String, Object>> fieldMetrics,
            Map<String, Object> additionalProperties) {
        this.meanConfidence = meanConfidence;
        this.recallPerc = recallPerc;
        this.precisionPerc = precisionPerc;
        this.fieldMetrics = fieldMetrics;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The mean confidence score for this field across all documents.
     */
    @JsonProperty("meanConfidence")
    public Optional<Double> getMeanConfidence() {
        return meanConfidence;
    }

    /**
     * @return The recall percentage for this field, representing how many of the expected values were correctly extracted.
     */
    @JsonProperty("recallPerc")
    public Optional<Double> getRecallPerc() {
        return recallPerc;
    }

    /**
     * @return The precision percentage for this field, representing how many of the extracted values were correct.
     */
    @JsonProperty("precisionPerc")
    public Optional<Double> getPrecisionPerc() {
        return precisionPerc;
    }

    /**
     * @return For nested object fields, this contains metrics for the child fields. Has the same structure as the parent fieldMetrics.
     */
    @JsonProperty("fieldMetrics")
    public Optional<Map<String, Object>> getFieldMetrics() {
        return fieldMetrics;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExtractMetricsFieldMetrics && equalTo((ExtractMetricsFieldMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExtractMetricsFieldMetrics other) {
        return meanConfidence.equals(other.meanConfidence)
                && recallPerc.equals(other.recallPerc)
                && precisionPerc.equals(other.precisionPerc)
                && fieldMetrics.equals(other.fieldMetrics);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.meanConfidence, this.recallPerc, this.precisionPerc, this.fieldMetrics);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> meanConfidence = Optional.empty();

        private Optional<Double> recallPerc = Optional.empty();

        private Optional<Double> precisionPerc = Optional.empty();

        private Optional<Map<String, Object>> fieldMetrics = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExtractMetricsFieldMetrics other) {
            meanConfidence(other.getMeanConfidence());
            recallPerc(other.getRecallPerc());
            precisionPerc(other.getPrecisionPerc());
            fieldMetrics(other.getFieldMetrics());
            return this;
        }

        /**
         * <p>The mean confidence score for this field across all documents.</p>
         */
        @JsonSetter(value = "meanConfidence", nulls = Nulls.SKIP)
        public Builder meanConfidence(Optional<Double> meanConfidence) {
            this.meanConfidence = meanConfidence;
            return this;
        }

        public Builder meanConfidence(Double meanConfidence) {
            this.meanConfidence = Optional.ofNullable(meanConfidence);
            return this;
        }

        /**
         * <p>The recall percentage for this field, representing how many of the expected values were correctly extracted.</p>
         */
        @JsonSetter(value = "recallPerc", nulls = Nulls.SKIP)
        public Builder recallPerc(Optional<Double> recallPerc) {
            this.recallPerc = recallPerc;
            return this;
        }

        public Builder recallPerc(Double recallPerc) {
            this.recallPerc = Optional.ofNullable(recallPerc);
            return this;
        }

        /**
         * <p>The precision percentage for this field, representing how many of the extracted values were correct.</p>
         */
        @JsonSetter(value = "precisionPerc", nulls = Nulls.SKIP)
        public Builder precisionPerc(Optional<Double> precisionPerc) {
            this.precisionPerc = precisionPerc;
            return this;
        }

        public Builder precisionPerc(Double precisionPerc) {
            this.precisionPerc = Optional.ofNullable(precisionPerc);
            return this;
        }

        /**
         * <p>For nested object fields, this contains metrics for the child fields. Has the same structure as the parent fieldMetrics.</p>
         */
        @JsonSetter(value = "fieldMetrics", nulls = Nulls.SKIP)
        public Builder fieldMetrics(Optional<Map<String, Object>> fieldMetrics) {
            this.fieldMetrics = fieldMetrics;
            return this;
        }

        public Builder fieldMetrics(Map<String, Object> fieldMetrics) {
            this.fieldMetrics = Optional.ofNullable(fieldMetrics);
            return this;
        }

        public ExtractMetricsFieldMetrics build() {
            return new ExtractMetricsFieldMetrics(
                    meanConfidence, recallPerc, precisionPerc, fieldMetrics, additionalProperties);
        }
    }
}

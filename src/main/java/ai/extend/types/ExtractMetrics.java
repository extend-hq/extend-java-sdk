/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExtractMetrics.Builder.class)
public final class ExtractMetrics implements IBaseMetrics {
    private final Optional<Double> numFiles;

    private final Optional<Double> numPages;

    private final Optional<Double> meanRunTimeMs;

    private final Optional<String> type;

    private final Optional<ExtractMetricsFieldMetrics> fieldMetrics;

    private final Optional<Map<String, Object>> arrayCardinalityMetrics;

    private final Map<String, Object> additionalProperties;

    private ExtractMetrics(
            Optional<Double> numFiles,
            Optional<Double> numPages,
            Optional<Double> meanRunTimeMs,
            Optional<String> type,
            Optional<ExtractMetricsFieldMetrics> fieldMetrics,
            Optional<Map<String, Object>> arrayCardinalityMetrics,
            Map<String, Object> additionalProperties) {
        this.numFiles = numFiles;
        this.numPages = numPages;
        this.meanRunTimeMs = meanRunTimeMs;
        this.type = type;
        this.fieldMetrics = fieldMetrics;
        this.arrayCardinalityMetrics = arrayCardinalityMetrics;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The total number of files that were processed.
     */
    @JsonProperty("numFiles")
    @java.lang.Override
    public Optional<Double> getNumFiles() {
        return numFiles;
    }

    /**
     * @return The total number of pages that were processed.
     */
    @JsonProperty("numPages")
    @java.lang.Override
    public Optional<Double> getNumPages() {
        return numPages;
    }

    /**
     * @return The mean runtime in milliseconds per document.
     */
    @JsonProperty("meanRunTimeMs")
    @java.lang.Override
    public Optional<Double> getMeanRunTimeMs() {
        return meanRunTimeMs;
    }

    /**
     * @return The type of metrics. Will always be <code>&quot;EXTRACT&quot;</code> for extraction processors.
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    /**
     * @return Record mapping field names to their respective metrics.
     */
    @JsonProperty("fieldMetrics")
    public Optional<ExtractMetricsFieldMetrics> getFieldMetrics() {
        return fieldMetrics;
    }

    /**
     * @return Maps the root array field name to a number indicating how many times the array field has the correct number of rows extracted.
     */
    @JsonProperty("arrayCardinalityMetrics")
    public Optional<Map<String, Object>> getArrayCardinalityMetrics() {
        return arrayCardinalityMetrics;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExtractMetrics && equalTo((ExtractMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExtractMetrics other) {
        return numFiles.equals(other.numFiles)
                && numPages.equals(other.numPages)
                && meanRunTimeMs.equals(other.meanRunTimeMs)
                && type.equals(other.type)
                && fieldMetrics.equals(other.fieldMetrics)
                && arrayCardinalityMetrics.equals(other.arrayCardinalityMetrics);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.numFiles,
                this.numPages,
                this.meanRunTimeMs,
                this.type,
                this.fieldMetrics,
                this.arrayCardinalityMetrics);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> numFiles = Optional.empty();

        private Optional<Double> numPages = Optional.empty();

        private Optional<Double> meanRunTimeMs = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<ExtractMetricsFieldMetrics> fieldMetrics = Optional.empty();

        private Optional<Map<String, Object>> arrayCardinalityMetrics = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExtractMetrics other) {
            numFiles(other.getNumFiles());
            numPages(other.getNumPages());
            meanRunTimeMs(other.getMeanRunTimeMs());
            type(other.getType());
            fieldMetrics(other.getFieldMetrics());
            arrayCardinalityMetrics(other.getArrayCardinalityMetrics());
            return this;
        }

        /**
         * <p>The total number of files that were processed.</p>
         */
        @JsonSetter(value = "numFiles", nulls = Nulls.SKIP)
        public Builder numFiles(Optional<Double> numFiles) {
            this.numFiles = numFiles;
            return this;
        }

        public Builder numFiles(Double numFiles) {
            this.numFiles = Optional.ofNullable(numFiles);
            return this;
        }

        /**
         * <p>The total number of pages that were processed.</p>
         */
        @JsonSetter(value = "numPages", nulls = Nulls.SKIP)
        public Builder numPages(Optional<Double> numPages) {
            this.numPages = numPages;
            return this;
        }

        public Builder numPages(Double numPages) {
            this.numPages = Optional.ofNullable(numPages);
            return this;
        }

        /**
         * <p>The mean runtime in milliseconds per document.</p>
         */
        @JsonSetter(value = "meanRunTimeMs", nulls = Nulls.SKIP)
        public Builder meanRunTimeMs(Optional<Double> meanRunTimeMs) {
            this.meanRunTimeMs = meanRunTimeMs;
            return this;
        }

        public Builder meanRunTimeMs(Double meanRunTimeMs) {
            this.meanRunTimeMs = Optional.ofNullable(meanRunTimeMs);
            return this;
        }

        /**
         * <p>The type of metrics. Will always be <code>&quot;EXTRACT&quot;</code> for extraction processors.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>Record mapping field names to their respective metrics.</p>
         */
        @JsonSetter(value = "fieldMetrics", nulls = Nulls.SKIP)
        public Builder fieldMetrics(Optional<ExtractMetricsFieldMetrics> fieldMetrics) {
            this.fieldMetrics = fieldMetrics;
            return this;
        }

        public Builder fieldMetrics(ExtractMetricsFieldMetrics fieldMetrics) {
            this.fieldMetrics = Optional.ofNullable(fieldMetrics);
            return this;
        }

        /**
         * <p>Maps the root array field name to a number indicating how many times the array field has the correct number of rows extracted.</p>
         */
        @JsonSetter(value = "arrayCardinalityMetrics", nulls = Nulls.SKIP)
        public Builder arrayCardinalityMetrics(Optional<Map<String, Object>> arrayCardinalityMetrics) {
            this.arrayCardinalityMetrics = arrayCardinalityMetrics;
            return this;
        }

        public Builder arrayCardinalityMetrics(Map<String, Object> arrayCardinalityMetrics) {
            this.arrayCardinalityMetrics = Optional.ofNullable(arrayCardinalityMetrics);
            return this;
        }

        public ExtractMetrics build() {
            return new ExtractMetrics(
                    numFiles,
                    numPages,
                    meanRunTimeMs,
                    type,
                    fieldMetrics,
                    arrayCardinalityMetrics,
                    additionalProperties);
        }
    }
}

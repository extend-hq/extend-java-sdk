/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.types.ParseConfig;
import ai.extend.types.ParseRequestFile;
import ai.extend.types.ParseRequestResponseType;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParseRequest.Builder.class)
public final class ParseRequest {
    private final Optional<ParseRequestResponseType> responseType;

    private final ParseRequestFile file;

    private final Optional<ParseConfig> config;

    private final Map<String, Object> additionalProperties;

    private ParseRequest(
            Optional<ParseRequestResponseType> responseType,
            ParseRequestFile file,
            Optional<ParseConfig> config,
            Map<String, Object> additionalProperties) {
        this.responseType = responseType;
        this.file = file;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Controls the format of the response chunks. Defaults to <code>json</code> if not specified.
     * <ul>
     * <li><code>json</code> - Returns parsed outputs in the response body</li>
     * <li><code>url</code> - Return a presigned URL to the parsed content in the response body</li>
     * </ul>
     */
    @JsonProperty("responseType")
    public Optional<ParseRequestResponseType> getResponseType() {
        return responseType;
    }

    /**
     * @return A file object containing either a URL or a fileId.
     */
    @JsonProperty("file")
    public ParseRequestFile getFile() {
        return file;
    }

    @JsonProperty("config")
    public Optional<ParseConfig> getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParseRequest && equalTo((ParseRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParseRequest other) {
        return responseType.equals(other.responseType) && file.equals(other.file) && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.responseType, this.file, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FileStage builder() {
        return new Builder();
    }

    public interface FileStage {
        /**
         * <p>A file object containing either a URL or a fileId.</p>
         */
        _FinalStage file(@NotNull ParseRequestFile file);

        Builder from(ParseRequest other);
    }

    public interface _FinalStage {
        ParseRequest build();

        /**
         * <p>Controls the format of the response chunks. Defaults to <code>json</code> if not specified.</p>
         * <ul>
         * <li><code>json</code> - Returns parsed outputs in the response body</li>
         * <li><code>url</code> - Return a presigned URL to the parsed content in the response body</li>
         * </ul>
         */
        _FinalStage responseType(Optional<ParseRequestResponseType> responseType);

        _FinalStage responseType(ParseRequestResponseType responseType);

        _FinalStage config(Optional<ParseConfig> config);

        _FinalStage config(ParseConfig config);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FileStage, _FinalStage {
        private ParseRequestFile file;

        private Optional<ParseConfig> config = Optional.empty();

        private Optional<ParseRequestResponseType> responseType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ParseRequest other) {
            responseType(other.getResponseType());
            file(other.getFile());
            config(other.getConfig());
            return this;
        }

        /**
         * <p>A file object containing either a URL or a fileId.</p>
         * <p>A file object containing either a URL or a fileId.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("file")
        public _FinalStage file(@NotNull ParseRequestFile file) {
            this.file = Objects.requireNonNull(file, "file must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage config(ParseConfig config) {
            this.config = Optional.ofNullable(config);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public _FinalStage config(Optional<ParseConfig> config) {
            this.config = config;
            return this;
        }

        /**
         * <p>Controls the format of the response chunks. Defaults to <code>json</code> if not specified.</p>
         * <ul>
         * <li><code>json</code> - Returns parsed outputs in the response body</li>
         * <li><code>url</code> - Return a presigned URL to the parsed content in the response body</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage responseType(ParseRequestResponseType responseType) {
            this.responseType = Optional.ofNullable(responseType);
            return this;
        }

        /**
         * <p>Controls the format of the response chunks. Defaults to <code>json</code> if not specified.</p>
         * <ul>
         * <li><code>json</code> - Returns parsed outputs in the response body</li>
         * <li><code>url</code> - Return a presigned URL to the parsed content in the response body</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "responseType", nulls = Nulls.SKIP)
        public _FinalStage responseType(Optional<ParseRequestResponseType> responseType) {
            this.responseType = responseType;
            return this;
        }

        @java.lang.Override
        public ParseRequest build() {
            return new ParseRequest(responseType, file, config, additionalProperties);
        }
    }
}

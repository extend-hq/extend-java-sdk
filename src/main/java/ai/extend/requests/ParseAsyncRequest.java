/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.types.ParseAsyncRequestFile;
import ai.extend.types.ParseConfig;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParseAsyncRequest.Builder.class)
public final class ParseAsyncRequest {
    private final ParseAsyncRequestFile file;

    private final Optional<ParseConfig> config;

    private final Map<String, Object> additionalProperties;

    private ParseAsyncRequest(
            ParseAsyncRequestFile file, Optional<ParseConfig> config, Map<String, Object> additionalProperties) {
        this.file = file;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A file object containing either a URL or a fileId.
     */
    @JsonProperty("file")
    public ParseAsyncRequestFile getFile() {
        return file;
    }

    @JsonProperty("config")
    public Optional<ParseConfig> getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParseAsyncRequest && equalTo((ParseAsyncRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParseAsyncRequest other) {
        return file.equals(other.file) && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.file, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FileStage builder() {
        return new Builder();
    }

    public interface FileStage {
        /**
         * <p>A file object containing either a URL or a fileId.</p>
         */
        _FinalStage file(@NotNull ParseAsyncRequestFile file);

        Builder from(ParseAsyncRequest other);
    }

    public interface _FinalStage {
        ParseAsyncRequest build();

        _FinalStage config(Optional<ParseConfig> config);

        _FinalStage config(ParseConfig config);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FileStage, _FinalStage {
        private ParseAsyncRequestFile file;

        private Optional<ParseConfig> config = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ParseAsyncRequest other) {
            file(other.getFile());
            config(other.getConfig());
            return this;
        }

        /**
         * <p>A file object containing either a URL or a fileId.</p>
         * <p>A file object containing either a URL or a fileId.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("file")
        public _FinalStage file(@NotNull ParseAsyncRequestFile file) {
            this.file = Objects.requireNonNull(file, "file must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage config(ParseConfig config) {
            this.config = Optional.ofNullable(config);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public _FinalStage config(Optional<ParseConfig> config) {
            this.config = config;
            return this;
        }

        @java.lang.Override
        public ParseAsyncRequest build() {
            return new ParseAsyncRequest(file, config, additionalProperties);
        }
    }
}

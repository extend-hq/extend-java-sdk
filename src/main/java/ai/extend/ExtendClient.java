/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend;

import ai.extend.core.ClientOptions;
import ai.extend.core.RequestOptions;
import ai.extend.core.Suppliers;
import ai.extend.requests.ParseAsyncRequest;
import ai.extend.requests.ParseRequest;
import ai.extend.resources.batchprocessorrun.BatchProcessorRunClient;
import ai.extend.resources.batchworkflowrun.BatchWorkflowRunClient;
import ai.extend.resources.evaluationset.EvaluationSetClient;
import ai.extend.resources.evaluationsetitem.EvaluationSetItemClient;
import ai.extend.resources.file.FileClient;
import ai.extend.resources.parserrun.ParserRunClient;
import ai.extend.resources.processor.ProcessorClient;
import ai.extend.resources.processorrun.ProcessorRunClient;
import ai.extend.resources.processorversion.ProcessorVersionClient;
import ai.extend.resources.workflow.WorkflowClient;
import ai.extend.resources.workflowrun.WorkflowRunClient;
import ai.extend.resources.workflowrunoutput.WorkflowRunOutputClient;
import ai.extend.types.ParserRun;
import ai.extend.types.ParserRunStatus;
import java.util.function.Supplier;

public class ExtendClient {
    protected final ClientOptions clientOptions;

    private final RawExtendClient rawClient;

    protected final Supplier<WorkflowRunClient> workflowRunClient;

    protected final Supplier<BatchWorkflowRunClient> batchWorkflowRunClient;

    protected final Supplier<ProcessorRunClient> processorRunClient;

    protected final Supplier<ProcessorClient> processorClient;

    protected final Supplier<ProcessorVersionClient> processorVersionClient;

    protected final Supplier<ParserRunClient> parserRunClient;

    protected final Supplier<FileClient> fileClient;

    protected final Supplier<EvaluationSetClient> evaluationSetClient;

    protected final Supplier<EvaluationSetItemClient> evaluationSetItemClient;

    protected final Supplier<WorkflowRunOutputClient> workflowRunOutputClient;

    protected final Supplier<BatchProcessorRunClient> batchProcessorRunClient;

    protected final Supplier<WorkflowClient> workflowClient;

    public ExtendClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawExtendClient(clientOptions);
        this.workflowRunClient = Suppliers.memoize(() -> new WorkflowRunClient(clientOptions));
        this.batchWorkflowRunClient = Suppliers.memoize(() -> new BatchWorkflowRunClient(clientOptions));
        this.processorRunClient = Suppliers.memoize(() -> new ProcessorRunClient(clientOptions));
        this.processorClient = Suppliers.memoize(() -> new ProcessorClient(clientOptions));
        this.processorVersionClient = Suppliers.memoize(() -> new ProcessorVersionClient(clientOptions));
        this.parserRunClient = Suppliers.memoize(() -> new ParserRunClient(clientOptions));
        this.fileClient = Suppliers.memoize(() -> new FileClient(clientOptions));
        this.evaluationSetClient = Suppliers.memoize(() -> new EvaluationSetClient(clientOptions));
        this.evaluationSetItemClient = Suppliers.memoize(() -> new EvaluationSetItemClient(clientOptions));
        this.workflowRunOutputClient = Suppliers.memoize(() -> new WorkflowRunOutputClient(clientOptions));
        this.batchProcessorRunClient = Suppliers.memoize(() -> new BatchProcessorRunClient(clientOptions));
        this.workflowClient = Suppliers.memoize(() -> new WorkflowClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawExtendClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Parse files to get cleaned, chunked target content (e.g. markdown).
     * <p>The Parse endpoint allows you to convert documents into structured, machine-readable formats with fine-grained control over the parsing process. This endpoint is ideal for extracting cleaned document content to be used as context for downstream processing, e.g. RAG pipelines, custom ingestion pipelines, embeddings classification, etc.</p>
     * <p>For more details, see the <a href="/product/parsing/parse">Parse File guide</a>.</p>
     */
    public ParserRun parse(ParseRequest request) {
        return this.rawClient.parse(request).body();
    }

    /**
     * Parse files to get cleaned, chunked target content (e.g. markdown).
     * <p>The Parse endpoint allows you to convert documents into structured, machine-readable formats with fine-grained control over the parsing process. This endpoint is ideal for extracting cleaned document content to be used as context for downstream processing, e.g. RAG pipelines, custom ingestion pipelines, embeddings classification, etc.</p>
     * <p>For more details, see the <a href="/product/parsing/parse">Parse File guide</a>.</p>
     */
    public ParserRun parse(ParseRequest request, RequestOptions requestOptions) {
        return this.rawClient.parse(request, requestOptions).body();
    }

    /**
     * Parse files <strong>asynchronously</strong> to get cleaned, chunked target content (e.g. markdown).
     * <p>The Parse Async endpoint allows you to convert documents into structured, machine-readable formats with fine-grained control over the parsing process. This endpoint is ideal for extracting cleaned document content to be used as context for downstream processing, e.g. RAG pipelines, custom ingestion pipelines, embeddings classification, etc.</p>
     * <p>Parse files asynchronously and get a parser run ID that can be used to check status and retrieve results with the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/get-parser-run">Get Parser Run</a> endpoint.</p>
     * <p>This is useful for:</p>
     * <ul>
     * <li>Large files that may take longer to process</li>
     * <li>Avoiding timeout issues with synchronous parsing.</li>
     * </ul>
     * <p>For more details, see the <a href="/product/parsing/parse">Parse File guide</a>.</p>
     */
    public ParserRunStatus parseAsync(ParseAsyncRequest request) {
        return this.rawClient.parseAsync(request).body();
    }

    /**
     * Parse files <strong>asynchronously</strong> to get cleaned, chunked target content (e.g. markdown).
     * <p>The Parse Async endpoint allows you to convert documents into structured, machine-readable formats with fine-grained control over the parsing process. This endpoint is ideal for extracting cleaned document content to be used as context for downstream processing, e.g. RAG pipelines, custom ingestion pipelines, embeddings classification, etc.</p>
     * <p>Parse files asynchronously and get a parser run ID that can be used to check status and retrieve results with the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/get-parser-run">Get Parser Run</a> endpoint.</p>
     * <p>This is useful for:</p>
     * <ul>
     * <li>Large files that may take longer to process</li>
     * <li>Avoiding timeout issues with synchronous parsing.</li>
     * </ul>
     * <p>For more details, see the <a href="/product/parsing/parse">Parse File guide</a>.</p>
     */
    public ParserRunStatus parseAsync(ParseAsyncRequest request, RequestOptions requestOptions) {
        return this.rawClient.parseAsync(request, requestOptions).body();
    }

    public WorkflowRunClient workflowRun() {
        return this.workflowRunClient.get();
    }

    public BatchWorkflowRunClient batchWorkflowRun() {
        return this.batchWorkflowRunClient.get();
    }

    public ProcessorRunClient processorRun() {
        return this.processorRunClient.get();
    }

    public ProcessorClient processor() {
        return this.processorClient.get();
    }

    public ProcessorVersionClient processorVersion() {
        return this.processorVersionClient.get();
    }

    public ParserRunClient parserRun() {
        return this.parserRunClient.get();
    }

    public FileClient file() {
        return this.fileClient.get();
    }

    public EvaluationSetClient evaluationSet() {
        return this.evaluationSetClient.get();
    }

    public EvaluationSetItemClient evaluationSetItem() {
        return this.evaluationSetItemClient.get();
    }

    public WorkflowRunOutputClient workflowRunOutput() {
        return this.workflowRunOutputClient.get();
    }

    public BatchProcessorRunClient batchProcessorRun() {
        return this.batchProcessorRunClient.get();
    }

    public WorkflowClient workflow() {
        return this.workflowClient.get();
    }

    public static ExtendClientBuilder builder() {
        return new ExtendClientBuilder();
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend;

import ai.extend.core.ClientOptions;
import ai.extend.core.RequestOptions;
import ai.extend.core.Suppliers;
import ai.extend.requests.ParseAsyncRequest;
import ai.extend.requests.ParseRequest;
import ai.extend.resources.batchprocessorrun.AsyncBatchProcessorRunClient;
import ai.extend.resources.batchworkflowrun.AsyncBatchWorkflowRunClient;
import ai.extend.resources.evaluationset.AsyncEvaluationSetClient;
import ai.extend.resources.evaluationsetitem.AsyncEvaluationSetItemClient;
import ai.extend.resources.file.AsyncFileClient;
import ai.extend.resources.parserrun.AsyncParserRunClient;
import ai.extend.resources.processor.AsyncProcessorClient;
import ai.extend.resources.processorrun.AsyncProcessorRunClient;
import ai.extend.resources.processorversion.AsyncProcessorVersionClient;
import ai.extend.resources.workflow.AsyncWorkflowClient;
import ai.extend.resources.workflowrun.AsyncWorkflowRunClient;
import ai.extend.resources.workflowrunoutput.AsyncWorkflowRunOutputClient;
import ai.extend.types.ParserRun;
import ai.extend.types.ParserRunStatus;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncExtendClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawExtendClient rawClient;

    protected final Supplier<AsyncWorkflowRunClient> workflowRunClient;

    protected final Supplier<AsyncBatchWorkflowRunClient> batchWorkflowRunClient;

    protected final Supplier<AsyncProcessorRunClient> processorRunClient;

    protected final Supplier<AsyncProcessorClient> processorClient;

    protected final Supplier<AsyncProcessorVersionClient> processorVersionClient;

    protected final Supplier<AsyncParserRunClient> parserRunClient;

    protected final Supplier<AsyncFileClient> fileClient;

    protected final Supplier<AsyncEvaluationSetClient> evaluationSetClient;

    protected final Supplier<AsyncEvaluationSetItemClient> evaluationSetItemClient;

    protected final Supplier<AsyncWorkflowRunOutputClient> workflowRunOutputClient;

    protected final Supplier<AsyncBatchProcessorRunClient> batchProcessorRunClient;

    protected final Supplier<AsyncWorkflowClient> workflowClient;

    public AsyncExtendClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawExtendClient(clientOptions);
        this.workflowRunClient = Suppliers.memoize(() -> new AsyncWorkflowRunClient(clientOptions));
        this.batchWorkflowRunClient = Suppliers.memoize(() -> new AsyncBatchWorkflowRunClient(clientOptions));
        this.processorRunClient = Suppliers.memoize(() -> new AsyncProcessorRunClient(clientOptions));
        this.processorClient = Suppliers.memoize(() -> new AsyncProcessorClient(clientOptions));
        this.processorVersionClient = Suppliers.memoize(() -> new AsyncProcessorVersionClient(clientOptions));
        this.parserRunClient = Suppliers.memoize(() -> new AsyncParserRunClient(clientOptions));
        this.fileClient = Suppliers.memoize(() -> new AsyncFileClient(clientOptions));
        this.evaluationSetClient = Suppliers.memoize(() -> new AsyncEvaluationSetClient(clientOptions));
        this.evaluationSetItemClient = Suppliers.memoize(() -> new AsyncEvaluationSetItemClient(clientOptions));
        this.workflowRunOutputClient = Suppliers.memoize(() -> new AsyncWorkflowRunOutputClient(clientOptions));
        this.batchProcessorRunClient = Suppliers.memoize(() -> new AsyncBatchProcessorRunClient(clientOptions));
        this.workflowClient = Suppliers.memoize(() -> new AsyncWorkflowClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawExtendClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Parse files to get cleaned, chunked target content (e.g. markdown).
     * <p>The Parse endpoint allows you to convert documents into structured, machine-readable formats with fine-grained control over the parsing process. This endpoint is ideal for extracting cleaned document content to be used as context for downstream processing, e.g. RAG pipelines, custom ingestion pipelines, embeddings classification, etc.</p>
     * <p>For more details, see the <a href="/product/parsing/parse">Parse File guide</a>.</p>
     */
    public CompletableFuture<ParserRun> parse(ParseRequest request) {
        return this.rawClient.parse(request).thenApply(response -> response.body());
    }

    /**
     * Parse files to get cleaned, chunked target content (e.g. markdown).
     * <p>The Parse endpoint allows you to convert documents into structured, machine-readable formats with fine-grained control over the parsing process. This endpoint is ideal for extracting cleaned document content to be used as context for downstream processing, e.g. RAG pipelines, custom ingestion pipelines, embeddings classification, etc.</p>
     * <p>For more details, see the <a href="/product/parsing/parse">Parse File guide</a>.</p>
     */
    public CompletableFuture<ParserRun> parse(ParseRequest request, RequestOptions requestOptions) {
        return this.rawClient.parse(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Parse files <strong>asynchronously</strong> to get cleaned, chunked target content (e.g. markdown).
     * <p>The Parse Async endpoint allows you to convert documents into structured, machine-readable formats with fine-grained control over the parsing process. This endpoint is ideal for extracting cleaned document content to be used as context for downstream processing, e.g. RAG pipelines, custom ingestion pipelines, embeddings classification, etc.</p>
     * <p>Parse files asynchronously and get a parser run ID that can be used to check status and retrieve results with the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/get-parser-run">Get Parser Run</a> endpoint.</p>
     * <p>This is useful for:</p>
     * <ul>
     * <li>Large files that may take longer to process</li>
     * <li>Avoiding timeout issues with synchronous parsing.</li>
     * </ul>
     * <p>For more details, see the <a href="/product/parsing/parse">Parse File guide</a>.</p>
     */
    public CompletableFuture<ParserRunStatus> parseAsync(ParseAsyncRequest request) {
        return this.rawClient.parseAsync(request).thenApply(response -> response.body());
    }

    /**
     * Parse files <strong>asynchronously</strong> to get cleaned, chunked target content (e.g. markdown).
     * <p>The Parse Async endpoint allows you to convert documents into structured, machine-readable formats with fine-grained control over the parsing process. This endpoint is ideal for extracting cleaned document content to be used as context for downstream processing, e.g. RAG pipelines, custom ingestion pipelines, embeddings classification, etc.</p>
     * <p>Parse files asynchronously and get a parser run ID that can be used to check status and retrieve results with the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/get-parser-run">Get Parser Run</a> endpoint.</p>
     * <p>This is useful for:</p>
     * <ul>
     * <li>Large files that may take longer to process</li>
     * <li>Avoiding timeout issues with synchronous parsing.</li>
     * </ul>
     * <p>For more details, see the <a href="/product/parsing/parse">Parse File guide</a>.</p>
     */
    public CompletableFuture<ParserRunStatus> parseAsync(ParseAsyncRequest request, RequestOptions requestOptions) {
        return this.rawClient.parseAsync(request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncWorkflowRunClient workflowRun() {
        return this.workflowRunClient.get();
    }

    public AsyncBatchWorkflowRunClient batchWorkflowRun() {
        return this.batchWorkflowRunClient.get();
    }

    public AsyncProcessorRunClient processorRun() {
        return this.processorRunClient.get();
    }

    public AsyncProcessorClient processor() {
        return this.processorClient.get();
    }

    public AsyncProcessorVersionClient processorVersion() {
        return this.processorVersionClient.get();
    }

    public AsyncParserRunClient parserRun() {
        return this.parserRunClient.get();
    }

    public AsyncFileClient file() {
        return this.fileClient.get();
    }

    public AsyncEvaluationSetClient evaluationSet() {
        return this.evaluationSetClient.get();
    }

    public AsyncEvaluationSetItemClient evaluationSetItem() {
        return this.evaluationSetItemClient.get();
    }

    public AsyncWorkflowRunOutputClient workflowRunOutput() {
        return this.workflowRunOutputClient.get();
    }

    public AsyncBatchProcessorRunClient batchProcessorRun() {
        return this.batchProcessorRunClient.get();
    }

    public AsyncWorkflowClient workflow() {
        return this.workflowClient.get();
    }

    public static AsyncExtendClientBuilder builder() {
        return new AsyncExtendClientBuilder();
    }
}

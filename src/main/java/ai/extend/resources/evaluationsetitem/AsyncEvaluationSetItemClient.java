/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.evaluationsetitem;

import ai.extend.core.ClientOptions;
import ai.extend.core.RequestOptions;
import ai.extend.resources.evaluationsetitem.requests.EvaluationSetItemCreateBatchRequest;
import ai.extend.resources.evaluationsetitem.requests.EvaluationSetItemCreateRequest;
import ai.extend.resources.evaluationsetitem.requests.EvaluationSetItemListRequest;
import ai.extend.resources.evaluationsetitem.requests.EvaluationSetItemUpdateRequest;
import ai.extend.resources.evaluationsetitem.types.EvaluationSetItemCreateBatchResponse;
import ai.extend.resources.evaluationsetitem.types.EvaluationSetItemCreateResponse;
import ai.extend.resources.evaluationsetitem.types.EvaluationSetItemDeleteResponse;
import ai.extend.resources.evaluationsetitem.types.EvaluationSetItemListResponse;
import ai.extend.resources.evaluationsetitem.types.EvaluationSetItemUpdateResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncEvaluationSetItemClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawEvaluationSetItemClient rawClient;

    public AsyncEvaluationSetItemClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawEvaluationSetItemClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawEvaluationSetItemClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * List all items in a specific evaluation set. Evaluation set items are the individual files and expected outputs that are used to evaluate the performance of a given processor in Extend.
     * <p>This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.</p>
     */
    public CompletableFuture<EvaluationSetItemListResponse> list(String id) {
        return this.rawClient.list(id).thenApply(response -> response.body());
    }

    /**
     * List all items in a specific evaluation set. Evaluation set items are the individual files and expected outputs that are used to evaluate the performance of a given processor in Extend.
     * <p>This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.</p>
     */
    public CompletableFuture<EvaluationSetItemListResponse> list(String id, EvaluationSetItemListRequest request) {
        return this.rawClient.list(id, request).thenApply(response -> response.body());
    }

    /**
     * List all items in a specific evaluation set. Evaluation set items are the individual files and expected outputs that are used to evaluate the performance of a given processor in Extend.
     * <p>This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.</p>
     */
    public CompletableFuture<EvaluationSetItemListResponse> list(
            String id, EvaluationSetItemListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(id, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Evaluation set items are the individual files and expected outputs that are used to evaluate the performance of a given processor in Extend. This endpoint will create a new evaluation set item in Extend, which will be used during an evaluation run.
     * <p>Best Practices for Outputs in Evaluation Sets:</p>
     * <ul>
     * <li><strong>Configure First, Output Later</strong>
     * <ul>
     * <li>Always create and finalize your processor configuration before creating evaluation sets</li>
     * <li>Field IDs in outputs must match those defined in your processor configuration</li>
     * </ul>
     * </li>
     * <li><strong>Type Consistency</strong>
     * <ul>
     * <li>Ensure output types exactly match your processor configuration</li>
     * <li>For example, if a field is configured as &quot;currency&quot;, don't submit a simple number value</li>
     * </ul>
     * </li>
     * <li><strong>Field IDs</strong>
     * <ul>
     * <li>Use the exact field IDs from your processor configuration</li>
     * <li>Create your own semantic IDs instead in the configs for each field/type instead of using the generated ones</li>
     * </ul>
     * </li>
     * <li><strong>Value</strong>
     * <ul>
     * <li>Remember that all results are inside the value key of a result object, except the values within nested structures.</li>
     * </ul>
     * </li>
     * </ul>
     */
    public CompletableFuture<EvaluationSetItemCreateResponse> create(EvaluationSetItemCreateRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Evaluation set items are the individual files and expected outputs that are used to evaluate the performance of a given processor in Extend. This endpoint will create a new evaluation set item in Extend, which will be used during an evaluation run.
     * <p>Best Practices for Outputs in Evaluation Sets:</p>
     * <ul>
     * <li><strong>Configure First, Output Later</strong>
     * <ul>
     * <li>Always create and finalize your processor configuration before creating evaluation sets</li>
     * <li>Field IDs in outputs must match those defined in your processor configuration</li>
     * </ul>
     * </li>
     * <li><strong>Type Consistency</strong>
     * <ul>
     * <li>Ensure output types exactly match your processor configuration</li>
     * <li>For example, if a field is configured as &quot;currency&quot;, don't submit a simple number value</li>
     * </ul>
     * </li>
     * <li><strong>Field IDs</strong>
     * <ul>
     * <li>Use the exact field IDs from your processor configuration</li>
     * <li>Create your own semantic IDs instead in the configs for each field/type instead of using the generated ones</li>
     * </ul>
     * </li>
     * <li><strong>Value</strong>
     * <ul>
     * <li>Remember that all results are inside the value key of a result object, except the values within nested structures.</li>
     * </ul>
     * </li>
     * </ul>
     */
    public CompletableFuture<EvaluationSetItemCreateResponse> create(
            EvaluationSetItemCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * If you need to change the expected output for a given evaluation set item, you can use this endpoint to update the item. This can be useful if you need to correct an error in the expected output or if the output of the processor has changed.
     */
    public CompletableFuture<EvaluationSetItemUpdateResponse> update(
            String id, EvaluationSetItemUpdateRequest request) {
        return this.rawClient.update(id, request).thenApply(response -> response.body());
    }

    /**
     * If you need to change the expected output for a given evaluation set item, you can use this endpoint to update the item. This can be useful if you need to correct an error in the expected output or if the output of the processor has changed.
     */
    public CompletableFuture<EvaluationSetItemUpdateResponse> update(
            String id, EvaluationSetItemUpdateRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(id, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Delete an evaluation set item from an evaluation set. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used to remove individual items from an evaluation set when they are no longer needed or if they were added in error.</p>
     */
    public CompletableFuture<EvaluationSetItemDeleteResponse> delete(String id) {
        return this.rawClient.delete(id).thenApply(response -> response.body());
    }

    /**
     * Delete an evaluation set item from an evaluation set. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used to remove individual items from an evaluation set when they are no longer needed or if they were added in error.</p>
     */
    public CompletableFuture<EvaluationSetItemDeleteResponse> delete(String id, RequestOptions requestOptions) {
        return this.rawClient.delete(id, requestOptions).thenApply(response -> response.body());
    }

    /**
     * If you have a large number of files that you need to add to an evaluation set, you can use this endpoint to create multiple evaluation set items at once. This can be useful if you have a large dataset that you need to evaluate the performance of a processor against.
     * <p>Note: you still need to create each File first using the file API.</p>
     */
    public CompletableFuture<EvaluationSetItemCreateBatchResponse> createBatch(
            EvaluationSetItemCreateBatchRequest request) {
        return this.rawClient.createBatch(request).thenApply(response -> response.body());
    }

    /**
     * If you have a large number of files that you need to add to an evaluation set, you can use this endpoint to create multiple evaluation set items at once. This can be useful if you have a large dataset that you need to evaluate the performance of a processor against.
     * <p>Note: you still need to create each File first using the file API.</p>
     */
    public CompletableFuture<EvaluationSetItemCreateBatchResponse> createBatch(
            EvaluationSetItemCreateBatchRequest request, RequestOptions requestOptions) {
        return this.rawClient.createBatch(request, requestOptions).thenApply(response -> response.body());
    }
}

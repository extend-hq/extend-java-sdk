/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.processorrun.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.resources.processorrun.types.ProcessorRunListRequestSource;
import ai.extend.types.ProcessorStatus;
import ai.extend.types.ProcessorType;
import ai.extend.types.SortByEnum;
import ai.extend.types.SortDirEnum;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessorRunListRequest.Builder.class)
public final class ProcessorRunListRequest {
    private final Optional<ProcessorStatus> status;

    private final Optional<String> processorId;

    private final Optional<ProcessorType> processorType;

    private final Optional<String> sourceId;

    private final Optional<ProcessorRunListRequestSource> source;

    private final Optional<String> fileNameContains;

    private final Optional<SortByEnum> sortBy;

    private final Optional<SortDirEnum> sortDir;

    private final Optional<String> nextPageToken;

    private final Optional<Integer> maxPageSize;

    private final Map<String, Object> additionalProperties;

    private ProcessorRunListRequest(
            Optional<ProcessorStatus> status,
            Optional<String> processorId,
            Optional<ProcessorType> processorType,
            Optional<String> sourceId,
            Optional<ProcessorRunListRequestSource> source,
            Optional<String> fileNameContains,
            Optional<SortByEnum> sortBy,
            Optional<SortDirEnum> sortDir,
            Optional<String> nextPageToken,
            Optional<Integer> maxPageSize,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.processorId = processorId;
        this.processorType = processorType;
        this.sourceId = sourceId;
        this.source = source;
        this.fileNameContains = fileNameContains;
        this.sortBy = sortBy;
        this.sortDir = sortDir;
        this.nextPageToken = nextPageToken;
        this.maxPageSize = maxPageSize;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filters processor runs by their status. If not provided, no filter is applied.
     * <p>The status of a processor run:</p>
     * <ul>
     * <li><code>&quot;PENDING&quot;</code> - The processor run has not started yet</li>
     * <li><code>&quot;PROCESSING&quot;</code> - The processor run is in progress</li>
     * <li><code>&quot;PROCESSED&quot;</code> - The processor run completed successfully</li>
     * <li><code>&quot;FAILED&quot;</code> - The processor run encountered an error</li>
     * <li><code>&quot;CANCELLED&quot;</code> - The processor run was cancelled</li>
     * </ul>
     */
    @JsonProperty("status")
    public Optional<ProcessorStatus> getStatus() {
        return status;
    }

    /**
     * @return Filters processor runs by the processor ID. If not provided, runs for all processors are returned.
     * <p>Example: <code>&quot;dp_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
     */
    @JsonProperty("processorId")
    public Optional<String> getProcessorId() {
        return processorId;
    }

    /**
     * @return Filters processor runs by the processor type. If not provided, runs for all processor types are returned.
     * <p>Example: <code>&quot;EXTRACT&quot;</code></p>
     */
    @JsonProperty("processorType")
    public Optional<ProcessorType> getProcessorType() {
        return processorType;
    }

    /**
     * @return Filters processor runs by the source ID. The source ID corresponds to the entity that created the processor run.
     * <p>Example: <code>&quot;workflow_run_123&quot;</code></p>
     */
    @JsonProperty("sourceId")
    public Optional<String> getSourceId() {
        return sourceId;
    }

    /**
     * @return Filters processor runs by the source that created them. If not provided, runs from all sources are returned.
     * <p>The source of the processor run:</p>
     * <ul>
     * <li><code>&quot;ADMIN&quot;</code> - Created by admin</li>
     * <li><code>&quot;BATCH_PROCESSOR_RUN&quot;</code> - Created from a batch processor run</li>
     * <li><code>&quot;PLAYGROUND&quot;</code> - Created from playground</li>
     * <li><code>&quot;WORKFLOW_CONFIGURATION&quot;</code> - Created from workflow configuration</li>
     * <li><code>&quot;WORKFLOW_RUN&quot;</code> - Created from a workflow run</li>
     * <li><code>&quot;STUDIO&quot;</code> - Created from Studio</li>
     * <li><code>&quot;API&quot;</code> - Created via API</li>
     * </ul>
     */
    @JsonProperty("source")
    public Optional<ProcessorRunListRequestSource> getSource() {
        return source;
    }

    /**
     * @return Filters processor runs by the name of the file. Only returns processor runs where the file name contains this string.
     * <p>Example: <code>&quot;invoice&quot;</code></p>
     */
    @JsonProperty("fileNameContains")
    public Optional<String> getFileNameContains() {
        return fileNameContains;
    }

    /**
     * @return Sorts the processor runs by the given field.
     */
    @JsonProperty("sortBy")
    public Optional<SortByEnum> getSortBy() {
        return sortBy;
    }

    /**
     * @return Sorts the processor runs in ascending or descending order. Ascending order means the earliest processor run is returned first.
     */
    @JsonProperty("sortDir")
    public Optional<SortDirEnum> getSortDir() {
        return sortDir;
    }

    @JsonProperty("nextPageToken")
    public Optional<String> getNextPageToken() {
        return nextPageToken;
    }

    @JsonProperty("maxPageSize")
    public Optional<Integer> getMaxPageSize() {
        return maxPageSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessorRunListRequest && equalTo((ProcessorRunListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessorRunListRequest other) {
        return status.equals(other.status)
                && processorId.equals(other.processorId)
                && processorType.equals(other.processorType)
                && sourceId.equals(other.sourceId)
                && source.equals(other.source)
                && fileNameContains.equals(other.fileNameContains)
                && sortBy.equals(other.sortBy)
                && sortDir.equals(other.sortDir)
                && nextPageToken.equals(other.nextPageToken)
                && maxPageSize.equals(other.maxPageSize);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.processorId,
                this.processorType,
                this.sourceId,
                this.source,
                this.fileNameContains,
                this.sortBy,
                this.sortDir,
                this.nextPageToken,
                this.maxPageSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ProcessorStatus> status = Optional.empty();

        private Optional<String> processorId = Optional.empty();

        private Optional<ProcessorType> processorType = Optional.empty();

        private Optional<String> sourceId = Optional.empty();

        private Optional<ProcessorRunListRequestSource> source = Optional.empty();

        private Optional<String> fileNameContains = Optional.empty();

        private Optional<SortByEnum> sortBy = Optional.empty();

        private Optional<SortDirEnum> sortDir = Optional.empty();

        private Optional<String> nextPageToken = Optional.empty();

        private Optional<Integer> maxPageSize = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProcessorRunListRequest other) {
            status(other.getStatus());
            processorId(other.getProcessorId());
            processorType(other.getProcessorType());
            sourceId(other.getSourceId());
            source(other.getSource());
            fileNameContains(other.getFileNameContains());
            sortBy(other.getSortBy());
            sortDir(other.getSortDir());
            nextPageToken(other.getNextPageToken());
            maxPageSize(other.getMaxPageSize());
            return this;
        }

        /**
         * <p>Filters processor runs by their status. If not provided, no filter is applied.</p>
         * <p>The status of a processor run:</p>
         * <ul>
         * <li><code>&quot;PENDING&quot;</code> - The processor run has not started yet</li>
         * <li><code>&quot;PROCESSING&quot;</code> - The processor run is in progress</li>
         * <li><code>&quot;PROCESSED&quot;</code> - The processor run completed successfully</li>
         * <li><code>&quot;FAILED&quot;</code> - The processor run encountered an error</li>
         * <li><code>&quot;CANCELLED&quot;</code> - The processor run was cancelled</li>
         * </ul>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<ProcessorStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(ProcessorStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Filters processor runs by the processor ID. If not provided, runs for all processors are returned.</p>
         * <p>Example: <code>&quot;dp_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
         */
        @JsonSetter(value = "processorId", nulls = Nulls.SKIP)
        public Builder processorId(Optional<String> processorId) {
            this.processorId = processorId;
            return this;
        }

        public Builder processorId(String processorId) {
            this.processorId = Optional.ofNullable(processorId);
            return this;
        }

        /**
         * <p>Filters processor runs by the processor type. If not provided, runs for all processor types are returned.</p>
         * <p>Example: <code>&quot;EXTRACT&quot;</code></p>
         */
        @JsonSetter(value = "processorType", nulls = Nulls.SKIP)
        public Builder processorType(Optional<ProcessorType> processorType) {
            this.processorType = processorType;
            return this;
        }

        public Builder processorType(ProcessorType processorType) {
            this.processorType = Optional.ofNullable(processorType);
            return this;
        }

        /**
         * <p>Filters processor runs by the source ID. The source ID corresponds to the entity that created the processor run.</p>
         * <p>Example: <code>&quot;workflow_run_123&quot;</code></p>
         */
        @JsonSetter(value = "sourceId", nulls = Nulls.SKIP)
        public Builder sourceId(Optional<String> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        public Builder sourceId(String sourceId) {
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        /**
         * <p>Filters processor runs by the source that created them. If not provided, runs from all sources are returned.</p>
         * <p>The source of the processor run:</p>
         * <ul>
         * <li><code>&quot;ADMIN&quot;</code> - Created by admin</li>
         * <li><code>&quot;BATCH_PROCESSOR_RUN&quot;</code> - Created from a batch processor run</li>
         * <li><code>&quot;PLAYGROUND&quot;</code> - Created from playground</li>
         * <li><code>&quot;WORKFLOW_CONFIGURATION&quot;</code> - Created from workflow configuration</li>
         * <li><code>&quot;WORKFLOW_RUN&quot;</code> - Created from a workflow run</li>
         * <li><code>&quot;STUDIO&quot;</code> - Created from Studio</li>
         * <li><code>&quot;API&quot;</code> - Created via API</li>
         * </ul>
         */
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<ProcessorRunListRequestSource> source) {
            this.source = source;
            return this;
        }

        public Builder source(ProcessorRunListRequestSource source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * <p>Filters processor runs by the name of the file. Only returns processor runs where the file name contains this string.</p>
         * <p>Example: <code>&quot;invoice&quot;</code></p>
         */
        @JsonSetter(value = "fileNameContains", nulls = Nulls.SKIP)
        public Builder fileNameContains(Optional<String> fileNameContains) {
            this.fileNameContains = fileNameContains;
            return this;
        }

        public Builder fileNameContains(String fileNameContains) {
            this.fileNameContains = Optional.ofNullable(fileNameContains);
            return this;
        }

        /**
         * <p>Sorts the processor runs by the given field.</p>
         */
        @JsonSetter(value = "sortBy", nulls = Nulls.SKIP)
        public Builder sortBy(Optional<SortByEnum> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        public Builder sortBy(SortByEnum sortBy) {
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        /**
         * <p>Sorts the processor runs in ascending or descending order. Ascending order means the earliest processor run is returned first.</p>
         */
        @JsonSetter(value = "sortDir", nulls = Nulls.SKIP)
        public Builder sortDir(Optional<SortDirEnum> sortDir) {
            this.sortDir = sortDir;
            return this;
        }

        public Builder sortDir(SortDirEnum sortDir) {
            this.sortDir = Optional.ofNullable(sortDir);
            return this;
        }

        @JsonSetter(value = "nextPageToken", nulls = Nulls.SKIP)
        public Builder nextPageToken(Optional<String> nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }

        public Builder nextPageToken(String nextPageToken) {
            this.nextPageToken = Optional.ofNullable(nextPageToken);
            return this;
        }

        @JsonSetter(value = "maxPageSize", nulls = Nulls.SKIP)
        public Builder maxPageSize(Optional<Integer> maxPageSize) {
            this.maxPageSize = maxPageSize;
            return this;
        }

        public Builder maxPageSize(Integer maxPageSize) {
            this.maxPageSize = Optional.ofNullable(maxPageSize);
            return this;
        }

        public ProcessorRunListRequest build() {
            return new ProcessorRunListRequest(
                    status,
                    processorId,
                    processorType,
                    sourceId,
                    source,
                    fileNameContains,
                    sortBy,
                    sortDir,
                    nextPageToken,
                    maxPageSize,
                    additionalProperties);
        }
    }
}

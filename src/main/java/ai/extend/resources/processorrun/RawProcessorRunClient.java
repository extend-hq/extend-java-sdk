/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.processorrun;

import ai.extend.core.ClientOptions;
import ai.extend.core.ExtendClientApiException;
import ai.extend.core.ExtendClientException;
import ai.extend.core.ExtendClientHttpResponse;
import ai.extend.core.MediaTypes;
import ai.extend.core.ObjectMappers;
import ai.extend.core.RequestOptions;
import ai.extend.errors.BadRequestError;
import ai.extend.errors.InternalServerError;
import ai.extend.errors.NotFoundError;
import ai.extend.errors.TooManyRequestsError;
import ai.extend.errors.UnauthorizedError;
import ai.extend.resources.processorrun.requests.ProcessorRunCreateRequest;
import ai.extend.resources.processorrun.types.ProcessorRunCancelResponse;
import ai.extend.resources.processorrun.types.ProcessorRunCreateResponse;
import ai.extend.resources.processorrun.types.ProcessorRunDeleteResponse;
import ai.extend.resources.processorrun.types.ProcessorRunGetResponse;
import ai.extend.types.Error;
import ai.extend.types.ExtendError;
import ai.extend.types.TooManyRequestsErrorBody;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawProcessorRunClient {
    protected final ClientOptions clientOptions;

    public RawProcessorRunClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Run processors (extraction, classification, splitting, etc.) on a given document.
     * <p><strong>Synchronous vs Asynchronous Processing:</strong></p>
     * <ul>
     * <li><strong>Asynchronous (default)</strong>: Returns immediately with <code>PROCESSING</code> status. Use webhooks or polling to get results.</li>
     * <li><strong>Synchronous</strong>: Set <code>sync: true</code> to wait for completion and get final results in the response (5-minute timeout).</li>
     * </ul>
     * <p><strong>For asynchronous processing:</strong></p>
     * <ul>
     * <li>You can <a href="https://docs.extend.ai/2025-04-21/developers/webhooks/configuration">configure webhooks</a> to receive notifications when a processor run is complete or failed.</li>
     * <li>Or you can <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/get-processor-run">poll the get endpoint</a> for updates on the status of the processor run.</li>
     * </ul>
     */
    public ExtendClientHttpResponse<ProcessorRunCreateResponse> create(ProcessorRunCreateRequest request) {
        return create(request, null);
    }

    /**
     * Run processors (extraction, classification, splitting, etc.) on a given document.
     * <p><strong>Synchronous vs Asynchronous Processing:</strong></p>
     * <ul>
     * <li><strong>Asynchronous (default)</strong>: Returns immediately with <code>PROCESSING</code> status. Use webhooks or polling to get results.</li>
     * <li><strong>Synchronous</strong>: Set <code>sync: true</code> to wait for completion and get final results in the response (5-minute timeout).</li>
     * </ul>
     * <p><strong>For asynchronous processing:</strong></p>
     * <ul>
     * <li>You can <a href="https://docs.extend.ai/2025-04-21/developers/webhooks/configuration">configure webhooks</a> to receive notifications when a processor run is complete or failed.</li>
     * <li>Or you can <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/get-processor-run">poll the get endpoint</a> for updates on the status of the processor run.</li>
     * </ul>
     */
    public ExtendClientHttpResponse<ProcessorRunCreateResponse> create(
            ProcessorRunCreateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("processor_runs")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new ExtendClientException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ProcessorRunCreateResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 429:
                        throw new TooManyRequestsError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, TooManyRequestsErrorBody.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }

    /**
     * Retrieve details about a specific processor run, including its status, outputs, and any edits made during review.
     * <p>A common use case for this endpoint is to poll for the status and final output of an async processor run when using the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/run-processor">Run Processor</a> endpoint. For instance, if you do not want to not configure webhooks to receive the output via completion/failure events.</p>
     */
    public ExtendClientHttpResponse<ProcessorRunGetResponse> get(String id) {
        return get(id, null);
    }

    /**
     * Retrieve details about a specific processor run, including its status, outputs, and any edits made during review.
     * <p>A common use case for this endpoint is to poll for the status and final output of an async processor run when using the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/run-processor">Run Processor</a> endpoint. For instance, if you do not want to not configure webhooks to receive the output via completion/failure events.</p>
     */
    public ExtendClientHttpResponse<ProcessorRunGetResponse> get(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("processor_runs")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ProcessorRunGetResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }

    /**
     * Delete a processor run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public ExtendClientHttpResponse<ProcessorRunDeleteResponse> delete(String id) {
        return delete(id, null);
    }

    /**
     * Delete a processor run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public ExtendClientHttpResponse<ProcessorRunDeleteResponse> delete(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("processor_runs")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ProcessorRunDeleteResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ExtendError.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }

    /**
     * Cancel a running processor run by its ID. This endpoint allows you to stop a processor run that is currently in progress.
     * <p>Note: Only processor runs with a status of <code>&quot;PROCESSING&quot;</code> can be cancelled. Processor runs that have already completed, failed, or been cancelled cannot be cancelled again.</p>
     */
    public ExtendClientHttpResponse<ProcessorRunCancelResponse> cancel(String id) {
        return cancel(id, null);
    }

    /**
     * Cancel a running processor run by its ID. This endpoint allows you to stop a processor run that is currently in progress.
     * <p>Note: Only processor runs with a status of <code>&quot;PROCESSING&quot;</code> can be cancelled. Processor runs that have already completed, failed, or been cancelled cannot be cancelled again.</p>
     */
    public ExtendClientHttpResponse<ProcessorRunCancelResponse> cancel(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("processor_runs")
                .addPathSegment(id)
                .addPathSegments("cancel")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ProcessorRunCancelResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }
}

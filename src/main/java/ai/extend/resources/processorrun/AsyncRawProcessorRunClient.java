/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.processorrun;

import ai.extend.core.ClientOptions;
import ai.extend.core.ExtendClientApiException;
import ai.extend.core.ExtendClientException;
import ai.extend.core.ExtendClientHttpResponse;
import ai.extend.core.MediaTypes;
import ai.extend.core.ObjectMappers;
import ai.extend.core.QueryStringMapper;
import ai.extend.core.RequestOptions;
import ai.extend.errors.BadRequestError;
import ai.extend.errors.InternalServerError;
import ai.extend.errors.NotFoundError;
import ai.extend.errors.TooManyRequestsError;
import ai.extend.errors.UnauthorizedError;
import ai.extend.resources.processorrun.requests.ProcessorRunCreateRequest;
import ai.extend.resources.processorrun.requests.ProcessorRunListRequest;
import ai.extend.resources.processorrun.types.ProcessorRunCancelResponse;
import ai.extend.resources.processorrun.types.ProcessorRunCreateResponse;
import ai.extend.resources.processorrun.types.ProcessorRunDeleteResponse;
import ai.extend.resources.processorrun.types.ProcessorRunGetResponse;
import ai.extend.resources.processorrun.types.ProcessorRunListResponse;
import ai.extend.types.Error;
import ai.extend.types.ExtendError;
import ai.extend.types.TooManyRequestsErrorBody;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawProcessorRunClient {
    protected final ClientOptions clientOptions;

    public AsyncRawProcessorRunClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * List runs of a Processor. A ProcessorRun represents a single execution of a processor against a file.
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunListResponse>> list() {
        return list(ProcessorRunListRequest.builder().build());
    }

    /**
     * List runs of a Processor. A ProcessorRun represents a single execution of a processor against a file.
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunListResponse>> list(ProcessorRunListRequest request) {
        return list(request, null);
    }

    /**
     * List runs of a Processor. A ProcessorRun represents a single execution of a processor against a file.
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunListResponse>> list(
            ProcessorRunListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("processor_runs");
        if (request.getStatus().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "status", request.getStatus().get(), false);
        }
        if (request.getProcessorId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "processorId", request.getProcessorId().get(), false);
        }
        if (request.getProcessorType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "processorType", request.getProcessorType().get(), false);
        }
        if (request.getSourceId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sourceId", request.getSourceId().get(), false);
        }
        if (request.getSource().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "source", request.getSource().get(), false);
        }
        if (request.getFileNameContains().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "fileNameContains", request.getFileNameContains().get(), false);
        }
        if (request.getSortBy().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sortBy", request.getSortBy().get(), false);
        }
        if (request.getSortDir().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sortDir", request.getSortDir().get(), false);
        }
        if (request.getNextPageToken().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "nextPageToken", request.getNextPageToken().get(), false);
        }
        if (request.getMaxPageSize().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "maxPageSize", request.getMaxPageSize().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<ExtendClientHttpResponse<ProcessorRunListResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new ExtendClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), ProcessorRunListResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new ExtendClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Run processors (extraction, classification, splitting, etc.) on a given document.
     * <p><strong>Synchronous vs Asynchronous Processing:</strong></p>
     * <ul>
     * <li><strong>Asynchronous (default)</strong>: Returns immediately with <code>PROCESSING</code> status. Use webhooks or polling to get results.</li>
     * <li><strong>Synchronous</strong>: Set <code>sync: true</code> to wait for completion and get final results in the response (5-minute timeout).</li>
     * </ul>
     * <p><strong>For asynchronous processing:</strong></p>
     * <ul>
     * <li>You can <a href="https://docs.extend.ai/2025-04-21/developers/webhooks/configuration">configure webhooks</a> to receive notifications when a processor run is complete or failed.</li>
     * <li>Or you can <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/get-processor-run">poll the get endpoint</a> for updates on the status of the processor run.</li>
     * </ul>
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunCreateResponse>> create(
            ProcessorRunCreateRequest request) {
        return create(request, null);
    }

    /**
     * Run processors (extraction, classification, splitting, etc.) on a given document.
     * <p><strong>Synchronous vs Asynchronous Processing:</strong></p>
     * <ul>
     * <li><strong>Asynchronous (default)</strong>: Returns immediately with <code>PROCESSING</code> status. Use webhooks or polling to get results.</li>
     * <li><strong>Synchronous</strong>: Set <code>sync: true</code> to wait for completion and get final results in the response (5-minute timeout).</li>
     * </ul>
     * <p><strong>For asynchronous processing:</strong></p>
     * <ul>
     * <li>You can <a href="https://docs.extend.ai/2025-04-21/developers/webhooks/configuration">configure webhooks</a> to receive notifications when a processor run is complete or failed.</li>
     * <li>Or you can <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/get-processor-run">poll the get endpoint</a> for updates on the status of the processor run.</li>
     * </ul>
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunCreateResponse>> create(
            ProcessorRunCreateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("processor_runs")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new ExtendClientException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<ExtendClientHttpResponse<ProcessorRunCreateResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new ExtendClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), ProcessorRunCreateResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 429:
                                future.completeExceptionally(new TooManyRequestsError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, TooManyRequestsErrorBody.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new ExtendClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieve details about a specific processor run, including its status, outputs, and any edits made during review.
     * <p>A common use case for this endpoint is to poll for the status and final output of an async processor run when using the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/run-processor">Run Processor</a> endpoint. For instance, if you do not want to not configure webhooks to receive the output via completion/failure events.</p>
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunGetResponse>> get(String id) {
        return get(id, null);
    }

    /**
     * Retrieve details about a specific processor run, including its status, outputs, and any edits made during review.
     * <p>A common use case for this endpoint is to poll for the status and final output of an async processor run when using the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/run-processor">Run Processor</a> endpoint. For instance, if you do not want to not configure webhooks to receive the output via completion/failure events.</p>
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunGetResponse>> get(
            String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("processor_runs")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<ExtendClientHttpResponse<ProcessorRunGetResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new ExtendClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), ProcessorRunGetResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new ExtendClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Delete a processor run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunDeleteResponse>> delete(String id) {
        return delete(id, null);
    }

    /**
     * Delete a processor run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunDeleteResponse>> delete(
            String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("processor_runs")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<ExtendClientHttpResponse<ProcessorRunDeleteResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new ExtendClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), ProcessorRunDeleteResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ExtendError.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new ExtendClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Cancel a running processor run by its ID. This endpoint allows you to stop a processor run that is currently in progress.
     * <p>Note: Only processor runs with a status of <code>&quot;PROCESSING&quot;</code> can be cancelled. Processor runs that have already completed, failed, or been cancelled cannot be cancelled again.</p>
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunCancelResponse>> cancel(String id) {
        return cancel(id, null);
    }

    /**
     * Cancel a running processor run by its ID. This endpoint allows you to stop a processor run that is currently in progress.
     * <p>Note: Only processor runs with a status of <code>&quot;PROCESSING&quot;</code> can be cancelled. Processor runs that have already completed, failed, or been cancelled cannot be cancelled again.</p>
     */
    public CompletableFuture<ExtendClientHttpResponse<ProcessorRunCancelResponse>> cancel(
            String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("processor_runs")
                .addPathSegment(id)
                .addPathSegments("cancel")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<ExtendClientHttpResponse<ProcessorRunCancelResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new ExtendClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), ProcessorRunCancelResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new ExtendClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.processorrun;

import ai.extend.core.ClientOptions;
import ai.extend.core.RequestOptions;
import ai.extend.resources.processorrun.requests.ProcessorRunCreateRequest;
import ai.extend.resources.processorrun.requests.ProcessorRunListRequest;
import ai.extend.resources.processorrun.types.ProcessorRunCancelResponse;
import ai.extend.resources.processorrun.types.ProcessorRunCreateResponse;
import ai.extend.resources.processorrun.types.ProcessorRunDeleteResponse;
import ai.extend.resources.processorrun.types.ProcessorRunGetResponse;
import ai.extend.resources.processorrun.types.ProcessorRunListResponse;

public class ProcessorRunClient {
    protected final ClientOptions clientOptions;

    private final RawProcessorRunClient rawClient;

    public ProcessorRunClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawProcessorRunClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawProcessorRunClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * List runs of a Processor. A ProcessorRun represents a single execution of a processor against a file.
     */
    public ProcessorRunListResponse list() {
        return this.rawClient.list().body();
    }

    /**
     * List runs of a Processor. A ProcessorRun represents a single execution of a processor against a file.
     */
    public ProcessorRunListResponse list(ProcessorRunListRequest request) {
        return this.rawClient.list(request).body();
    }

    /**
     * List runs of a Processor. A ProcessorRun represents a single execution of a processor against a file.
     */
    public ProcessorRunListResponse list(ProcessorRunListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).body();
    }

    /**
     * Run processors (extraction, classification, splitting, etc.) on a given document.
     * <p><strong>Synchronous vs Asynchronous Processing:</strong></p>
     * <ul>
     * <li><strong>Asynchronous (default)</strong>: Returns immediately with <code>PROCESSING</code> status. Use webhooks or polling to get results.</li>
     * <li><strong>Synchronous</strong>: Set <code>sync: true</code> to wait for completion and get final results in the response (5-minute timeout).</li>
     * </ul>
     * <p><strong>For asynchronous processing:</strong></p>
     * <ul>
     * <li>You can <a href="https://docs.extend.ai/2025-04-21/developers/webhooks/configuration">configure webhooks</a> to receive notifications when a processor run is complete or failed.</li>
     * <li>Or you can <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/get-processor-run">poll the get endpoint</a> for updates on the status of the processor run.</li>
     * </ul>
     */
    public ProcessorRunCreateResponse create(ProcessorRunCreateRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * Run processors (extraction, classification, splitting, etc.) on a given document.
     * <p><strong>Synchronous vs Asynchronous Processing:</strong></p>
     * <ul>
     * <li><strong>Asynchronous (default)</strong>: Returns immediately with <code>PROCESSING</code> status. Use webhooks or polling to get results.</li>
     * <li><strong>Synchronous</strong>: Set <code>sync: true</code> to wait for completion and get final results in the response (5-minute timeout).</li>
     * </ul>
     * <p><strong>For asynchronous processing:</strong></p>
     * <ul>
     * <li>You can <a href="https://docs.extend.ai/2025-04-21/developers/webhooks/configuration">configure webhooks</a> to receive notifications when a processor run is complete or failed.</li>
     * <li>Or you can <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/get-processor-run">poll the get endpoint</a> for updates on the status of the processor run.</li>
     * </ul>
     */
    public ProcessorRunCreateResponse create(ProcessorRunCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * Retrieve details about a specific processor run, including its status, outputs, and any edits made during review.
     * <p>A common use case for this endpoint is to poll for the status and final output of an async processor run when using the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/run-processor">Run Processor</a> endpoint. For instance, if you do not want to not configure webhooks to receive the output via completion/failure events.</p>
     */
    public ProcessorRunGetResponse get(String id) {
        return this.rawClient.get(id).body();
    }

    /**
     * Retrieve details about a specific processor run, including its status, outputs, and any edits made during review.
     * <p>A common use case for this endpoint is to poll for the status and final output of an async processor run when using the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/processor-endpoints/run-processor">Run Processor</a> endpoint. For instance, if you do not want to not configure webhooks to receive the output via completion/failure events.</p>
     */
    public ProcessorRunGetResponse get(String id, RequestOptions requestOptions) {
        return this.rawClient.get(id, requestOptions).body();
    }

    /**
     * Delete a processor run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public ProcessorRunDeleteResponse delete(String id) {
        return this.rawClient.delete(id).body();
    }

    /**
     * Delete a processor run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public ProcessorRunDeleteResponse delete(String id, RequestOptions requestOptions) {
        return this.rawClient.delete(id, requestOptions).body();
    }

    /**
     * Cancel a running processor run by its ID. This endpoint allows you to stop a processor run that is currently in progress.
     * <p>Note: Only processor runs with a status of <code>&quot;PROCESSING&quot;</code> can be cancelled. Processor runs that have already completed, failed, or been cancelled cannot be cancelled again.</p>
     */
    public ProcessorRunCancelResponse cancel(String id) {
        return this.rawClient.cancel(id).body();
    }

    /**
     * Cancel a running processor run by its ID. This endpoint allows you to stop a processor run that is currently in progress.
     * <p>Note: Only processor runs with a status of <code>&quot;PROCESSING&quot;</code> can be cancelled. Processor runs that have already completed, failed, or been cancelled cannot be cancelled again.</p>
     */
    public ProcessorRunCancelResponse cancel(String id, RequestOptions requestOptions) {
        return this.rawClient.cancel(id, requestOptions).body();
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.batchworkflowrun;

import ai.extend.core.ClientOptions;
import ai.extend.core.ExtendClientApiException;
import ai.extend.core.ExtendClientException;
import ai.extend.core.ExtendClientHttpResponse;
import ai.extend.core.MediaTypes;
import ai.extend.core.ObjectMappers;
import ai.extend.core.RequestOptions;
import ai.extend.errors.BadRequestError;
import ai.extend.errors.NotFoundError;
import ai.extend.errors.UnauthorizedError;
import ai.extend.resources.batchworkflowrun.requests.BatchWorkflowRunCreateRequest;
import ai.extend.resources.batchworkflowrun.types.BatchWorkflowRunCreateResponse;
import ai.extend.types.Error;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawBatchWorkflowRunClient {
    protected final ClientOptions clientOptions;

    public RawBatchWorkflowRunClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * This endpoint allows you to efficiently initiate large batches of workflow runs in a single request (up to 1,000 in a single request, but you can queue up multiple batches in rapid succession). It accepts an array of inputs, each containing a file and metadata pair. The primary use case for this endpoint is for doing large bulk runs of &gt;1000 files at a time that can process over the course of a few hours without needing to manage rate limits that would likely occur using the primary run endpoint.
     * <p>Unlike the single <a href="/developers/api-reference/workflow-endpoints/run-workflow">Run Workflow</a> endpoint which returns the details of the created workflow runs immediately, this batch endpoint returns a <code>batchId</code>.</p>
     * <p>Our recommended usage pattern is to integrate with <a href="/product/webhooks/configuration">Webhooks</a> for consuming results, using the <code>metadata</code> and <code>batchId</code> to match up results to the original inputs in your downstream systems. However, you can integrate in a polling mechanism by using a combination of the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/list-workflow-runs">List Workflow Runs</a> endpoint to fetch all runs via a batch, and then <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/get-workflow-run">Get Workflow Run</a> to fetch the full outputs each run.</p>
     * <p><strong>Priority:</strong> All workflow runs created through this batch endpoint are automatically assigned a priority of 90.</p>
     * <p><strong>Processing and Monitoring:</strong>
     * Upon successful submission, the endpoint returns a <code>batchId</code>. The individual workflow runs are then queued for processing.</p>
     * <ul>
     * <li><strong>Monitoring:</strong> Track the progress and consume results of individual runs using <a href="/product/webhooks/configuration">Webhooks</a>. Subscribe to events like <code>workflow_run.completed</code>, <code>workflow_run.failed</code>, etc. The webhook payload for these events will include the corresponding <code>batchId</code> and the <code>metadata</code> you provided for each input.</li>
     * <li><strong>Fetching Results:</strong> You can also use the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/list-workflow-runs">List Workflow Runs</a> endpoint and filter using the <code>batchId</code> query param.</li>
     * </ul>
     */
    public ExtendClientHttpResponse<BatchWorkflowRunCreateResponse> create(BatchWorkflowRunCreateRequest request) {
        return create(request, null);
    }

    /**
     * This endpoint allows you to efficiently initiate large batches of workflow runs in a single request (up to 1,000 in a single request, but you can queue up multiple batches in rapid succession). It accepts an array of inputs, each containing a file and metadata pair. The primary use case for this endpoint is for doing large bulk runs of &gt;1000 files at a time that can process over the course of a few hours without needing to manage rate limits that would likely occur using the primary run endpoint.
     * <p>Unlike the single <a href="/developers/api-reference/workflow-endpoints/run-workflow">Run Workflow</a> endpoint which returns the details of the created workflow runs immediately, this batch endpoint returns a <code>batchId</code>.</p>
     * <p>Our recommended usage pattern is to integrate with <a href="/product/webhooks/configuration">Webhooks</a> for consuming results, using the <code>metadata</code> and <code>batchId</code> to match up results to the original inputs in your downstream systems. However, you can integrate in a polling mechanism by using a combination of the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/list-workflow-runs">List Workflow Runs</a> endpoint to fetch all runs via a batch, and then <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/get-workflow-run">Get Workflow Run</a> to fetch the full outputs each run.</p>
     * <p><strong>Priority:</strong> All workflow runs created through this batch endpoint are automatically assigned a priority of 90.</p>
     * <p><strong>Processing and Monitoring:</strong>
     * Upon successful submission, the endpoint returns a <code>batchId</code>. The individual workflow runs are then queued for processing.</p>
     * <ul>
     * <li><strong>Monitoring:</strong> Track the progress and consume results of individual runs using <a href="/product/webhooks/configuration">Webhooks</a>. Subscribe to events like <code>workflow_run.completed</code>, <code>workflow_run.failed</code>, etc. The webhook payload for these events will include the corresponding <code>batchId</code> and the <code>metadata</code> you provided for each input.</li>
     * <li><strong>Fetching Results:</strong> You can also use the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/list-workflow-runs">List Workflow Runs</a> endpoint and filter using the <code>batchId</code> query param.</li>
     * </ul>
     */
    public ExtendClientHttpResponse<BatchWorkflowRunCreateResponse> create(
            BatchWorkflowRunCreateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("workflow_runs/batch")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new ExtendClientException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), BatchWorkflowRunCreateResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }
}

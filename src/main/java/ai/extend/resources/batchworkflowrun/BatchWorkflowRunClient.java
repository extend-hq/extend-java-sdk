/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.batchworkflowrun;

import ai.extend.core.ClientOptions;
import ai.extend.core.RequestOptions;
import ai.extend.resources.batchworkflowrun.requests.BatchWorkflowRunCreateRequest;
import ai.extend.resources.batchworkflowrun.types.BatchWorkflowRunCreateResponse;

public class BatchWorkflowRunClient {
    protected final ClientOptions clientOptions;

    private final RawBatchWorkflowRunClient rawClient;

    public BatchWorkflowRunClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawBatchWorkflowRunClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawBatchWorkflowRunClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * This endpoint allows you to efficiently initiate large batches of workflow runs in a single request (up to 1,000 in a single request, but you can queue up multiple batches in rapid succession). It accepts an array of inputs, each containing a file and metadata pair. The primary use case for this endpoint is for doing large bulk runs of &gt;1000 files at a time that can process over the course of a few hours without needing to manage rate limits that would likely occur using the primary run endpoint.
     * <p>Unlike the single <a href="/developers/api-reference/workflow-endpoints/run-workflow">Run Workflow</a> endpoint which returns the details of the created workflow runs immediately, this batch endpoint returns a <code>batchId</code>.</p>
     * <p>Our recommended usage pattern is to integrate with <a href="/product/webhooks/configuration">Webhooks</a> for consuming results, using the <code>metadata</code> and <code>batchId</code> to match up results to the original inputs in your downstream systems. However, you can integrate in a polling mechanism by using a combination of the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/list-workflow-runs">List Workflow Runs</a> endpoint to fetch all runs via a batch, and then <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/get-workflow-run">Get Workflow Run</a> to fetch the full outputs each run.</p>
     * <p><strong>Priority:</strong> All workflow runs created through this batch endpoint are automatically assigned a priority of 90.</p>
     * <p><strong>Processing and Monitoring:</strong>
     * Upon successful submission, the endpoint returns a <code>batchId</code>. The individual workflow runs are then queued for processing.</p>
     * <ul>
     * <li><strong>Monitoring:</strong> Track the progress and consume results of individual runs using <a href="/product/webhooks/configuration">Webhooks</a>. Subscribe to events like <code>workflow_run.completed</code>, <code>workflow_run.failed</code>, etc. The webhook payload for these events will include the corresponding <code>batchId</code> and the <code>metadata</code> you provided for each input.</li>
     * <li><strong>Fetching Results:</strong> You can also use the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/list-workflow-runs">List Workflow Runs</a> endpoint and filter using the <code>batchId</code> query param.</li>
     * </ul>
     */
    public BatchWorkflowRunCreateResponse create(BatchWorkflowRunCreateRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * This endpoint allows you to efficiently initiate large batches of workflow runs in a single request (up to 1,000 in a single request, but you can queue up multiple batches in rapid succession). It accepts an array of inputs, each containing a file and metadata pair. The primary use case for this endpoint is for doing large bulk runs of &gt;1000 files at a time that can process over the course of a few hours without needing to manage rate limits that would likely occur using the primary run endpoint.
     * <p>Unlike the single <a href="/developers/api-reference/workflow-endpoints/run-workflow">Run Workflow</a> endpoint which returns the details of the created workflow runs immediately, this batch endpoint returns a <code>batchId</code>.</p>
     * <p>Our recommended usage pattern is to integrate with <a href="/product/webhooks/configuration">Webhooks</a> for consuming results, using the <code>metadata</code> and <code>batchId</code> to match up results to the original inputs in your downstream systems. However, you can integrate in a polling mechanism by using a combination of the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/list-workflow-runs">List Workflow Runs</a> endpoint to fetch all runs via a batch, and then <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/get-workflow-run">Get Workflow Run</a> to fetch the full outputs each run.</p>
     * <p><strong>Priority:</strong> All workflow runs created through this batch endpoint are automatically assigned a priority of 90.</p>
     * <p><strong>Processing and Monitoring:</strong>
     * Upon successful submission, the endpoint returns a <code>batchId</code>. The individual workflow runs are then queued for processing.</p>
     * <ul>
     * <li><strong>Monitoring:</strong> Track the progress and consume results of individual runs using <a href="/product/webhooks/configuration">Webhooks</a>. Subscribe to events like <code>workflow_run.completed</code>, <code>workflow_run.failed</code>, etc. The webhook payload for these events will include the corresponding <code>batchId</code> and the <code>metadata</code> you provided for each input.</li>
     * <li><strong>Fetching Results:</strong> You can also use the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/list-workflow-runs">List Workflow Runs</a> endpoint and filter using the <code>batchId</code> query param.</li>
     * </ul>
     */
    public BatchWorkflowRunCreateResponse create(BatchWorkflowRunCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }
}

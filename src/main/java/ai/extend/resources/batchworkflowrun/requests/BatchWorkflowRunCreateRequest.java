/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.batchworkflowrun.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.resources.batchworkflowrun.types.BatchWorkflowRunCreateRequestInputsItem;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchWorkflowRunCreateRequest.Builder.class)
public final class BatchWorkflowRunCreateRequest {
    private final String workflowId;

    private final Optional<String> version;

    private final List<BatchWorkflowRunCreateRequestInputsItem> inputs;

    private final Map<String, Object> additionalProperties;

    private BatchWorkflowRunCreateRequest(
            String workflowId,
            Optional<String> version,
            List<BatchWorkflowRunCreateRequestInputsItem> inputs,
            Map<String, Object> additionalProperties) {
        this.workflowId = workflowId;
        this.version = version;
        this.inputs = inputs;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the workflow to run. This ID will start with &quot;workflow_&quot;. This ID can be found viewing the workflow on the Extend platform.
     * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
     */
    @JsonProperty("workflowId")
    public String getWorkflowId() {
        return workflowId;
    }

    /**
     * @return An optional version of the workflow to use. This can be a specific version number (e.g., <code>&quot;1&quot;</code>, <code>&quot;2&quot;</code>) found on the Extend platform, or <code>&quot;draft&quot;</code> to use the current unpublished draft version. When a version is not supplied, the latest deployed version of the workflow will be used. If no deployed version exists, the draft version will be used.
     */
    @JsonProperty("version")
    public Optional<String> getVersion() {
        return version;
    }

    /**
     * @return An array of input objects to be processed by the workflow. Each object represents a single workflow run to be created. The array must contain at least 1 input and at most 1000 inputs.
     */
    @JsonProperty("inputs")
    public List<BatchWorkflowRunCreateRequestInputsItem> getInputs() {
        return inputs;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchWorkflowRunCreateRequest && equalTo((BatchWorkflowRunCreateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchWorkflowRunCreateRequest other) {
        return workflowId.equals(other.workflowId) && version.equals(other.version) && inputs.equals(other.inputs);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.workflowId, this.version, this.inputs);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static WorkflowIdStage builder() {
        return new Builder();
    }

    public interface WorkflowIdStage {
        /**
         * <p>The ID of the workflow to run. This ID will start with &quot;workflow_&quot;. This ID can be found viewing the workflow on the Extend platform.</p>
         * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
         */
        _FinalStage workflowId(@NotNull String workflowId);

        Builder from(BatchWorkflowRunCreateRequest other);
    }

    public interface _FinalStage {
        BatchWorkflowRunCreateRequest build();

        /**
         * <p>An optional version of the workflow to use. This can be a specific version number (e.g., <code>&quot;1&quot;</code>, <code>&quot;2&quot;</code>) found on the Extend platform, or <code>&quot;draft&quot;</code> to use the current unpublished draft version. When a version is not supplied, the latest deployed version of the workflow will be used. If no deployed version exists, the draft version will be used.</p>
         */
        _FinalStage version(Optional<String> version);

        _FinalStage version(String version);

        /**
         * <p>An array of input objects to be processed by the workflow. Each object represents a single workflow run to be created. The array must contain at least 1 input and at most 1000 inputs.</p>
         */
        _FinalStage inputs(List<BatchWorkflowRunCreateRequestInputsItem> inputs);

        _FinalStage addInputs(BatchWorkflowRunCreateRequestInputsItem inputs);

        _FinalStage addAllInputs(List<BatchWorkflowRunCreateRequestInputsItem> inputs);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements WorkflowIdStage, _FinalStage {
        private String workflowId;

        private List<BatchWorkflowRunCreateRequestInputsItem> inputs = new ArrayList<>();

        private Optional<String> version = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BatchWorkflowRunCreateRequest other) {
            workflowId(other.getWorkflowId());
            version(other.getVersion());
            inputs(other.getInputs());
            return this;
        }

        /**
         * <p>The ID of the workflow to run. This ID will start with &quot;workflow_&quot;. This ID can be found viewing the workflow on the Extend platform.</p>
         * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
         * <p>The ID of the workflow to run. This ID will start with &quot;workflow_&quot;. This ID can be found viewing the workflow on the Extend platform.</p>
         * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("workflowId")
        public _FinalStage workflowId(@NotNull String workflowId) {
            this.workflowId = Objects.requireNonNull(workflowId, "workflowId must not be null");
            return this;
        }

        /**
         * <p>An array of input objects to be processed by the workflow. Each object represents a single workflow run to be created. The array must contain at least 1 input and at most 1000 inputs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllInputs(List<BatchWorkflowRunCreateRequestInputsItem> inputs) {
            this.inputs.addAll(inputs);
            return this;
        }

        /**
         * <p>An array of input objects to be processed by the workflow. Each object represents a single workflow run to be created. The array must contain at least 1 input and at most 1000 inputs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addInputs(BatchWorkflowRunCreateRequestInputsItem inputs) {
            this.inputs.add(inputs);
            return this;
        }

        /**
         * <p>An array of input objects to be processed by the workflow. Each object represents a single workflow run to be created. The array must contain at least 1 input and at most 1000 inputs.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "inputs", nulls = Nulls.SKIP)
        public _FinalStage inputs(List<BatchWorkflowRunCreateRequestInputsItem> inputs) {
            this.inputs.clear();
            this.inputs.addAll(inputs);
            return this;
        }

        /**
         * <p>An optional version of the workflow to use. This can be a specific version number (e.g., <code>&quot;1&quot;</code>, <code>&quot;2&quot;</code>) found on the Extend platform, or <code>&quot;draft&quot;</code> to use the current unpublished draft version. When a version is not supplied, the latest deployed version of the workflow will be used. If no deployed version exists, the draft version will be used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage version(String version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>An optional version of the workflow to use. This can be a specific version number (e.g., <code>&quot;1&quot;</code>, <code>&quot;2&quot;</code>) found on the Extend platform, or <code>&quot;draft&quot;</code> to use the current unpublished draft version. When a version is not supplied, the latest deployed version of the workflow will be used. If no deployed version exists, the draft version will be used.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<String> version) {
            this.version = version;
            return this;
        }

        @java.lang.Override
        public BatchWorkflowRunCreateRequest build() {
            return new BatchWorkflowRunCreateRequest(workflowId, version, inputs, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.batchworkflowrun.types;

import ai.extend.core.ObjectMappers;
import ai.extend.types.BatchWorkflowRunFileInput;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchWorkflowRunCreateRequestInputsItem.Builder.class)
public final class BatchWorkflowRunCreateRequestInputsItem {
    private final Optional<BatchWorkflowRunFileInput> file;

    private final Optional<String> rawText;

    private final Optional<Map<String, Object>> metadata;

    private final Optional<Map<String, Object>> secrets;

    private final Map<String, Object> additionalProperties;

    private BatchWorkflowRunCreateRequestInputsItem(
            Optional<BatchWorkflowRunFileInput> file,
            Optional<String> rawText,
            Optional<Map<String, Object>> metadata,
            Optional<Map<String, Object>> secrets,
            Map<String, Object> additionalProperties) {
        this.file = file;
        this.rawText = rawText;
        this.metadata = metadata;
        this.secrets = secrets;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The file to be processed. Either <code>file</code> or <code>rawText</code> must be provided for each input.
     */
    @JsonProperty("file")
    public Optional<BatchWorkflowRunFileInput> getFile() {
        return file;
    }

    /**
     * @return A string containing raw text data to be processed. This will be treated as a <code>.txt</code> file by the workflow. Use the <code>file</code> parameter for structured data or specific file types. Either <code>file</code> or <code>rawText</code> must be provided for each input.
     */
    @JsonProperty("rawText")
    public Optional<String> getRawText() {
        return rawText;
    }

    /**
     * @return An optional object containing arbitrary key-value pairs to associate with this specific workflow run. This metadata will be included in webhook payloads and responses when fetching the workflow run details.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    /**
     * @return An optional object containing secrets to be used by processors within the workflow for this specific run. Secrets provided here override any globally configured secrets for the workflow.
     */
    @JsonProperty("secrets")
    public Optional<Map<String, Object>> getSecrets() {
        return secrets;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchWorkflowRunCreateRequestInputsItem
                && equalTo((BatchWorkflowRunCreateRequestInputsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchWorkflowRunCreateRequestInputsItem other) {
        return file.equals(other.file)
                && rawText.equals(other.rawText)
                && metadata.equals(other.metadata)
                && secrets.equals(other.secrets);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.file, this.rawText, this.metadata, this.secrets);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BatchWorkflowRunFileInput> file = Optional.empty();

        private Optional<String> rawText = Optional.empty();

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<Map<String, Object>> secrets = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BatchWorkflowRunCreateRequestInputsItem other) {
            file(other.getFile());
            rawText(other.getRawText());
            metadata(other.getMetadata());
            secrets(other.getSecrets());
            return this;
        }

        /**
         * <p>The file to be processed. Either <code>file</code> or <code>rawText</code> must be provided for each input.</p>
         */
        @JsonSetter(value = "file", nulls = Nulls.SKIP)
        public Builder file(Optional<BatchWorkflowRunFileInput> file) {
            this.file = file;
            return this;
        }

        public Builder file(BatchWorkflowRunFileInput file) {
            this.file = Optional.ofNullable(file);
            return this;
        }

        /**
         * <p>A string containing raw text data to be processed. This will be treated as a <code>.txt</code> file by the workflow. Use the <code>file</code> parameter for structured data or specific file types. Either <code>file</code> or <code>rawText</code> must be provided for each input.</p>
         */
        @JsonSetter(value = "rawText", nulls = Nulls.SKIP)
        public Builder rawText(Optional<String> rawText) {
            this.rawText = rawText;
            return this;
        }

        public Builder rawText(String rawText) {
            this.rawText = Optional.ofNullable(rawText);
            return this;
        }

        /**
         * <p>An optional object containing arbitrary key-value pairs to associate with this specific workflow run. This metadata will be included in webhook payloads and responses when fetching the workflow run details.</p>
         */
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>An optional object containing secrets to be used by processors within the workflow for this specific run. Secrets provided here override any globally configured secrets for the workflow.</p>
         */
        @JsonSetter(value = "secrets", nulls = Nulls.SKIP)
        public Builder secrets(Optional<Map<String, Object>> secrets) {
            this.secrets = secrets;
            return this;
        }

        public Builder secrets(Map<String, Object> secrets) {
            this.secrets = Optional.ofNullable(secrets);
            return this;
        }

        public BatchWorkflowRunCreateRequestInputsItem build() {
            return new BatchWorkflowRunCreateRequestInputsItem(file, rawText, metadata, secrets, additionalProperties);
        }
    }
}

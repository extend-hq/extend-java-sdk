/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.workflowrun.types;

import ai.extend.core.ObjectMappers;
import ai.extend.types.WorkflowRun;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WorkflowRunCreateResponse.Builder.class)
public final class WorkflowRunCreateResponse {
    private final boolean success;

    private final List<WorkflowRun> workflowRuns;

    private final Map<String, Object> additionalProperties;

    private WorkflowRunCreateResponse(
            boolean success, List<WorkflowRun> workflowRuns, Map<String, Object> additionalProperties) {
        this.success = success;
        this.workflowRuns = workflowRuns;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("success")
    public boolean getSuccess() {
        return success;
    }

    /**
     * @return An array of WorkflowRun objects, with each WorkflowRun corresponding to a single File that was passed in.
     */
    @JsonProperty("workflowRuns")
    public List<WorkflowRun> getWorkflowRuns() {
        return workflowRuns;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WorkflowRunCreateResponse && equalTo((WorkflowRunCreateResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WorkflowRunCreateResponse other) {
        return success == other.success && workflowRuns.equals(other.workflowRuns);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.success, this.workflowRuns);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SuccessStage builder() {
        return new Builder();
    }

    public interface SuccessStage {
        _FinalStage success(boolean success);

        Builder from(WorkflowRunCreateResponse other);
    }

    public interface _FinalStage {
        WorkflowRunCreateResponse build();

        /**
         * <p>An array of WorkflowRun objects, with each WorkflowRun corresponding to a single File that was passed in.</p>
         */
        _FinalStage workflowRuns(List<WorkflowRun> workflowRuns);

        _FinalStage addWorkflowRuns(WorkflowRun workflowRuns);

        _FinalStage addAllWorkflowRuns(List<WorkflowRun> workflowRuns);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SuccessStage, _FinalStage {
        private boolean success;

        private List<WorkflowRun> workflowRuns = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WorkflowRunCreateResponse other) {
            success(other.getSuccess());
            workflowRuns(other.getWorkflowRuns());
            return this;
        }

        @java.lang.Override
        @JsonSetter("success")
        public _FinalStage success(boolean success) {
            this.success = success;
            return this;
        }

        /**
         * <p>An array of WorkflowRun objects, with each WorkflowRun corresponding to a single File that was passed in.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllWorkflowRuns(List<WorkflowRun> workflowRuns) {
            this.workflowRuns.addAll(workflowRuns);
            return this;
        }

        /**
         * <p>An array of WorkflowRun objects, with each WorkflowRun corresponding to a single File that was passed in.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addWorkflowRuns(WorkflowRun workflowRuns) {
            this.workflowRuns.add(workflowRuns);
            return this;
        }

        /**
         * <p>An array of WorkflowRun objects, with each WorkflowRun corresponding to a single File that was passed in.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "workflowRuns", nulls = Nulls.SKIP)
        public _FinalStage workflowRuns(List<WorkflowRun> workflowRuns) {
            this.workflowRuns.clear();
            this.workflowRuns.addAll(workflowRuns);
            return this;
        }

        @java.lang.Override
        public WorkflowRunCreateResponse build() {
            return new WorkflowRunCreateResponse(success, workflowRuns, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.workflowrun.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.types.WorkflowRunFileInput;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WorkflowRunCreateRequest.Builder.class)
public final class WorkflowRunCreateRequest {
    private final String workflowId;

    private final Optional<List<WorkflowRunFileInput>> files;

    private final Optional<List<String>> rawTexts;

    private final Optional<String> version;

    private final Optional<Integer> priority;

    private final Optional<Map<String, Object>> metadata;

    private final Map<String, Object> additionalProperties;

    private WorkflowRunCreateRequest(
            String workflowId,
            Optional<List<WorkflowRunFileInput>> files,
            Optional<List<String>> rawTexts,
            Optional<String> version,
            Optional<Integer> priority,
            Optional<Map<String, Object>> metadata,
            Map<String, Object> additionalProperties) {
        this.workflowId = workflowId;
        this.files = files;
        this.rawTexts = rawTexts;
        this.version = version;
        this.priority = priority;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the workflow to run.
     * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
     */
    @JsonProperty("workflowId")
    public String getWorkflowId() {
        return workflowId;
    }

    /**
     * @return An array of files to process through the workflow. Either the <code>files</code> array or <code>rawTexts</code> array must be provided. Supported file types can be found <a href="/product/general/supported-file-types">here</a>. There is a limit if 50 files that can be processed at once using this endpoint. If you wish to process more at a time, consider using the <a href="/developers/api-reference/workflow-endpoints/batch-run-workflow">Batch Run Workflow</a> endpoint.
     */
    @JsonProperty("files")
    public Optional<List<WorkflowRunFileInput>> getFiles() {
        return files;
    }

    /**
     * @return An array of raw strings. Can be used in place of files when passing raw data. The raw data will be converted to <code>.txt</code> files and run through the workflow. If the data follows a specific format, it is recommended to use the files parameter instead. Either <code>files</code> or <code>rawTexts</code> must be provided.
     */
    @JsonProperty("rawTexts")
    public Optional<List<String>> getRawTexts() {
        return rawTexts;
    }

    /**
     * @return An optional version of the workflow that files will be run through. This number can be found when viewing the workflow on the Extend platform. When a version number is not supplied, the most recent published version of the workflow will be used. If no published versions exist, the draft version will be used. To run the <code>&quot;draft&quot;</code> version of a workflow, use <code>&quot;draft&quot;</code> as the version.
     * <p>Examples:</p>
     * <ul>
     * <li><code>&quot;3&quot;</code> - Run version 3 of the workflow</li>
     * <li><code>&quot;draft&quot;</code> - Run the draft version of the workflow</li>
     * </ul>
     */
    @JsonProperty("version")
    public Optional<String> getVersion() {
        return version;
    }

    /**
     * @return An optional value used to determine the relative order of WorkflowRuns when rate limiting is in effect. Lower values will be prioritized before higher values.
     */
    @JsonProperty("priority")
    public Optional<Integer> getPriority() {
        return priority;
    }

    /**
     * @return A optional metadata object that can be assigned to a specific WorkflowRun to help identify it. It will be returned in the response and webhooks. You can place any arbitrary <code>key : value</code> pairs in this object.
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WorkflowRunCreateRequest && equalTo((WorkflowRunCreateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WorkflowRunCreateRequest other) {
        return workflowId.equals(other.workflowId)
                && files.equals(other.files)
                && rawTexts.equals(other.rawTexts)
                && version.equals(other.version)
                && priority.equals(other.priority)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.workflowId, this.files, this.rawTexts, this.version, this.priority, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static WorkflowIdStage builder() {
        return new Builder();
    }

    public interface WorkflowIdStage {
        /**
         * <p>The ID of the workflow to run.</p>
         * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
         */
        _FinalStage workflowId(@NotNull String workflowId);

        Builder from(WorkflowRunCreateRequest other);
    }

    public interface _FinalStage {
        WorkflowRunCreateRequest build();

        /**
         * <p>An array of files to process through the workflow. Either the <code>files</code> array or <code>rawTexts</code> array must be provided. Supported file types can be found <a href="/product/general/supported-file-types">here</a>. There is a limit if 50 files that can be processed at once using this endpoint. If you wish to process more at a time, consider using the <a href="/developers/api-reference/workflow-endpoints/batch-run-workflow">Batch Run Workflow</a> endpoint.</p>
         */
        _FinalStage files(Optional<List<WorkflowRunFileInput>> files);

        _FinalStage files(List<WorkflowRunFileInput> files);

        /**
         * <p>An array of raw strings. Can be used in place of files when passing raw data. The raw data will be converted to <code>.txt</code> files and run through the workflow. If the data follows a specific format, it is recommended to use the files parameter instead. Either <code>files</code> or <code>rawTexts</code> must be provided.</p>
         */
        _FinalStage rawTexts(Optional<List<String>> rawTexts);

        _FinalStage rawTexts(List<String> rawTexts);

        /**
         * <p>An optional version of the workflow that files will be run through. This number can be found when viewing the workflow on the Extend platform. When a version number is not supplied, the most recent published version of the workflow will be used. If no published versions exist, the draft version will be used. To run the <code>&quot;draft&quot;</code> version of a workflow, use <code>&quot;draft&quot;</code> as the version.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;3&quot;</code> - Run version 3 of the workflow</li>
         * <li><code>&quot;draft&quot;</code> - Run the draft version of the workflow</li>
         * </ul>
         */
        _FinalStage version(Optional<String> version);

        _FinalStage version(String version);

        /**
         * <p>An optional value used to determine the relative order of WorkflowRuns when rate limiting is in effect. Lower values will be prioritized before higher values.</p>
         */
        _FinalStage priority(Optional<Integer> priority);

        _FinalStage priority(Integer priority);

        /**
         * <p>A optional metadata object that can be assigned to a specific WorkflowRun to help identify it. It will be returned in the response and webhooks. You can place any arbitrary <code>key : value</code> pairs in this object.</p>
         */
        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements WorkflowIdStage, _FinalStage {
        private String workflowId;

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<Integer> priority = Optional.empty();

        private Optional<String> version = Optional.empty();

        private Optional<List<String>> rawTexts = Optional.empty();

        private Optional<List<WorkflowRunFileInput>> files = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WorkflowRunCreateRequest other) {
            workflowId(other.getWorkflowId());
            files(other.getFiles());
            rawTexts(other.getRawTexts());
            version(other.getVersion());
            priority(other.getPriority());
            metadata(other.getMetadata());
            return this;
        }

        /**
         * <p>The ID of the workflow to run.</p>
         * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
         * <p>The ID of the workflow to run.</p>
         * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("workflowId")
        public _FinalStage workflowId(@NotNull String workflowId) {
            this.workflowId = Objects.requireNonNull(workflowId, "workflowId must not be null");
            return this;
        }

        /**
         * <p>A optional metadata object that can be assigned to a specific WorkflowRun to help identify it. It will be returned in the response and webhooks. You can place any arbitrary <code>key : value</code> pairs in this object.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>A optional metadata object that can be assigned to a specific WorkflowRun to help identify it. It will be returned in the response and webhooks. You can place any arbitrary <code>key : value</code> pairs in this object.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>An optional value used to determine the relative order of WorkflowRuns when rate limiting is in effect. Lower values will be prioritized before higher values.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage priority(Integer priority) {
            this.priority = Optional.ofNullable(priority);
            return this;
        }

        /**
         * <p>An optional value used to determine the relative order of WorkflowRuns when rate limiting is in effect. Lower values will be prioritized before higher values.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "priority", nulls = Nulls.SKIP)
        public _FinalStage priority(Optional<Integer> priority) {
            this.priority = priority;
            return this;
        }

        /**
         * <p>An optional version of the workflow that files will be run through. This number can be found when viewing the workflow on the Extend platform. When a version number is not supplied, the most recent published version of the workflow will be used. If no published versions exist, the draft version will be used. To run the <code>&quot;draft&quot;</code> version of a workflow, use <code>&quot;draft&quot;</code> as the version.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;3&quot;</code> - Run version 3 of the workflow</li>
         * <li><code>&quot;draft&quot;</code> - Run the draft version of the workflow</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage version(String version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>An optional version of the workflow that files will be run through. This number can be found when viewing the workflow on the Extend platform. When a version number is not supplied, the most recent published version of the workflow will be used. If no published versions exist, the draft version will be used. To run the <code>&quot;draft&quot;</code> version of a workflow, use <code>&quot;draft&quot;</code> as the version.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;3&quot;</code> - Run version 3 of the workflow</li>
         * <li><code>&quot;draft&quot;</code> - Run the draft version of the workflow</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<String> version) {
            this.version = version;
            return this;
        }

        /**
         * <p>An array of raw strings. Can be used in place of files when passing raw data. The raw data will be converted to <code>.txt</code> files and run through the workflow. If the data follows a specific format, it is recommended to use the files parameter instead. Either <code>files</code> or <code>rawTexts</code> must be provided.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage rawTexts(List<String> rawTexts) {
            this.rawTexts = Optional.ofNullable(rawTexts);
            return this;
        }

        /**
         * <p>An array of raw strings. Can be used in place of files when passing raw data. The raw data will be converted to <code>.txt</code> files and run through the workflow. If the data follows a specific format, it is recommended to use the files parameter instead. Either <code>files</code> or <code>rawTexts</code> must be provided.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "rawTexts", nulls = Nulls.SKIP)
        public _FinalStage rawTexts(Optional<List<String>> rawTexts) {
            this.rawTexts = rawTexts;
            return this;
        }

        /**
         * <p>An array of files to process through the workflow. Either the <code>files</code> array or <code>rawTexts</code> array must be provided. Supported file types can be found <a href="/product/general/supported-file-types">here</a>. There is a limit if 50 files that can be processed at once using this endpoint. If you wish to process more at a time, consider using the <a href="/developers/api-reference/workflow-endpoints/batch-run-workflow">Batch Run Workflow</a> endpoint.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage files(List<WorkflowRunFileInput> files) {
            this.files = Optional.ofNullable(files);
            return this;
        }

        /**
         * <p>An array of files to process through the workflow. Either the <code>files</code> array or <code>rawTexts</code> array must be provided. Supported file types can be found <a href="/product/general/supported-file-types">here</a>. There is a limit if 50 files that can be processed at once using this endpoint. If you wish to process more at a time, consider using the <a href="/developers/api-reference/workflow-endpoints/batch-run-workflow">Batch Run Workflow</a> endpoint.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "files", nulls = Nulls.SKIP)
        public _FinalStage files(Optional<List<WorkflowRunFileInput>> files) {
            this.files = files;
            return this;
        }

        @java.lang.Override
        public WorkflowRunCreateRequest build() {
            return new WorkflowRunCreateRequest(
                    workflowId, files, rawTexts, version, priority, metadata, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.workflowrun.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.types.SortByEnum;
import ai.extend.types.SortDirEnum;
import ai.extend.types.WorkflowStatus;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WorkflowRunListRequest.Builder.class)
public final class WorkflowRunListRequest {
    private final Optional<WorkflowStatus> status;

    private final Optional<String> workflowId;

    private final Optional<String> batchId;

    private final Optional<String> fileNameContains;

    private final Optional<SortByEnum> sortBy;

    private final Optional<SortDirEnum> sortDir;

    private final Optional<String> nextPageToken;

    private final Optional<Integer> maxPageSize;

    private final Map<String, Object> additionalProperties;

    private WorkflowRunListRequest(
            Optional<WorkflowStatus> status,
            Optional<String> workflowId,
            Optional<String> batchId,
            Optional<String> fileNameContains,
            Optional<SortByEnum> sortBy,
            Optional<SortDirEnum> sortDir,
            Optional<String> nextPageToken,
            Optional<Integer> maxPageSize,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.workflowId = workflowId;
        this.batchId = batchId;
        this.fileNameContains = fileNameContains;
        this.sortBy = sortBy;
        this.sortDir = sortDir;
        this.nextPageToken = nextPageToken;
        this.maxPageSize = maxPageSize;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filters workflow runs by their status. If not provided, no filter is applied.
     * <p>The status of a workflow run:</p>
     * <ul>
     * <li><code>&quot;PENDING&quot;</code> - The workflow run has not started yet</li>
     * <li><code>&quot;PROCESSING&quot;</code> - The workflow run is in progress</li>
     * <li><code>&quot;NEEDS_REVIEW&quot;</code> - The workflow run requires manual review</li>
     * <li><code>&quot;REJECTED&quot;</code> - The workflow run was rejected during manual review</li>
     * <li><code>&quot;PROCESSED&quot;</code> - The workflow run completed successfully</li>
     * <li><code>&quot;FAILED&quot;</code> - The workflow run encountered an error</li>
     * </ul>
     */
    @JsonProperty("status")
    public Optional<WorkflowStatus> getStatus() {
        return status;
    }

    /**
     * @return Filters workflow runs by the workflow ID. If not provided, runs for all workflows are returned.
     * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
     */
    @JsonProperty("workflowId")
    public Optional<String> getWorkflowId() {
        return workflowId;
    }

    /**
     * @return Filters workflow runs by the batch ID. This is useful for fetching all runs for a given batch created via the <a href="/developers/api-reference/workflow-endpoints/batch-run-workflow">Batch Run Workflow</a> endpoint.
     * <p>Example: <code>&quot;batch_7Ws31-F5&quot;</code></p>
     */
    @JsonProperty("batchId")
    public Optional<String> getBatchId() {
        return batchId;
    }

    /**
     * @return Filters workflow runs by the name of the file. Only returns workflow runs where the file name contains this string.
     * <p>Example: <code>&quot;invoice&quot;</code></p>
     */
    @JsonProperty("fileNameContains")
    public Optional<String> getFileNameContains() {
        return fileNameContains;
    }

    /**
     * @return Sorts the workflow runs by the given field.
     */
    @JsonProperty("sortBy")
    public Optional<SortByEnum> getSortBy() {
        return sortBy;
    }

    /**
     * @return Sorts the workflow runs in ascending or descending order. Ascending order means the earliest workflow run is returned first.
     */
    @JsonProperty("sortDir")
    public Optional<SortDirEnum> getSortDir() {
        return sortDir;
    }

    @JsonProperty("nextPageToken")
    public Optional<String> getNextPageToken() {
        return nextPageToken;
    }

    @JsonProperty("maxPageSize")
    public Optional<Integer> getMaxPageSize() {
        return maxPageSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WorkflowRunListRequest && equalTo((WorkflowRunListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WorkflowRunListRequest other) {
        return status.equals(other.status)
                && workflowId.equals(other.workflowId)
                && batchId.equals(other.batchId)
                && fileNameContains.equals(other.fileNameContains)
                && sortBy.equals(other.sortBy)
                && sortDir.equals(other.sortDir)
                && nextPageToken.equals(other.nextPageToken)
                && maxPageSize.equals(other.maxPageSize);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.workflowId,
                this.batchId,
                this.fileNameContains,
                this.sortBy,
                this.sortDir,
                this.nextPageToken,
                this.maxPageSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<WorkflowStatus> status = Optional.empty();

        private Optional<String> workflowId = Optional.empty();

        private Optional<String> batchId = Optional.empty();

        private Optional<String> fileNameContains = Optional.empty();

        private Optional<SortByEnum> sortBy = Optional.empty();

        private Optional<SortDirEnum> sortDir = Optional.empty();

        private Optional<String> nextPageToken = Optional.empty();

        private Optional<Integer> maxPageSize = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(WorkflowRunListRequest other) {
            status(other.getStatus());
            workflowId(other.getWorkflowId());
            batchId(other.getBatchId());
            fileNameContains(other.getFileNameContains());
            sortBy(other.getSortBy());
            sortDir(other.getSortDir());
            nextPageToken(other.getNextPageToken());
            maxPageSize(other.getMaxPageSize());
            return this;
        }

        /**
         * <p>Filters workflow runs by their status. If not provided, no filter is applied.</p>
         * <p>The status of a workflow run:</p>
         * <ul>
         * <li><code>&quot;PENDING&quot;</code> - The workflow run has not started yet</li>
         * <li><code>&quot;PROCESSING&quot;</code> - The workflow run is in progress</li>
         * <li><code>&quot;NEEDS_REVIEW&quot;</code> - The workflow run requires manual review</li>
         * <li><code>&quot;REJECTED&quot;</code> - The workflow run was rejected during manual review</li>
         * <li><code>&quot;PROCESSED&quot;</code> - The workflow run completed successfully</li>
         * <li><code>&quot;FAILED&quot;</code> - The workflow run encountered an error</li>
         * </ul>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<WorkflowStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(WorkflowStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Filters workflow runs by the workflow ID. If not provided, runs for all workflows are returned.</p>
         * <p>Example: <code>&quot;workflow_BMdfq_yWM3sT-ZzvCnA3f&quot;</code></p>
         */
        @JsonSetter(value = "workflowId", nulls = Nulls.SKIP)
        public Builder workflowId(Optional<String> workflowId) {
            this.workflowId = workflowId;
            return this;
        }

        public Builder workflowId(String workflowId) {
            this.workflowId = Optional.ofNullable(workflowId);
            return this;
        }

        /**
         * <p>Filters workflow runs by the batch ID. This is useful for fetching all runs for a given batch created via the <a href="/developers/api-reference/workflow-endpoints/batch-run-workflow">Batch Run Workflow</a> endpoint.</p>
         * <p>Example: <code>&quot;batch_7Ws31-F5&quot;</code></p>
         */
        @JsonSetter(value = "batchId", nulls = Nulls.SKIP)
        public Builder batchId(Optional<String> batchId) {
            this.batchId = batchId;
            return this;
        }

        public Builder batchId(String batchId) {
            this.batchId = Optional.ofNullable(batchId);
            return this;
        }

        /**
         * <p>Filters workflow runs by the name of the file. Only returns workflow runs where the file name contains this string.</p>
         * <p>Example: <code>&quot;invoice&quot;</code></p>
         */
        @JsonSetter(value = "fileNameContains", nulls = Nulls.SKIP)
        public Builder fileNameContains(Optional<String> fileNameContains) {
            this.fileNameContains = fileNameContains;
            return this;
        }

        public Builder fileNameContains(String fileNameContains) {
            this.fileNameContains = Optional.ofNullable(fileNameContains);
            return this;
        }

        /**
         * <p>Sorts the workflow runs by the given field.</p>
         */
        @JsonSetter(value = "sortBy", nulls = Nulls.SKIP)
        public Builder sortBy(Optional<SortByEnum> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        public Builder sortBy(SortByEnum sortBy) {
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        /**
         * <p>Sorts the workflow runs in ascending or descending order. Ascending order means the earliest workflow run is returned first.</p>
         */
        @JsonSetter(value = "sortDir", nulls = Nulls.SKIP)
        public Builder sortDir(Optional<SortDirEnum> sortDir) {
            this.sortDir = sortDir;
            return this;
        }

        public Builder sortDir(SortDirEnum sortDir) {
            this.sortDir = Optional.ofNullable(sortDir);
            return this;
        }

        @JsonSetter(value = "nextPageToken", nulls = Nulls.SKIP)
        public Builder nextPageToken(Optional<String> nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }

        public Builder nextPageToken(String nextPageToken) {
            this.nextPageToken = Optional.ofNullable(nextPageToken);
            return this;
        }

        @JsonSetter(value = "maxPageSize", nulls = Nulls.SKIP)
        public Builder maxPageSize(Optional<Integer> maxPageSize) {
            this.maxPageSize = maxPageSize;
            return this;
        }

        public Builder maxPageSize(Integer maxPageSize) {
            this.maxPageSize = Optional.ofNullable(maxPageSize);
            return this;
        }

        public WorkflowRunListRequest build() {
            return new WorkflowRunListRequest(
                    status,
                    workflowId,
                    batchId,
                    fileNameContains,
                    sortBy,
                    sortDir,
                    nextPageToken,
                    maxPageSize,
                    additionalProperties);
        }
    }
}

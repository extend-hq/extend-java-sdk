/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.parserrun;

import ai.extend.core.ClientOptions;
import ai.extend.core.ExtendClientApiException;
import ai.extend.core.ExtendClientException;
import ai.extend.core.ExtendClientHttpResponse;
import ai.extend.core.ObjectMappers;
import ai.extend.core.QueryStringMapper;
import ai.extend.core.RequestOptions;
import ai.extend.errors.BadRequestError;
import ai.extend.errors.InternalServerError;
import ai.extend.errors.NotFoundError;
import ai.extend.errors.UnauthorizedError;
import ai.extend.resources.parserrun.requests.ParserRunGetRequest;
import ai.extend.resources.parserrun.types.ParserRunDeleteResponse;
import ai.extend.resources.parserrun.types.ParserRunGetResponse;
import ai.extend.types.Error;
import ai.extend.types.ExtendError;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawParserRunClient {
    protected final ClientOptions clientOptions;

    public RawParserRunClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Retrieve the status and results of a parser run.
     * <p>Use this endpoint to get results for a parser run that has already completed, or to check on the status of an asynchronous parser run initiated via the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file-async">Parse File Asynchronously</a> endpoint.</p>
     * <p>If parsing is still in progress, you'll receive a response with just the status. Once complete, you'll receive the full parsed content in the response.</p>
     */
    public ExtendClientHttpResponse<ParserRunGetResponse> get(String id) {
        return get(id, ParserRunGetRequest.builder().build());
    }

    /**
     * Retrieve the status and results of a parser run.
     * <p>Use this endpoint to get results for a parser run that has already completed, or to check on the status of an asynchronous parser run initiated via the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file-async">Parse File Asynchronously</a> endpoint.</p>
     * <p>If parsing is still in progress, you'll receive a response with just the status. Once complete, you'll receive the full parsed content in the response.</p>
     */
    public ExtendClientHttpResponse<ParserRunGetResponse> get(String id, ParserRunGetRequest request) {
        return get(id, request, null);
    }

    /**
     * Retrieve the status and results of a parser run.
     * <p>Use this endpoint to get results for a parser run that has already completed, or to check on the status of an asynchronous parser run initiated via the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file-async">Parse File Asynchronously</a> endpoint.</p>
     * <p>If parsing is still in progress, you'll receive a response with just the status. Once complete, you'll receive the full parsed content in the response.</p>
     */
    public ExtendClientHttpResponse<ParserRunGetResponse> get(
            String id, ParserRunGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("parser_runs")
                .addPathSegment(id);
        if (request.getResponseType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "responseType", request.getResponseType().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ParserRunGetResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }

    /**
     * Delete a parser run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public ExtendClientHttpResponse<ParserRunDeleteResponse> delete(String id) {
        return delete(id, null);
    }

    /**
     * Delete a parser run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public ExtendClientHttpResponse<ParserRunDeleteResponse> delete(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("parser_runs")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ParserRunDeleteResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ExtendError.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }
}

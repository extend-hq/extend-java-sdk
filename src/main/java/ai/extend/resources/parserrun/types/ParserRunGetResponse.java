/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.parserrun.types;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParserRunGetResponse.Builder.class)
public final class ParserRunGetResponse {
    private final boolean success;

    private final Optional<String> warning;

    private final ParserRunGetResponseParserRun parserRun;

    private final Map<String, Object> additionalProperties;

    private ParserRunGetResponse(
            boolean success,
            Optional<String> warning,
            ParserRunGetResponseParserRun parserRun,
            Map<String, Object> additionalProperties) {
        this.success = success;
        this.warning = warning;
        this.parserRun = parserRun;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("success")
    public boolean getSuccess() {
        return success;
    }

    /**
     * @return Warning message about missing API version header if applicable
     */
    @JsonProperty("warning")
    public Optional<String> getWarning() {
        return warning;
    }

    @JsonProperty("parserRun")
    public ParserRunGetResponseParserRun getParserRun() {
        return parserRun;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParserRunGetResponse && equalTo((ParserRunGetResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParserRunGetResponse other) {
        return success == other.success && warning.equals(other.warning) && parserRun.equals(other.parserRun);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.success, this.warning, this.parserRun);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SuccessStage builder() {
        return new Builder();
    }

    public interface SuccessStage {
        ParserRunStage success(boolean success);

        Builder from(ParserRunGetResponse other);
    }

    public interface ParserRunStage {
        _FinalStage parserRun(@NotNull ParserRunGetResponseParserRun parserRun);
    }

    public interface _FinalStage {
        ParserRunGetResponse build();

        /**
         * <p>Warning message about missing API version header if applicable</p>
         */
        _FinalStage warning(Optional<String> warning);

        _FinalStage warning(String warning);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SuccessStage, ParserRunStage, _FinalStage {
        private boolean success;

        private ParserRunGetResponseParserRun parserRun;

        private Optional<String> warning = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ParserRunGetResponse other) {
            success(other.getSuccess());
            warning(other.getWarning());
            parserRun(other.getParserRun());
            return this;
        }

        @java.lang.Override
        @JsonSetter("success")
        public ParserRunStage success(boolean success) {
            this.success = success;
            return this;
        }

        @java.lang.Override
        @JsonSetter("parserRun")
        public _FinalStage parserRun(@NotNull ParserRunGetResponseParserRun parserRun) {
            this.parserRun = Objects.requireNonNull(parserRun, "parserRun must not be null");
            return this;
        }

        /**
         * <p>Warning message about missing API version header if applicable</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage warning(String warning) {
            this.warning = Optional.ofNullable(warning);
            return this;
        }

        /**
         * <p>Warning message about missing API version header if applicable</p>
         */
        @java.lang.Override
        @JsonSetter(value = "warning", nulls = Nulls.SKIP)
        public _FinalStage warning(Optional<String> warning) {
            this.warning = warning;
            return this;
        }

        @java.lang.Override
        public ParserRunGetResponse build() {
            return new ParserRunGetResponse(success, warning, parserRun, additionalProperties);
        }
    }
}

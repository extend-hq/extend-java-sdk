/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.parserrun.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.resources.parserrun.types.ParserRunGetRequestResponseType;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ParserRunGetRequest.Builder.class)
public final class ParserRunGetRequest {
    private final Optional<ParserRunGetRequestResponseType> responseType;

    private final Map<String, Object> additionalProperties;

    private ParserRunGetRequest(
            Optional<ParserRunGetRequestResponseType> responseType, Map<String, Object> additionalProperties) {
        this.responseType = responseType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Controls the format of the response chunks. Defaults to <code>json</code> if not specified.
     * <ul>
     * <li><code>json</code> - Returns chunks with inline content</li>
     * <li><code>url</code> - Returns chunks with presigned URLs to content instead of inline data</li>
     * </ul>
     */
    @JsonProperty("responseType")
    public Optional<ParserRunGetRequestResponseType> getResponseType() {
        return responseType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ParserRunGetRequest && equalTo((ParserRunGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ParserRunGetRequest other) {
        return responseType.equals(other.responseType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.responseType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ParserRunGetRequestResponseType> responseType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ParserRunGetRequest other) {
            responseType(other.getResponseType());
            return this;
        }

        /**
         * <p>Controls the format of the response chunks. Defaults to <code>json</code> if not specified.</p>
         * <ul>
         * <li><code>json</code> - Returns chunks with inline content</li>
         * <li><code>url</code> - Returns chunks with presigned URLs to content instead of inline data</li>
         * </ul>
         */
        @JsonSetter(value = "responseType", nulls = Nulls.SKIP)
        public Builder responseType(Optional<ParserRunGetRequestResponseType> responseType) {
            this.responseType = responseType;
            return this;
        }

        public Builder responseType(ParserRunGetRequestResponseType responseType) {
            this.responseType = Optional.ofNullable(responseType);
            return this;
        }

        public ParserRunGetRequest build() {
            return new ParserRunGetRequest(responseType, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.parserrun;

import ai.extend.core.ClientOptions;
import ai.extend.core.RequestOptions;
import ai.extend.resources.parserrun.requests.ParserRunGetRequest;
import ai.extend.resources.parserrun.types.ParserRunDeleteResponse;
import ai.extend.resources.parserrun.types.ParserRunGetResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncParserRunClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawParserRunClient rawClient;

    public AsyncParserRunClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawParserRunClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawParserRunClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieve the status and results of a parser run.
     * <p>Use this endpoint to get results for a parser run that has already completed, or to check on the status of an asynchronous parser run initiated via the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file-async">Parse File Asynchronously</a> endpoint.</p>
     * <p>If parsing is still in progress, you'll receive a response with just the status. Once complete, you'll receive the full parsed content in the response.</p>
     */
    public CompletableFuture<ParserRunGetResponse> get(String id) {
        return this.rawClient.get(id).thenApply(response -> response.body());
    }

    /**
     * Retrieve the status and results of a parser run.
     * <p>Use this endpoint to get results for a parser run that has already completed, or to check on the status of an asynchronous parser run initiated via the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file-async">Parse File Asynchronously</a> endpoint.</p>
     * <p>If parsing is still in progress, you'll receive a response with just the status. Once complete, you'll receive the full parsed content in the response.</p>
     */
    public CompletableFuture<ParserRunGetResponse> get(String id, ParserRunGetRequest request) {
        return this.rawClient.get(id, request).thenApply(response -> response.body());
    }

    /**
     * Retrieve the status and results of a parser run.
     * <p>Use this endpoint to get results for a parser run that has already completed, or to check on the status of an asynchronous parser run initiated via the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file-async">Parse File Asynchronously</a> endpoint.</p>
     * <p>If parsing is still in progress, you'll receive a response with just the status. Once complete, you'll receive the full parsed content in the response.</p>
     */
    public CompletableFuture<ParserRunGetResponse> get(
            String id, ParserRunGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(id, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Delete a parser run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public CompletableFuture<ParserRunDeleteResponse> delete(String id) {
        return this.rawClient.delete(id).thenApply(response -> response.body());
    }

    /**
     * Delete a parser run and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public CompletableFuture<ParserRunDeleteResponse> delete(String id, RequestOptions requestOptions) {
        return this.rawClient.delete(id, requestOptions).thenApply(response -> response.body());
    }
}

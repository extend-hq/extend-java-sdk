/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.processorversion.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.resources.processorversion.types.ProcessorVersionCreateRequestConfig;
import ai.extend.resources.processorversion.types.ProcessorVersionCreateRequestReleaseType;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessorVersionCreateRequest.Builder.class)
public final class ProcessorVersionCreateRequest {
    private final ProcessorVersionCreateRequestReleaseType releaseType;

    private final Optional<String> description;

    private final Optional<ProcessorVersionCreateRequestConfig> config;

    private final Map<String, Object> additionalProperties;

    private ProcessorVersionCreateRequest(
            ProcessorVersionCreateRequestReleaseType releaseType,
            Optional<String> description,
            Optional<ProcessorVersionCreateRequestConfig> config,
            Map<String, Object> additionalProperties) {
        this.releaseType = releaseType;
        this.description = description;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of release for this version. The two options are &quot;major&quot; and &quot;minor&quot;, which will increment the version number accordingly.
     */
    @JsonProperty("releaseType")
    public ProcessorVersionCreateRequestReleaseType getReleaseType() {
        return releaseType;
    }

    /**
     * @return A description of the changes in this version. This helps track the evolution of the processor over time.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The configuration for this version of the processor. The type of configuration must match the processor type.
     */
    @JsonProperty("config")
    public Optional<ProcessorVersionCreateRequestConfig> getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessorVersionCreateRequest && equalTo((ProcessorVersionCreateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessorVersionCreateRequest other) {
        return releaseType.equals(other.releaseType)
                && description.equals(other.description)
                && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.releaseType, this.description, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ReleaseTypeStage builder() {
        return new Builder();
    }

    public interface ReleaseTypeStage {
        /**
         * <p>The type of release for this version. The two options are &quot;major&quot; and &quot;minor&quot;, which will increment the version number accordingly.</p>
         */
        _FinalStage releaseType(@NotNull ProcessorVersionCreateRequestReleaseType releaseType);

        Builder from(ProcessorVersionCreateRequest other);
    }

    public interface _FinalStage {
        ProcessorVersionCreateRequest build();

        /**
         * <p>A description of the changes in this version. This helps track the evolution of the processor over time.</p>
         */
        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        /**
         * <p>The configuration for this version of the processor. The type of configuration must match the processor type.</p>
         */
        _FinalStage config(Optional<ProcessorVersionCreateRequestConfig> config);

        _FinalStage config(ProcessorVersionCreateRequestConfig config);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ReleaseTypeStage, _FinalStage {
        private ProcessorVersionCreateRequestReleaseType releaseType;

        private Optional<ProcessorVersionCreateRequestConfig> config = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProcessorVersionCreateRequest other) {
            releaseType(other.getReleaseType());
            description(other.getDescription());
            config(other.getConfig());
            return this;
        }

        /**
         * <p>The type of release for this version. The two options are &quot;major&quot; and &quot;minor&quot;, which will increment the version number accordingly.</p>
         * <p>The type of release for this version. The two options are &quot;major&quot; and &quot;minor&quot;, which will increment the version number accordingly.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("releaseType")
        public _FinalStage releaseType(@NotNull ProcessorVersionCreateRequestReleaseType releaseType) {
            this.releaseType = Objects.requireNonNull(releaseType, "releaseType must not be null");
            return this;
        }

        /**
         * <p>The configuration for this version of the processor. The type of configuration must match the processor type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage config(ProcessorVersionCreateRequestConfig config) {
            this.config = Optional.ofNullable(config);
            return this;
        }

        /**
         * <p>The configuration for this version of the processor. The type of configuration must match the processor type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public _FinalStage config(Optional<ProcessorVersionCreateRequestConfig> config) {
            this.config = config;
            return this;
        }

        /**
         * <p>A description of the changes in this version. This helps track the evolution of the processor over time.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>A description of the changes in this version. This helps track the evolution of the processor over time.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public ProcessorVersionCreateRequest build() {
            return new ProcessorVersionCreateRequest(releaseType, description, config, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.processorversion.types;

import ai.extend.core.ObjectMappers;
import ai.extend.types.ProcessorVersion;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessorVersionGetResponse.Builder.class)
public final class ProcessorVersionGetResponse {
    private final boolean success;

    private final ProcessorVersion version;

    private final Map<String, Object> additionalProperties;

    private ProcessorVersionGetResponse(
            boolean success, ProcessorVersion version, Map<String, Object> additionalProperties) {
        this.success = success;
        this.version = version;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("success")
    public boolean getSuccess() {
        return success;
    }

    /**
     * @return A ProcessorVersion object representing the requested version of the processor.
     */
    @JsonProperty("version")
    public ProcessorVersion getVersion() {
        return version;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessorVersionGetResponse && equalTo((ProcessorVersionGetResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessorVersionGetResponse other) {
        return success == other.success && version.equals(other.version);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.success, this.version);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SuccessStage builder() {
        return new Builder();
    }

    public interface SuccessStage {
        VersionStage success(boolean success);

        Builder from(ProcessorVersionGetResponse other);
    }

    public interface VersionStage {
        /**
         * <p>A ProcessorVersion object representing the requested version of the processor.</p>
         */
        _FinalStage version(@NotNull ProcessorVersion version);
    }

    public interface _FinalStage {
        ProcessorVersionGetResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SuccessStage, VersionStage, _FinalStage {
        private boolean success;

        private ProcessorVersion version;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProcessorVersionGetResponse other) {
            success(other.getSuccess());
            version(other.getVersion());
            return this;
        }

        @java.lang.Override
        @JsonSetter("success")
        public VersionStage success(boolean success) {
            this.success = success;
            return this;
        }

        /**
         * <p>A ProcessorVersion object representing the requested version of the processor.</p>
         * <p>A ProcessorVersion object representing the requested version of the processor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("version")
        public _FinalStage version(@NotNull ProcessorVersion version) {
            this.version = Objects.requireNonNull(version, "version must not be null");
            return this;
        }

        @java.lang.Override
        public ProcessorVersionGetResponse build() {
            return new ProcessorVersionGetResponse(success, version, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.processorversion;

import ai.extend.core.ClientOptions;
import ai.extend.core.RequestOptions;
import ai.extend.resources.processorversion.requests.ProcessorVersionCreateRequest;
import ai.extend.resources.processorversion.types.ProcessorVersionCreateResponse;
import ai.extend.resources.processorversion.types.ProcessorVersionGetResponse;
import ai.extend.resources.processorversion.types.ProcessorVersionListResponse;

public class ProcessorVersionClient {
    protected final ClientOptions clientOptions;

    private final RawProcessorVersionClient rawClient;

    public ProcessorVersionClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawProcessorVersionClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawProcessorVersionClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieve a specific version of a processor in Extend
     */
    public ProcessorVersionGetResponse get(String processorId, String processorVersionId) {
        return this.rawClient.get(processorId, processorVersionId).body();
    }

    /**
     * Retrieve a specific version of a processor in Extend
     */
    public ProcessorVersionGetResponse get(
            String processorId, String processorVersionId, RequestOptions requestOptions) {
        return this.rawClient
                .get(processorId, processorVersionId, requestOptions)
                .body();
    }

    /**
     * This endpoint allows you to fetch all versions of a given processor, including the current <code>draft</code> version.
     * <p>Versions are typically returned in descending order of creation (newest first), but this should be confirmed in the actual implementation.
     * The <code>draft</code> version is the latest unpublished version of the processor, which can be published to create a new version. It might not have any changes from the last published version.</p>
     */
    public ProcessorVersionListResponse list(String id) {
        return this.rawClient.list(id).body();
    }

    /**
     * This endpoint allows you to fetch all versions of a given processor, including the current <code>draft</code> version.
     * <p>Versions are typically returned in descending order of creation (newest first), but this should be confirmed in the actual implementation.
     * The <code>draft</code> version is the latest unpublished version of the processor, which can be published to create a new version. It might not have any changes from the last published version.</p>
     */
    public ProcessorVersionListResponse list(String id, RequestOptions requestOptions) {
        return this.rawClient.list(id, requestOptions).body();
    }

    /**
     * This endpoint allows you to publish a new version of an existing processor. Publishing a new version creates a snapshot of the processor's current configuration and makes it available for use in workflows.
     * <p>Publishing a new version does not automatically update existing workflows using this processor. You may need to manually update workflows to use the new version if desired.</p>
     */
    public ProcessorVersionCreateResponse create(String id, ProcessorVersionCreateRequest request) {
        return this.rawClient.create(id, request).body();
    }

    /**
     * This endpoint allows you to publish a new version of an existing processor. Publishing a new version creates a snapshot of the processor's current configuration and makes it available for use in workflows.
     * <p>Publishing a new version does not automatically update existing workflows using this processor. You may need to manually update workflows to use the new version if desired.</p>
     */
    public ProcessorVersionCreateResponse create(
            String id, ProcessorVersionCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(id, request, requestOptions).body();
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.file.requests;

import ai.extend.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FileGetRequest.Builder.class)
public final class FileGetRequest {
    private final Optional<Boolean> rawText;

    private final Optional<Boolean> markdown;

    private final Optional<Boolean> html;

    private final Map<String, Object> additionalProperties;

    private FileGetRequest(
            Optional<Boolean> rawText,
            Optional<Boolean> markdown,
            Optional<Boolean> html,
            Map<String, Object> additionalProperties) {
        this.rawText = rawText;
        this.markdown = markdown;
        this.html = html;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If set to true, the raw text content of the file will be included in the response. This is useful for indexing text-based files like PDFs, Word Documents, etc.
     */
    @JsonProperty("rawText")
    public Optional<Boolean> getRawText() {
        return rawText;
    }

    /**
     * @return If set to true, the markdown content of the file will be included in the response. This is useful for indexing very clean content into RAG pipelines for files like PDFs, Word Documents, etc.
     * <p>Only available for files with a type of PDF, IMG, or .doc/.docx files that were auto-converted to PDFs.</p>
     */
    @JsonProperty("markdown")
    public Optional<Boolean> getMarkdown() {
        return markdown;
    }

    /**
     * @return If set to true, the html content of the file will be included in the response. This is useful for indexing html content into RAG pipelines.
     * <p>Only available for files with a type of DOCX.</p>
     */
    @JsonProperty("html")
    public Optional<Boolean> getHtml() {
        return html;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FileGetRequest && equalTo((FileGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FileGetRequest other) {
        return rawText.equals(other.rawText) && markdown.equals(other.markdown) && html.equals(other.html);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.rawText, this.markdown, this.html);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> rawText = Optional.empty();

        private Optional<Boolean> markdown = Optional.empty();

        private Optional<Boolean> html = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FileGetRequest other) {
            rawText(other.getRawText());
            markdown(other.getMarkdown());
            html(other.getHtml());
            return this;
        }

        /**
         * <p>If set to true, the raw text content of the file will be included in the response. This is useful for indexing text-based files like PDFs, Word Documents, etc.</p>
         */
        @JsonSetter(value = "rawText", nulls = Nulls.SKIP)
        public Builder rawText(Optional<Boolean> rawText) {
            this.rawText = rawText;
            return this;
        }

        public Builder rawText(Boolean rawText) {
            this.rawText = Optional.ofNullable(rawText);
            return this;
        }

        /**
         * <p>If set to true, the markdown content of the file will be included in the response. This is useful for indexing very clean content into RAG pipelines for files like PDFs, Word Documents, etc.</p>
         * <p>Only available for files with a type of PDF, IMG, or .doc/.docx files that were auto-converted to PDFs.</p>
         */
        @JsonSetter(value = "markdown", nulls = Nulls.SKIP)
        public Builder markdown(Optional<Boolean> markdown) {
            this.markdown = markdown;
            return this;
        }

        public Builder markdown(Boolean markdown) {
            this.markdown = Optional.ofNullable(markdown);
            return this;
        }

        /**
         * <p>If set to true, the html content of the file will be included in the response. This is useful for indexing html content into RAG pipelines.</p>
         * <p>Only available for files with a type of DOCX.</p>
         */
        @JsonSetter(value = "html", nulls = Nulls.SKIP)
        public Builder html(Optional<Boolean> html) {
            this.html = html;
            return this;
        }

        public Builder html(Boolean html) {
            this.html = Optional.ofNullable(html);
            return this;
        }

        public FileGetRequest build() {
            return new FileGetRequest(rawText, markdown, html, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.file.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.types.SortDirEnum;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FileListRequest.Builder.class)
public final class FileListRequest {
    private final Optional<String> nameContains;

    private final Optional<SortDirEnum> sortDir;

    private final Optional<String> nextPageToken;

    private final Optional<Integer> maxPageSize;

    private final Map<String, Object> additionalProperties;

    private FileListRequest(
            Optional<String> nameContains,
            Optional<SortDirEnum> sortDir,
            Optional<String> nextPageToken,
            Optional<Integer> maxPageSize,
            Map<String, Object> additionalProperties) {
        this.nameContains = nameContains;
        this.sortDir = sortDir;
        this.nextPageToken = nextPageToken;
        this.maxPageSize = maxPageSize;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filters files to only include those that contain the given string in the name.
     * <p>Example: <code>&quot;invoice&quot;</code></p>
     */
    @JsonProperty("nameContains")
    public Optional<String> getNameContains() {
        return nameContains;
    }

    /**
     * @return Sorts the files in ascending or descending order. Ascending order means the earliest file is returned first.
     */
    @JsonProperty("sortDir")
    public Optional<SortDirEnum> getSortDir() {
        return sortDir;
    }

    @JsonProperty("nextPageToken")
    public Optional<String> getNextPageToken() {
        return nextPageToken;
    }

    @JsonProperty("maxPageSize")
    public Optional<Integer> getMaxPageSize() {
        return maxPageSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FileListRequest && equalTo((FileListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FileListRequest other) {
        return nameContains.equals(other.nameContains)
                && sortDir.equals(other.sortDir)
                && nextPageToken.equals(other.nextPageToken)
                && maxPageSize.equals(other.maxPageSize);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nameContains, this.sortDir, this.nextPageToken, this.maxPageSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> nameContains = Optional.empty();

        private Optional<SortDirEnum> sortDir = Optional.empty();

        private Optional<String> nextPageToken = Optional.empty();

        private Optional<Integer> maxPageSize = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FileListRequest other) {
            nameContains(other.getNameContains());
            sortDir(other.getSortDir());
            nextPageToken(other.getNextPageToken());
            maxPageSize(other.getMaxPageSize());
            return this;
        }

        /**
         * <p>Filters files to only include those that contain the given string in the name.</p>
         * <p>Example: <code>&quot;invoice&quot;</code></p>
         */
        @JsonSetter(value = "nameContains", nulls = Nulls.SKIP)
        public Builder nameContains(Optional<String> nameContains) {
            this.nameContains = nameContains;
            return this;
        }

        public Builder nameContains(String nameContains) {
            this.nameContains = Optional.ofNullable(nameContains);
            return this;
        }

        /**
         * <p>Sorts the files in ascending or descending order. Ascending order means the earliest file is returned first.</p>
         */
        @JsonSetter(value = "sortDir", nulls = Nulls.SKIP)
        public Builder sortDir(Optional<SortDirEnum> sortDir) {
            this.sortDir = sortDir;
            return this;
        }

        public Builder sortDir(SortDirEnum sortDir) {
            this.sortDir = Optional.ofNullable(sortDir);
            return this;
        }

        @JsonSetter(value = "nextPageToken", nulls = Nulls.SKIP)
        public Builder nextPageToken(Optional<String> nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }

        public Builder nextPageToken(String nextPageToken) {
            this.nextPageToken = Optional.ofNullable(nextPageToken);
            return this;
        }

        @JsonSetter(value = "maxPageSize", nulls = Nulls.SKIP)
        public Builder maxPageSize(Optional<Integer> maxPageSize) {
            this.maxPageSize = maxPageSize;
            return this;
        }

        public Builder maxPageSize(Integer maxPageSize) {
            this.maxPageSize = Optional.ofNullable(maxPageSize);
            return this;
        }

        public FileListRequest build() {
            return new FileListRequest(nameContains, sortDir, nextPageToken, maxPageSize, additionalProperties);
        }
    }
}

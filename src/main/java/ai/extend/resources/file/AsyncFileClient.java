/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.file;

import ai.extend.core.ClientOptions;
import ai.extend.core.RequestOptions;
import ai.extend.resources.file.requests.FileGetRequest;
import ai.extend.resources.file.requests.FileListRequest;
import ai.extend.resources.file.requests.FileUploadRequest;
import ai.extend.resources.file.types.FileDeleteResponse;
import ai.extend.resources.file.types.FileGetResponse;
import ai.extend.resources.file.types.FileListResponse;
import ai.extend.resources.file.types.FileUploadResponse;
import java.io.File;
import java.util.concurrent.CompletableFuture;

public class AsyncFileClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawFileClient rawClient;

    public AsyncFileClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawFileClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawFileClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * List files in your account. Files represent documents that have been uploaded to Extend. This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.
     */
    public CompletableFuture<FileListResponse> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    /**
     * List files in your account. Files represent documents that have been uploaded to Extend. This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.
     */
    public CompletableFuture<FileListResponse> list(FileListRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    /**
     * List files in your account. Files represent documents that have been uploaded to Extend. This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.
     */
    public CompletableFuture<FileListResponse> list(FileListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Fetch a file by its ID to obtain additional details and the raw file content.
     */
    public CompletableFuture<FileGetResponse> get(String id) {
        return this.rawClient.get(id).thenApply(response -> response.body());
    }

    /**
     * Fetch a file by its ID to obtain additional details and the raw file content.
     */
    public CompletableFuture<FileGetResponse> get(String id, FileGetRequest request) {
        return this.rawClient.get(id, request).thenApply(response -> response.body());
    }

    /**
     * Fetch a file by its ID to obtain additional details and the raw file content.
     */
    public CompletableFuture<FileGetResponse> get(String id, FileGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(id, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Delete a file and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public CompletableFuture<FileDeleteResponse> delete(String id) {
        return this.rawClient.delete(id).thenApply(response -> response.body());
    }

    /**
     * Delete a file and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public CompletableFuture<FileDeleteResponse> delete(String id, RequestOptions requestOptions) {
        return this.rawClient.delete(id, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Upload and create a new file in Extend.
     * <p>This endpoint accepts file contents and registers them as a File in Extend, which can be used for <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/run-workflow">running workflows</a>, <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/evaluation-set-endpoints/bulk-create-evaluation-set-items">creating evaluation set items</a>, <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file">parsing</a>, etc.</p>
     * <p>If an uploaded file is detected as a Word or PowerPoint document, it will be automatically converted to a PDF.</p>
     * <p>Supported file types can be found <a href="/product/supported-file-types">here</a>.</p>
     * <p>This endpoint requires multipart form encoding. Most HTTP clients will handle this encoding automatically (see the examples).</p>
     */
    public CompletableFuture<FileUploadResponse> upload(File file, FileUploadRequest request) {
        return this.rawClient.upload(file, request).thenApply(response -> response.body());
    }

    /**
     * Upload and create a new file in Extend.
     * <p>This endpoint accepts file contents and registers them as a File in Extend, which can be used for <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/run-workflow">running workflows</a>, <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/evaluation-set-endpoints/bulk-create-evaluation-set-items">creating evaluation set items</a>, <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file">parsing</a>, etc.</p>
     * <p>If an uploaded file is detected as a Word or PowerPoint document, it will be automatically converted to a PDF.</p>
     * <p>Supported file types can be found <a href="/product/supported-file-types">here</a>.</p>
     * <p>This endpoint requires multipart form encoding. Most HTTP clients will handle this encoding automatically (see the examples).</p>
     */
    public CompletableFuture<FileUploadResponse> upload(
            File file, FileUploadRequest request, RequestOptions requestOptions) {
        return this.rawClient.upload(file, request, requestOptions).thenApply(response -> response.body());
    }
}

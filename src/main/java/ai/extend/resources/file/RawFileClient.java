/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.file;

import ai.extend.core.ClientOptions;
import ai.extend.core.ExtendClientApiException;
import ai.extend.core.ExtendClientException;
import ai.extend.core.ExtendClientHttpResponse;
import ai.extend.core.ObjectMappers;
import ai.extend.core.QueryStringMapper;
import ai.extend.core.RequestOptions;
import ai.extend.errors.BadRequestError;
import ai.extend.errors.InternalServerError;
import ai.extend.errors.NotFoundError;
import ai.extend.errors.UnauthorizedError;
import ai.extend.resources.file.requests.FileGetRequest;
import ai.extend.resources.file.requests.FileListRequest;
import ai.extend.resources.file.requests.FileUploadRequest;
import ai.extend.resources.file.types.FileDeleteResponse;
import ai.extend.resources.file.types.FileGetResponse;
import ai.extend.resources.file.types.FileListResponse;
import ai.extend.resources.file.types.FileUploadResponse;
import ai.extend.types.Error;
import ai.extend.types.ExtendError;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawFileClient {
    protected final ClientOptions clientOptions;

    public RawFileClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * List files in your account. Files represent documents that have been uploaded to Extend. This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.
     */
    public ExtendClientHttpResponse<FileListResponse> list() {
        return list(FileListRequest.builder().build());
    }

    /**
     * List files in your account. Files represent documents that have been uploaded to Extend. This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.
     */
    public ExtendClientHttpResponse<FileListResponse> list(FileListRequest request) {
        return list(request, null);
    }

    /**
     * List files in your account. Files represent documents that have been uploaded to Extend. This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.
     */
    public ExtendClientHttpResponse<FileListResponse> list(FileListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("files");
        if (request.getNameContains().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "nameContains", request.getNameContains().get(), false);
        }
        if (request.getSortDir().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sortDir", request.getSortDir().get(), false);
        }
        if (request.getNextPageToken().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "nextPageToken", request.getNextPageToken().get(), false);
        }
        if (request.getMaxPageSize().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "maxPageSize", request.getMaxPageSize().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), FileListResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }

    /**
     * Fetch a file by its ID to obtain additional details and the raw file content.
     */
    public ExtendClientHttpResponse<FileGetResponse> get(String id) {
        return get(id, FileGetRequest.builder().build());
    }

    /**
     * Fetch a file by its ID to obtain additional details and the raw file content.
     */
    public ExtendClientHttpResponse<FileGetResponse> get(String id, FileGetRequest request) {
        return get(id, request, null);
    }

    /**
     * Fetch a file by its ID to obtain additional details and the raw file content.
     */
    public ExtendClientHttpResponse<FileGetResponse> get(
            String id, FileGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("files")
                .addPathSegment(id);
        if (request.getRawText().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "rawText", request.getRawText().get(), false);
        }
        if (request.getMarkdown().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "markdown", request.getMarkdown().get(), false);
        }
        if (request.getHtml().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "html", request.getHtml().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), FileGetResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }

    /**
     * Delete a file and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public ExtendClientHttpResponse<FileDeleteResponse> delete(String id) {
        return delete(id, null);
    }

    /**
     * Delete a file and all associated data from Extend. This operation is permanent and cannot be undone.
     * <p>This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.</p>
     */
    public ExtendClientHttpResponse<FileDeleteResponse> delete(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("files")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), FileDeleteResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ExtendError.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }

    /**
     * Upload and create a new file in Extend.
     * <p>This endpoint accepts file contents and registers them as a File in Extend, which can be used for <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/run-workflow">running workflows</a>, <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/evaluation-set-endpoints/bulk-create-evaluation-set-items">creating evaluation set items</a>, <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file">parsing</a>, etc.</p>
     * <p>If an uploaded file is detected as a Word or PowerPoint document, it will be automatically converted to a PDF.</p>
     * <p>Supported file types can be found <a href="/product/supported-file-types">here</a>.</p>
     * <p>This endpoint requires multipart form encoding. Most HTTP clients will handle this encoding automatically (see the examples).</p>
     */
    public ExtendClientHttpResponse<FileUploadResponse> upload(File file, FileUploadRequest request) {
        return upload(file, request, null);
    }

    /**
     * Upload and create a new file in Extend.
     * <p>This endpoint accepts file contents and registers them as a File in Extend, which can be used for <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/workflow-endpoints/run-workflow">running workflows</a>, <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/evaluation-set-endpoints/bulk-create-evaluation-set-items">creating evaluation set items</a>, <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file">parsing</a>, etc.</p>
     * <p>If an uploaded file is detected as a Word or PowerPoint document, it will be automatically converted to a PDF.</p>
     * <p>Supported file types can be found <a href="/product/supported-file-types">here</a>.</p>
     * <p>This endpoint requires multipart form encoding. Most HTTP clients will handle this encoding automatically (see the examples).</p>
     */
    public ExtendClientHttpResponse<FileUploadResponse> upload(
            File file, FileUploadRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("files/upload")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), FileUploadResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }
}

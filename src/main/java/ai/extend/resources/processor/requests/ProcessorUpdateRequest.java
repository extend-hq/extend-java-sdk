/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.processor.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.resources.processor.types.ProcessorUpdateRequestConfig;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProcessorUpdateRequest.Builder.class)
public final class ProcessorUpdateRequest {
    private final Optional<String> name;

    private final Optional<ProcessorUpdateRequestConfig> config;

    private final Map<String, Object> additionalProperties;

    private ProcessorUpdateRequest(
            Optional<String> name,
            Optional<ProcessorUpdateRequestConfig> config,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The new name for the processor
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The new configuration for the processor. The type of configuration must match the processor type:
     * <ul>
     * <li>For classification processors, use <code>ClassificationConfig</code></li>
     * <li>For extraction processors, use <code>ExtractionConfig</code></li>
     * <li>For splitter processors, use <code>SplitterConfig</code></li>
     * </ul>
     */
    @JsonProperty("config")
    public Optional<ProcessorUpdateRequestConfig> getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProcessorUpdateRequest && equalTo((ProcessorUpdateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProcessorUpdateRequest other) {
        return name.equals(other.name) && config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<ProcessorUpdateRequestConfig> config = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProcessorUpdateRequest other) {
            name(other.getName());
            config(other.getConfig());
            return this;
        }

        /**
         * <p>The new name for the processor</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The new configuration for the processor. The type of configuration must match the processor type:</p>
         * <ul>
         * <li>For classification processors, use <code>ClassificationConfig</code></li>
         * <li>For extraction processors, use <code>ExtractionConfig</code></li>
         * <li>For splitter processors, use <code>SplitterConfig</code></li>
         * </ul>
         */
        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public Builder config(Optional<ProcessorUpdateRequestConfig> config) {
            this.config = config;
            return this;
        }

        public Builder config(ProcessorUpdateRequestConfig config) {
            this.config = Optional.ofNullable(config);
            return this;
        }

        public ProcessorUpdateRequest build() {
            return new ProcessorUpdateRequest(name, config, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.workflowrunoutput;

import ai.extend.core.ClientOptions;
import ai.extend.core.ExtendClientApiException;
import ai.extend.core.ExtendClientException;
import ai.extend.core.ExtendClientHttpResponse;
import ai.extend.core.MediaTypes;
import ai.extend.core.ObjectMappers;
import ai.extend.core.RequestOptions;
import ai.extend.errors.BadRequestError;
import ai.extend.errors.NotFoundError;
import ai.extend.errors.UnauthorizedError;
import ai.extend.resources.workflowrunoutput.requests.WorkflowRunOutputUpdateRequest;
import ai.extend.resources.workflowrunoutput.types.WorkflowRunOutputUpdateResponse;
import ai.extend.types.Error;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawWorkflowRunOutputClient {
    protected final ClientOptions clientOptions;

    public AsyncRawWorkflowRunOutputClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Use this endpoint to submit corrected outputs for a WorkflowRun for future processor evaluation and tuning in Extend.
     * <p>If you are using our Human-in-the-loop workflow review, then we already will be collecting your operator submitted corrections. However, if you are receiving data via the API without human review, there could be incorrect outputs that you would like to correct for future usage in evaluation and tuning within the Extend platform. This endpoint allows you to submit corrected outputs for a WorkflowRun, by providing the correct output for a given output ID.</p>
     * <p>The output ID, would be found in a given entry within the outputs arrays of a Workflow Run payload. The ID would look something like <code>dpr_gwkZZNRrPgkjcq0y-***</code>.</p>
     */
    public CompletableFuture<ExtendClientHttpResponse<WorkflowRunOutputUpdateResponse>> update(
            String workflowRunId, String outputId, WorkflowRunOutputUpdateRequest request) {
        return update(workflowRunId, outputId, request, null);
    }

    /**
     * Use this endpoint to submit corrected outputs for a WorkflowRun for future processor evaluation and tuning in Extend.
     * <p>If you are using our Human-in-the-loop workflow review, then we already will be collecting your operator submitted corrections. However, if you are receiving data via the API without human review, there could be incorrect outputs that you would like to correct for future usage in evaluation and tuning within the Extend platform. This endpoint allows you to submit corrected outputs for a WorkflowRun, by providing the correct output for a given output ID.</p>
     * <p>The output ID, would be found in a given entry within the outputs arrays of a Workflow Run payload. The ID would look something like <code>dpr_gwkZZNRrPgkjcq0y-***</code>.</p>
     */
    public CompletableFuture<ExtendClientHttpResponse<WorkflowRunOutputUpdateResponse>> update(
            String workflowRunId,
            String outputId,
            WorkflowRunOutputUpdateRequest request,
            RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("workflow_runs")
                .addPathSegment(workflowRunId)
                .addPathSegments("outputs")
                .addPathSegment(outputId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new ExtendClientException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<ExtendClientHttpResponse<WorkflowRunOutputUpdateResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new ExtendClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), WorkflowRunOutputUpdateResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new ExtendClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new ExtendClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}

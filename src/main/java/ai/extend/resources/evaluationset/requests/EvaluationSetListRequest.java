/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.evaluationset.requests;

import ai.extend.core.ObjectMappers;
import ai.extend.types.SortByEnum;
import ai.extend.types.SortDirEnum;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EvaluationSetListRequest.Builder.class)
public final class EvaluationSetListRequest {
    private final Optional<String> processorId;

    private final Optional<SortByEnum> sortBy;

    private final Optional<SortDirEnum> sortDir;

    private final Optional<String> nextPageToken;

    private final Optional<Integer> maxPageSize;

    private final Map<String, Object> additionalProperties;

    private EvaluationSetListRequest(
            Optional<String> processorId,
            Optional<SortByEnum> sortBy,
            Optional<SortDirEnum> sortDir,
            Optional<String> nextPageToken,
            Optional<Integer> maxPageSize,
            Map<String, Object> additionalProperties) {
        this.processorId = processorId;
        this.sortBy = sortBy;
        this.sortDir = sortDir;
        this.nextPageToken = nextPageToken;
        this.maxPageSize = maxPageSize;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the processor to filter evaluation sets by.
     * <p>Example: <code>&quot;dp_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
     */
    @JsonProperty("processorId")
    public Optional<String> getProcessorId() {
        return processorId;
    }

    /**
     * @return Sorts the evaluation sets by the given field.
     */
    @JsonProperty("sortBy")
    public Optional<SortByEnum> getSortBy() {
        return sortBy;
    }

    /**
     * @return Sorts the evaluation sets in ascending or descending order. Ascending order means the earliest evaluation set is returned first.
     */
    @JsonProperty("sortDir")
    public Optional<SortDirEnum> getSortDir() {
        return sortDir;
    }

    @JsonProperty("nextPageToken")
    public Optional<String> getNextPageToken() {
        return nextPageToken;
    }

    @JsonProperty("maxPageSize")
    public Optional<Integer> getMaxPageSize() {
        return maxPageSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EvaluationSetListRequest && equalTo((EvaluationSetListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EvaluationSetListRequest other) {
        return processorId.equals(other.processorId)
                && sortBy.equals(other.sortBy)
                && sortDir.equals(other.sortDir)
                && nextPageToken.equals(other.nextPageToken)
                && maxPageSize.equals(other.maxPageSize);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.processorId, this.sortBy, this.sortDir, this.nextPageToken, this.maxPageSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> processorId = Optional.empty();

        private Optional<SortByEnum> sortBy = Optional.empty();

        private Optional<SortDirEnum> sortDir = Optional.empty();

        private Optional<String> nextPageToken = Optional.empty();

        private Optional<Integer> maxPageSize = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EvaluationSetListRequest other) {
            processorId(other.getProcessorId());
            sortBy(other.getSortBy());
            sortDir(other.getSortDir());
            nextPageToken(other.getNextPageToken());
            maxPageSize(other.getMaxPageSize());
            return this;
        }

        /**
         * <p>The ID of the processor to filter evaluation sets by.</p>
         * <p>Example: <code>&quot;dp_Xj8mK2pL9nR4vT7qY5wZ&quot;</code></p>
         */
        @JsonSetter(value = "processorId", nulls = Nulls.SKIP)
        public Builder processorId(Optional<String> processorId) {
            this.processorId = processorId;
            return this;
        }

        public Builder processorId(String processorId) {
            this.processorId = Optional.ofNullable(processorId);
            return this;
        }

        /**
         * <p>Sorts the evaluation sets by the given field.</p>
         */
        @JsonSetter(value = "sortBy", nulls = Nulls.SKIP)
        public Builder sortBy(Optional<SortByEnum> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        public Builder sortBy(SortByEnum sortBy) {
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        /**
         * <p>Sorts the evaluation sets in ascending or descending order. Ascending order means the earliest evaluation set is returned first.</p>
         */
        @JsonSetter(value = "sortDir", nulls = Nulls.SKIP)
        public Builder sortDir(Optional<SortDirEnum> sortDir) {
            this.sortDir = sortDir;
            return this;
        }

        public Builder sortDir(SortDirEnum sortDir) {
            this.sortDir = Optional.ofNullable(sortDir);
            return this;
        }

        @JsonSetter(value = "nextPageToken", nulls = Nulls.SKIP)
        public Builder nextPageToken(Optional<String> nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }

        public Builder nextPageToken(String nextPageToken) {
            this.nextPageToken = Optional.ofNullable(nextPageToken);
            return this;
        }

        @JsonSetter(value = "maxPageSize", nulls = Nulls.SKIP)
        public Builder maxPageSize(Optional<Integer> maxPageSize) {
            this.maxPageSize = maxPageSize;
            return this;
        }

        public Builder maxPageSize(Integer maxPageSize) {
            this.maxPageSize = Optional.ofNullable(maxPageSize);
            return this;
        }

        public EvaluationSetListRequest build() {
            return new EvaluationSetListRequest(
                    processorId, sortBy, sortDir, nextPageToken, maxPageSize, additionalProperties);
        }
    }
}

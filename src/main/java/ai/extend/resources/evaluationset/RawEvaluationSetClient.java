/**
 * This file was auto-generated by Fern from our API Definition.
 */
package ai.extend.resources.evaluationset;

import ai.extend.core.ClientOptions;
import ai.extend.core.ExtendClientApiException;
import ai.extend.core.ExtendClientException;
import ai.extend.core.ExtendClientHttpResponse;
import ai.extend.core.MediaTypes;
import ai.extend.core.ObjectMappers;
import ai.extend.core.QueryStringMapper;
import ai.extend.core.RequestOptions;
import ai.extend.errors.BadRequestError;
import ai.extend.errors.NotFoundError;
import ai.extend.errors.UnauthorizedError;
import ai.extend.resources.evaluationset.requests.EvaluationSetCreateRequest;
import ai.extend.resources.evaluationset.requests.EvaluationSetListRequest;
import ai.extend.resources.evaluationset.types.EvaluationSetCreateResponse;
import ai.extend.resources.evaluationset.types.EvaluationSetGetResponse;
import ai.extend.resources.evaluationset.types.EvaluationSetListResponse;
import ai.extend.types.Error;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawEvaluationSetClient {
    protected final ClientOptions clientOptions;

    public RawEvaluationSetClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * List evaluation sets in your account. You can use the <code>processorId</code> parameter to filter evaluation sets by processor.
     * <p>This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.</p>
     */
    public ExtendClientHttpResponse<EvaluationSetListResponse> list() {
        return list(EvaluationSetListRequest.builder().build());
    }

    /**
     * List evaluation sets in your account. You can use the <code>processorId</code> parameter to filter evaluation sets by processor.
     * <p>This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.</p>
     */
    public ExtendClientHttpResponse<EvaluationSetListResponse> list(EvaluationSetListRequest request) {
        return list(request, null);
    }

    /**
     * List evaluation sets in your account. You can use the <code>processorId</code> parameter to filter evaluation sets by processor.
     * <p>This endpoint returns a paginated response. You can use the <code>nextPageToken</code> to fetch subsequent results.</p>
     */
    public ExtendClientHttpResponse<EvaluationSetListResponse> list(
            EvaluationSetListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("evaluation_sets");
        if (request.getProcessorId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "processorId", request.getProcessorId().get(), false);
        }
        if (request.getSortBy().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sortBy", request.getSortBy().get(), false);
        }
        if (request.getSortDir().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sortDir", request.getSortDir().get(), false);
        }
        if (request.getNextPageToken().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "nextPageToken", request.getNextPageToken().get(), false);
        }
        if (request.getMaxPageSize().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "maxPageSize", request.getMaxPageSize().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EvaluationSetListResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }

    /**
     * Evaluation sets are collections of files and expected outputs that are used to evaluate the performance of a given processor in Extend. This endpoint will create a new evaluation set in Extend, which items can be added to using the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/evaluation-set-endpoints/create-evaluation-set-item">Create Evaluation Set Item</a> endpoint.
     * <p>Note: it is not necessary to create an evaluation set via API. You can also create an evaluation set via the Extend dashboard and take the ID from there.</p>
     */
    public ExtendClientHttpResponse<EvaluationSetCreateResponse> create(EvaluationSetCreateRequest request) {
        return create(request, null);
    }

    /**
     * Evaluation sets are collections of files and expected outputs that are used to evaluate the performance of a given processor in Extend. This endpoint will create a new evaluation set in Extend, which items can be added to using the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/evaluation-set-endpoints/create-evaluation-set-item">Create Evaluation Set Item</a> endpoint.
     * <p>Note: it is not necessary to create an evaluation set via API. You can also create an evaluation set via the Extend dashboard and take the ID from there.</p>
     */
    public ExtendClientHttpResponse<EvaluationSetCreateResponse> create(
            EvaluationSetCreateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("evaluation_sets")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new ExtendClientException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EvaluationSetCreateResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }

    /**
     * Retrieve a specific evaluation set by ID. This returns an evaluation set object, but does not include the items in the evaluation set. You can use the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/evaluation-set-endpoints/list-evaluation-set-items">List Evaluation Set Items</a> endpoint to get the items in an evaluation set.
     */
    public ExtendClientHttpResponse<EvaluationSetGetResponse> get(String id) {
        return get(id, null);
    }

    /**
     * Retrieve a specific evaluation set by ID. This returns an evaluation set object, but does not include the items in the evaluation set. You can use the <a href="https://docs.extend.ai/2025-04-21/developers/api-reference/evaluation-set-endpoints/list-evaluation-set-items">List Evaluation Set Items</a> endpoint to get the items in an evaluation set.
     */
    public ExtendClientHttpResponse<EvaluationSetGetResponse> get(String id, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("evaluation_sets")
                .addPathSegment(id)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new ExtendClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EvaluationSetGetResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ExtendClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new ExtendClientException("Network error executing HTTP request", e);
        }
    }
}
